// Auto-generated documentation index
// Generated at: 2025-07-03T10:28:41.956Z
// Source: Circle Layer documentation files

import { DocumentationIndex } from '../types/docs';

export const DOCS_INDEX: DocumentationIndex = {
  "ai-security-benefits": {
    "id": "ai-security-benefits",
    "title": "AI Security Benefits",
    "content": "# AI Security Benefits\n\n:::info Phase 2 Development\n🚧 **Coming in Phase 2**: AI Security features are currently in development and will be available in Phase 2 of our roadmap.\n:::\n\n## Overview\n\nCircle Layer's planned AI-powered security features will provide several key benefits for developers and users:\n\n## Key Benefits\n\n### 1. Enhanced Threat Detection\n- Real-time monitoring of smart contract interactions\n- Pattern recognition for suspicious activities\n- Automated threat response system\n\n### 2. Reduced Risk\n- Proactive vulnerability scanning\n- Automated security audits\n- Risk assessment and scoring\n\n### 3. Cost Efficiency\n- Lower security audit costs\n- Reduced insurance premiums\n- Minimized downtime due to security incidents\n\n### 4. Developer Support\n- Automated security recommendations\n- Code quality analysis\n- Best practices enforcement\n\n## Implementation\n\nOur AI security system is built on advanced machine learning models that continuously learn from:\n- Network activity patterns\n- Known attack vectors\n- Security audit results\n- Community feedback\n\n## Getting Started\n\nTo enable AI security features in your project:\n\n1. Enable AI security in your project settings\n2. Configure security parameters\n3. Monitor security dashboard\n4. Review automated recommendations",
    "frontmatter": {
      "sidebar_position": 1
    },
    "filePath": "ai-security/benefits.md",
    "category": "ai-security",
    "url": "/ai-security/benefits"
  },
  "ai-security-how-it-works": {
    "id": "ai-security-how-it-works",
    "title": "How AI Security Works",
    "content": ":::info Phase 2 Development\n🚧 **Coming in Phase 2**: AI Security features are currently in development and will be available in Phase 2 of our roadmap. The documentation below shows the planned capabilities.\n:::\n\n  🤖 AI-Powered Protection\n  How AI Security Works\n  \n    Circle Layer's planned AI security system will provide real-time protection against threats, vulnerabilities, and attacks through intelligent monitoring and automated response.\n  \n  \n  \n    \n      99.7%\n      Detection Rate\n    \n    \n      &lt;100ms\n      Response Time\n    \n    \n      24/7\n      Protection\n    \n  \n\n  \n    \n  \n\n## 🏗️ System Architecture\n\nCode example:\ngraph TD\n    A[📊 Data Collection Layer] --> B[🧠 AI Analysis Engine]\n    B --> C[⚡ Response System]\n    \n    A1[Transaction Monitor] --> A\n    A2[Contract Tracker] --> A\n    A3[Network Analysis] --> A\n    A4[Behavior Patterns] --> A\n    \n    B1[ML Models] --> B\n    B2[Pattern Recognition] --> B\n    B3[Anomaly Detection] --> B\n    B4[Risk Assessment] --> B\n    \n    C1[Automated Alerts] --> C\n    C2[Threat Mitigation] --> C\n    C3[Security Recommendations] --> C\n    C4[Incident Response] --> C\n\n### 🎯 Core Components\n\n  \n    📊\n    Data Collection Layer\n    \n      \n        Transactions/sec\n        50,000+\n      \n      \n        Data Points\n        1M+\n      \n      \n        Real-time\n        24/7\n      \n    \n    \n      🔍 Transaction monitoring\n      📝 Contract interaction tracking\n      🌐 Network state analysis\n      👤 User behavior patterns\n    \n  \n\n  \n    🧠\n    AI Analysis Engine\n    \n      \n        ML Models\n        12+\n      \n      \n        Accuracy\n        99.7%\n      \n      \n        Response\n        &lt;100ms\n      \n    \n    \n      🤖 Machine learning models\n      🔎 Pattern recognition\n      ⚠️ Anomaly detection\n      📊 Risk assessment algorithms\n    \n  \n\n  \n    ⚡\n    Response System\n    \n      \n        Response Time\n        &lt;1s\n      \n      \n        Threat Block\n        99.9%\n      \n      \n        Uptime\n        99.99%\n      \n    \n    \n      🚨 Automated alerts\n      🛡️ Threat mitigation\n      💡 Security recommendations\n      🔧 Incident response\n    \n  \n\n## 🔒 Security Features Dashboard\n\n  \n    \n      Live Security Monitoring\n      \n      \n        \n          🟢\n          \n            2,847\n            Active Monitors\n          \n        \n        \n          🛡️\n          \n            99.9%\n            Threat Detection\n          \n        \n        \n          ⚡\n          \n            47ms\n            Avg Response\n          \n        \n      \n\n      \n        \n          📈\n          \n            Continuous Transaction Analysis\n            Every transaction is analyzed in real-time using advanced ML algorithms\n            ✅ Active\n          \n        \n        \n          🔗\n          \n            Smart Contract Interaction Tracking\n            Monitor all contract calls and detect suspicious patterns\n            ✅ Active\n          \n        \n        \n          🌐\n          \n            Network State Monitoring\n            Track network health and identify potential attack vectors\n            ✅ Active\n          \n        \n        \n          👥\n          \n            User Behavior Analysis\n            Detect unusual user patterns that may indicate compromised accounts\n            ✅ Active\n          \n        \n      \n    \n  \n\n  \n    \n      AI-Powered Threat Detection\n      \n      \n        \n          \n            🔴 High Risk\n            0 Active\n          \n          \n            🦠 Smart contract exploits\n            💰 Large fund movements\n            🎭 Flash loan attacks\n            🔓 Governance attacks\n          \n        \n        \n        \n          \n            🟡 Medium Risk\n            3 Monitoring\n          \n          \n            📊 Unusual trading patterns\n            🔄 Repetitive transactions\n            🎯 MEV attacks\n            📈 Price manipulation\n          \n        \n        \n        \n          \n            🟢 Low Risk\n            12 Normal\n          \n          \n            ⚠️ Minor anomalies\n            🔍 Pattern variations\n            📋 Compliance checks\n            🛡️ Preventive monitoring\n          \n        \n      \n\n      \n        🧠 Detection Algorithms\n        \n          \n            Pattern Recognition\n            99.8% Accuracy\n          \n          \n            Anomaly Detection\n            99.5% Accuracy\n          \n          \n            Risk Scoring\n            99.7% Accuracy\n          \n          \n            Vulnerability Assessment\n            99.3% Accuracy\n          \n        \n      \n    \n  \n\n  \n    \n      Intelligent Response System\n      \n      \n        \n          1\n          \n            🔍 Threat Detection\n            AI identifies potential security threat\n            &lt; 100ms\n          \n        \n        →\n        \n          2\n          \n            📊 Risk Assessment\n            Calculate threat severity and impact\n            &lt; 200ms\n          \n        \n        →\n        \n          3\n          \n            ⚡ Automated Action\n            Execute appropriate response\n            &lt; 500ms\n          \n        \n        →\n        \n          4\n          \n            📢 Alert & Report\n            Notify stakeholders and log incident\n            &lt; 1s\n          \n        \n      \n\n      \n        🛠️ Response Actions\n        \n          \n            🤖 Automatic Actions\n            \n              🚫 Block suspicious transactions\n              🔒 Pause affected contracts\n              📢 Send immediate alerts\n              🛡️ Enable protection mode\n            \n          \n          \n            👤 Manual Review\n            \n              📋 Generate detailed reports\n              🔍 Request human verification\n              📊 Provide recommendation options\n              🔧 Suggest mitigation strategies\n            \n          \n        \n      \n    \n  \n\n## 🔧 Integration Guide\n\n  \n    👩‍💻\n    For Developers\n    \n      \n        Step 1\n        Enable AI Security\n        Add security module to your project configuration\n        \n\nCode example:\n// Enable AI security\naiSecurity.enable({\n  level: 'advanced',\n  monitoring: true\n})\n\n      \n      \n        Step 2\n        Configure Parameters\n        Set security thresholds and response preferences\n        \n          🎚️ Risk tolerance\n          ⚡ Response speed\n          📊 Monitoring depth\n        \n      \n      \n        Step 3\n        Monitor Dashboard\n        Track security metrics and threats in real-time\n        \n          🛡️ 99.9% Protected\n          🔍 0 Threats\n          ⚡ 45ms Response\n        \n      \n      \n        Step 4\n        Review Insights\n        Get AI-powered security recommendations\n        \n          💡 Code optimization suggestions\n          🔒 Security best practices\n          📈 Performance improvements\n        \n      \n    \n  \n\n  \n    👤\n    For Users\n    \n      \n        🔐 Wallet Protection\n        Enable advanced security features in your wallet\n        \n          \n            🛡️ Transaction monitoring\n            ON\n          \n          \n            ⚠️ Risk alerts\n            ON\n          \n          \n            🔍 Contract verification\n            ON\n          \n        \n      \n      \n        ⚙️ Security Preferences\n        Customize your security settings\n        \n          \n            🎚️ Risk tolerance\n            \n              \n            \n            Conservative\n          \n          \n            📢 Alert frequency\n            \n              \n            \n            High\n          \n        \n      \n      \n        📊 Security Monitoring\n        View your personal security dashboard\n        \n          \n            847\n            Transactions Protected\n          \n          \n            0\n            Threats Blocked\n          \n          \n            A+\n            Security Score\n          \n        \n      \n    \n  \n\n  \n    🏆 Security Guarantee\n    Circle Layer's AI security system provides enterprise-grade protection with a 99.9% threat detection rate and sub-second response times. Your assets and smart contracts are protected by the most advanced blockchain security technology available.\n    \n      \n        99.9%\n        Threat Detection\n      \n      \n        &lt;1s\n        Response Time\n      \n      \n        24/7\n        Monitoring\n      \n      \n        $0\n        Lost to Attacks",
    "frontmatter": {
      "id": "how-it-works",
      "title": "How AI Security Works",
      "sidebar_label": "How It Works",
      "sidebar_position": 1,
      "description": "Discover Circle Layer's advanced AI-powered security system that protects your blockchain transactions in real-time."
    },
    "filePath": "ai-security/how-it-works.mdx",
    "category": "ai-security",
    "url": "/ai-security/how-it-works"
  },
  "apis-sdks-index": {
    "id": "apis-sdks-index",
    "title": "APIs & SDKs Overview",
    "content": "# APIs & SDKs Overview\n\nCircle Layer provides comprehensive APIs and SDKs to help developers build and integrate with our blockchain network. This section covers all the tools and endpoints you need for development.\n\n## 🔧 Available APIs\n\n### JSON-RPC API\n- **Endpoint**: `https://rpc-testnet.circlelayer.com`\n- **Purpose**: Core blockchain interactions\n- **Compatibility**: Ethereum JSON-RPC compatible\n- **Use Cases**: Transaction submission, contract deployment, balance queries\n\n### WebSocket API\n- **Endpoint**: `wss://testnet-rpc.circlelayer.com`\n- **Purpose**: Real-time blockchain events\n- **Features**: Block subscriptions, transaction notifications\n- **Use Cases**: Live updates, event monitoring\n\n### GraphQL API (In Development)\n- **Endpoint**: `https://testnet.circlelayer.com/graphiql`\n- **Purpose**: Flexible data queries\n- **Status**: Coming soon with enhanced filtering\n\n## 📚 Web3 Libraries\n\nCircle Layer is fully compatible with popular Web3 libraries:\n\n### Web3.js\n\nCode example:\nconst Web3 = require('web3');\nconst web3 = new Web3('https://rpc-testnet.circlelayer.com');\n\n### Ethers.js\n\nCode example:\nconst { ethers } = require('ethers');\nconst provider = new ethers.providers.JsonRpcProvider('https://rpc-testnet.circlelayer.com');\n\n### Viem\n\nCode example:\n\nconst client = createPublicClient({\n  transport: http('https://rpc-testnet.circlelayer.com')\n});\n\n## 🛠️ Development Tools\n\n### Smart Contract Development\n- **Hardhat**: Full development environment\n- **Truffle**: Development framework\n- **Remix**: Browser-based IDE\n- **Foundry**: Rust-based toolkit\n\n### Testing & Deployment\n- **Local Development**: Use Hardhat or Truffle\n- **Testnet Deployment**: Direct to Circle Layer testnet\n- **Contract Verification**: Via block explorer\n\n## 📖 Quick Start Guides\n\n1. **[RPC Endpoints](./rpc-endpoints)** - Complete API reference\n2. **[Web3 Libraries](./web3-libraries)** - Integration examples\n3. **[Smart Contract Development](../development/writing-smart-contracts)** - Build contracts\n4. **[Web3 Integration](../development/web3-integration)** - Frontend integration\n\n## 🌐 Network Information\n\n- **Chain ID**: 28525\n- **Currency**: CLAYER\n- **Block Time**: 3 seconds\n- **Gas Price**: Minimum 0.000021 CLAYER\n\n## 📊 Development Status\n\n| Service | Status | Readiness |\n|---------|--------|-----------|\n| RPC API | 🟡 Ready for Testing | Infrastructure Complete |\n| WebSocket | 🟡 Ready for Testing | Infrastructure Complete |\n| Block Explorer | 🟡 Ready for Testing | Infrastructure Complete |\n| GraphQL | 🔄 In Development | Coming Soon |\n\n## 🆘 Support\n\nNeed help with API integration?\n\n- 📖 Check our [comprehensive guides](../development/web3-integration)\n- 💬 Join our [Telegram community](https://t.me/circlelayer)\n- 🐛 Report issues on [GitHub](https://github.com/Circle-layer-org/docs)\n\n## Next Steps\n\nReady to start building? Check out our development guides:\n\n- [Writing Smart Contracts](../development/writing-smart-contracts)\n- [Web3 Integration Examples](../development/web3-integration)\n- [RPC API Reference](./rpc-endpoints)",
    "frontmatter": {
      "title": "APIs & SDKs Overview",
      "description": "Complete guide to Circle Layer APIs, SDKs, and developer tools"
    },
    "filePath": "apis-sdks/index.md",
    "category": "apis-sdks",
    "url": "/apis-sdks/index"
  },
  "apis-sdks-rpc-endpoints": {
    "id": "apis-sdks-rpc-endpoints",
    "title": "RPC Endpoints",
    "content": "# RPC Endpoints\n\n## Overview\n\nCircle Layer provides multiple RPC endpoints for interacting with the network:\n\n## Public Endpoints\n\n### Testnet\n\nCode example:\n# HTTP RPC\nhttps://testnet-rpc.circlelayer.com\n\n# WebSocket\nwss://testnet-rpc.circlelayer.com\n\n# Block Explorer\nhttps://explorer-testnet.circlelayer.com\n\n# Faucet\nhttps://faucet.circlelayer.com\n\n# Faucet API\nhttps://faucet-api.circlelayer.com\n\n## Network Configuration\n\n- **Chain ID**: 28525\n- **Network Name**: Circle Layer Testnet\n- **Currency Symbol**: CLAYER\n- **Currency Decimals**: 18\n- **Block Time**: 3 seconds\n- **Transaction Finality**: 1-3 seconds\n\n## Authentication\n\nAPI endpoints use standard authentication methods. For detailed authentication methods, refer to the API documentation.\n\n## Rate Limits\n\nRate limiting information is not currently specified. Please check the API documentation for current limits.\n\n## Smart Contract Examples\n\n### Deployed Example Contract\n- **Contract Address**: 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB\n- **Source Code**: [View on Explorer](https://explorer-testnet.circlelayer.com/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract)\n- **ABI**: [Contract ABI](https://explorer-testnet.circlelayer.com/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract_abi)\n- **Deployment**: Manual Deploy\n\n## Methods\n\n### Standard Ethereum Methods\n- eth_getBalance\n- eth_sendTransaction\n- eth_getTransactionReceipt\n- eth_blockNumber\n\n### Circle Layer Specific Methods\n\n#### Validator & Staking Methods\n- `clayer_getValidatorInfo(validatorAddress)` - Get validator details and performance metrics\n- `clayer_getStakingRewards(delegatorAddress)` - Get staking rewards for a delegator\n- `clayer_getNetworkStats()` - Get current network statistics and performance\n- `clayer_getValidatorList(status)` - Get list of validators by status (active/jailed/unbonding)\n- `clayer_getDelegationInfo(delegatorAddress, validatorAddress)` - Get delegation details\n- `clayer_getSlashingInfo(validatorAddress)` - Get validator slashing history and status\n\n#### Network Governance Methods\n- `clayer_getGovernanceProposals(status)` - Get governance proposals by status\n- `clayer_getVotingPower(address)` - Get voting power for governance\n- `clayer_getParameterInfo(parameter)` - Get current network parameter values\n- `clayer_getUpgradeInfo()` - Get planned network upgrade information\n\n#### DeFi & Bridge Methods\n- `clayer_getBridgeStatus(chainId)` - Get cross-chain bridge status\n- `clayer_getTokenInfo(tokenAddress)` - Get token details for bridged assets\n- `clayer_getLiquidityPools()` - Get available liquidity pools on native DEX\n- `clayer_getPriceFeeds(pair)` - Get price feed data from oracles\n\n#### Security & Compliance Methods\n- `clayer_reportSuspiciousActivity(evidence)` - Report suspicious network activity\n- `clayer_getIntegrityReport(blockRange)` - Get network integrity report for block range\n- `clayer_getComplianceStatus(address)` - Check compliance status of an address\n- `clayer_getAuditLog(address, timeRange)` - Get audit log for address activity\n\n#### Performance & Analytics Methods\n- `clayer_getNetworkMetrics(timeRange)` - Get detailed network performance metrics\n- `clayer_getTxPoolStats()` - Get transaction pool statistics\n- `clayer_getValidatorPerformance(address, timeRange)` - Get validator performance history\n- `clayer_getGasEstimation(txData)` - Get gas estimation for transaction\n\n## Examples\n\n### Basic Ethereum Methods\n\n#### Get Balance\n\nCode example:\nconst response = await fetch('https://testnet-rpc.circlelayer.com', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'eth_getBalance',\n    params: ['0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8', 'latest'],\n    id: 1,\n  }),\n});\n\nconst result = await response.json();\nconsole.log('Balance in wei:', result.result);\n\n#### Get Transaction Receipt\n\nCode example:\nconst response = await fetch('https://testnet-rpc.circlelayer.com', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'eth_getTransactionReceipt',\n    params: ['0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238'],\n    id: 1,\n  }),\n});\n\nconst receipt = await response.json();\nconsole.log('Transaction status:', receipt.result.status);\n\n### Circle Layer Specific Methods\n\n#### Get Validator Information\n\nCode example:\nasync function getValidatorInfo(validatorAddress) {\n  const response = await fetch('https://testnet-rpc.circlelayer.com', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'clayer_getValidatorInfo',\n      params: [validatorAddress],\n      id: 1,\n    }),\n  });\n  \n  const result = await response.json();\n  return result.result;\n}\n\n// Example usage\nconst validatorInfo = await getValidatorInfo('0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8');\nconsole.log('Validator status:', validatorInfo.status);\nconsole.log('Total stake:', validatorInfo.totalStake);\nconsole.log('Commission rate:', validatorInfo.commissionRate);\nconsole.log('Uptime:', validatorInfo.uptime);\n\n#### Get Staking Rewards\n\nCode example:\nasync function getStakingRewards(delegatorAddress) {\n  const response = await fetch('https://testnet-rpc.circlelayer.com', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'clayer_getStakingRewards',\n      params: [delegatorAddress],\n      id: 1,\n    }),\n  });\n  \n  const result = await response.json();\n  return result.result;\n}\n\n// Example usage\nconst rewards = await getStakingRewards('0x123...');\nconsole.log('Pending rewards:', rewards.pendingRewards);\nconsole.log('Total earned:', rewards.totalEarned);\nconsole.log('Validators:', rewards.validatorRewards);\n\n#### Get Network Statistics\n\nCode example:\nasync function getNetworkStats() {\n  const response = await fetch('https://testnet-rpc.circlelayer.com', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'clayer_getNetworkStats',\n      params: [],\n      id: 1,\n    }),\n  });\n  \n  const result = await response.json();\n  return result.result;\n}\n\n// Example usage\nconst stats = await getNetworkStats();\nconsole.log('Current TPS:', stats.currentTPS);\nconsole.log('Active validators:', stats.activeValidators);\nconsole.log('Total staked:', stats.totalStaked);\nconsole.log('Network uptime:', stats.uptime);\n\n### Integrity & Compliance Methods\n\n#### Report Suspicious Activity\n\nCode example:\nasync function reportSuspiciousActivity(evidence) {\n  const response = await fetch('https://testnet-rpc.circlelayer.com', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer YOUR_API_KEY', // Required for security methods\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'clayer_reportSuspiciousActivity',\n      params: [evidence],\n      id: 1,\n    }),\n  });\n  \n  const result = await response.json();\n  return result.result;\n}\n\n// Example usage\nconst evidence = {\n  type: 'double_signing',\n  validatorAddress: '0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8',\n  blockHeight: 1234567,\n  evidence: 'encoded_proof_data',\n  reporterAddress: '0x123...'\n};\n\nconst reportId = await reportSuspiciousActivity(evidence);\nconsole.log('Report submitted with ID:', reportId);\n\n#### Get Integrity Report\n\nCode example:\nasync function getIntegrityReport(startBlock, endBlock) {\n  const response = await fetch('https://testnet-rpc.circlelayer.com', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'clayer_getIntegrityReport',\n      params: [{ start: startBlock, end: endBlock }],\n      id: 1,\n    }),\n  });\n  \n  const result = await response.json();\n  return result.result;\n}\n\n// Example usage\nconst report = await getIntegrityReport(1234500, 1234600);\nconsole.log('Blocks analyzed:', report.blocksAnalyzed);\nconsole.log('Issues found:', report.issuesFound);\nconsole.log('Security score:', report.securityScore);\nconsole.log('Anomalies:', report.anomalies);\n\n#### Check Compliance Status\n\nCode example:\nasync function getComplianceStatus(address) {\n  const response = await fetch('https://testnet-rpc.circlelayer.com', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'clayer_getComplianceStatus',\n      params: [address],\n      id: 1,\n    }),\n  });\n  \n  const result = await response.json();\n  return result.result;\n}\n\n// Example usage\nconst status = await getComplianceStatus('0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8');\nconsole.log('Compliance level:', status.level);\nconsole.log('Risk score:', status.riskScore);\nconsole.log('Flags:', status.flags);\nconsole.log('Last updated:', status.lastUpdated);\n\n## SDK Examples\n\n### Circle Layer JavaScript SDK\n\n#### Installation\n\nCode example:\nnpm install @circlelayer/sdk\n\n#### Basic Setup\n\nCode example:\n\n// Initialize SDK\nconst clayer = new CircleLayerSDK({\n  network: 'testnet', // or 'mainnet'\n  rpcUrl: 'https://testnet-rpc.circlelayer.com',\n  apiKey: 'your-api-key' // Optional for enhanced features\n});\n\n// Connect to network\nawait clayer.connect();\n\n#### Validator Operations\n\nCode example:\n// Get all validators\nconst validators = await clayer.validators.getAll();\n\n// Get specific validator\nconst validator = await clayer.validators.getById('0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8');\n\n// Check validator performance\nconst performance = await clayer.validators.getPerformance(\n  '0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8',\n  { days: 30 }\n);\n\n// Delegate to validator\nconst tx = await clayer.staking.delegate(\n  '0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8', // validator address\n  '1000000000000000000000' // 1000 CLAYER in wei\n);\n\n#### Staking Operations\n\nCode example:\n// Get staking portfolio\nconst portfolio = await clayer.staking.getPortfolio('0x123...');\n\n// Calculate potential rewards\nconst rewards = await clayer.staking.calculateRewards(\n  '0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8', // validator\n  '1000000000000000000000', // amount in wei\n  { days: 365 } // time period\n);\n\n// Claim rewards\nconst claimTx = await clayer.staking.claimRewards('0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8');\n\n// Undelegate\nconst undelegateTx = await clayer.staking.undelegate(\n  '0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8',\n  '500000000000000000000' // 500 CLAYER in wei\n);\n\n#### Bridge Operations\n\nCode example:\n// Check bridge status\nconst bridgeStatus = await clayer.bridge.getStatus('ethereum');\n\n// Get bridge fees\nconst fees = await clayer.bridge.getFees('ethereum', 'USDC');\n\n// Initiate bridge transfer\nconst bridgeTx = await clayer.bridge.transfer({\n  fromChain: 'ethereum',\n  toChain: 'circlelayer',\n  token: 'USDC',\n  amount: '1000000000', // 1000 USDC\n  recipient: '0x123...'\n});\n\n// Track bridge transfer\nconst status = await clayer.bridge.getTransferStatus(bridgeTx.hash);\n\n#### Governance Operations\n\nCode example:\n// Get active proposals\nconst proposals = await clayer.governance.getProposals('active');\n\n// Get voting power\nconst votingPower = await clayer.governance.getVotingPower('0x123...');\n\n// Vote on proposal\nconst voteTx = await clayer.governance.vote(\n  'proposal-123',\n  'yes', // vote option\n  '1000000000000000000000' // voting power to use\n);\n\n// Create proposal (requires minimum voting power)\nconst proposalTx = await clayer.governance.createProposal({\n  title: 'Increase Block Gas Limit',\n  description: 'Proposal to increase block gas limit to improve throughput',\n  changes: [\n    {\n      parameter: 'blockGasLimit',\n      newValue: '15000000000000'\n    }\n  ]\n});\n\n### Python SDK\n\n#### Installation\n\nCode example:\npip install circlelayer-sdk\n\n#### Basic Usage\n\nCode example:\nfrom circlelayer import CircleLayerSDK\n\n# Initialize SDK\nclayer = CircleLayerSDK(\n    network='testnet',\n    rpc_url='https://testnet-rpc.circlelayer.com',\n    api_key='your-api-key'\n)\n\n# Get network stats\nstats = clayer.network.get_stats()\nprint(f\"Current TPS: {stats['currentTPS']}\")\nprint(f\"Active validators: {stats['activeValidators']}\")\n\n# Get validator info\nvalidator = clayer.validators.get_info('0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8')\nprint(f\"Validator status: {validator['status']}\")\nprint(f\"Total stake: {validator['totalStake']}\")\n\n# Check staking rewards\nrewards = clayer.staking.get_rewards('0x123...')\nprint(f\"Pending rewards: {rewards['pendingRewards']}\")\n\n### WebSocket Subscriptions\n\n#### Subscribe to New Blocks\n\nCode example:\nconst ws = new WebSocket('wss://testnet-rpc.circlelayer.com');\n\nws.onopen = () => {\n  // Subscribe to new block headers\n  ws.send(JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'eth_subscribe',\n    params: ['newHeads'],\n    id: 1\n  }));\n};\n\nws.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  if (data.params) {\n    console.log('New block:', data.params.result.number);\n    console.log('Block hash:', data.params.result.hash);\n  }\n};\n\n#### Subscribe to Validator Events\n\nCode example:\nconst ws = new WebSocket('wss://testnet-rpc.circlelayer.com');\n\nws.onopen = () => {\n  // Subscribe to validator status changes\n  ws.send(JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'clayer_subscribe',\n    params: ['validatorEvents', {\n      events: ['jailed', 'unjailed', 'slashed', 'commission_changed']\n    }],\n    id: 1\n  }));\n};\n\nws.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  if (data.params && data.params.subscription === 'validatorEvents') {\n    const event = data.params.result;\n    console.log('Validator event:', event.type);\n    console.log('Validator:', event.validatorAddress);\n    console.log('Details:', event.data);\n  }\n};\n\n#### Subscribe to Staking Events\n\nCode example:\nconst ws = new WebSocket('wss://testnet-rpc.circlelayer.com');\n\nws.onopen = () => {\n  // Subscribe to staking events for specific address\n  ws.send(JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'clayer_subscribe',\n    params: ['stakingEvents', {\n      address: '0x123...',\n      events: ['delegation', 'undelegation', 'rewards_claimed']\n    }],\n    id: 1\n  }));\n};\n\nws.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  if (data.params && data.params.subscription === 'stakingEvents') {\n    const stakingEvent = data.params.result;\n    console.log('Staking event:', stakingEvent.type);\n    console.log('Amount:', stakingEvent.amount);\n    console.log('Validator:', stakingEvent.validator);\n  }\n};\n\n## Advanced Features\n\n### Batch Requests\n\nCode example:\n// Execute multiple RPC calls in a single request\nconst batchRequest = [\n  {\n    jsonrpc: '2.0',\n    method: 'eth_getBalance',\n    params: ['0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8', 'latest'],\n    id: 1\n  },\n  {\n    jsonrpc: '2.0',\n    method: 'clayer_getValidatorInfo',\n    params: ['0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8'],\n    id: 2\n  },\n  {\n    jsonrpc: '2.0',\n    method: 'clayer_getNetworkStats',\n    params: [],\n    id: 3\n  }\n];\n\nconst response = await fetch('https://testnet-rpc.circlelayer.com', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(batchRequest),\n});\n\nconst results = await response.json();\n// results is an array with responses for each request\n\n### Error Handling\n\nCode example:\nasync function makeRPCCall(method, params) {\n  try {\n    const response = await fetch('https://testnet-rpc.circlelayer.com', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        method: method,\n        params: params,\n        id: Date.now()\n      }),\n    });\n\n    const result = await response.json();\n    \n    if (result.error) {\n      throw new Error(`RPC Error ${result.error.code}: ${result.error.message}`);\n    }\n    \n    return result.result;\n  } catch (error) {\n    console.error('RPC call failed:', error);\n    throw error;\n  }\n}\n\n// Example usage with error handling\ntry {\n  const balance = await makeRPCCall('eth_getBalance', ['0x123...', 'latest']);\n  console.log('Balance:', balance);\n} catch (error) {\n  console.error('Failed to get balance:', error.message);\n}\n\n### Rate Limiting & Best Practices\n\nCode example:\nclass CircleLayerRPCClient {\n  constructor(rpcUrl, options = {}) {\n    this.rpcUrl = rpcUrl;\n    this.maxRetries = options.maxRetries || 3;\n    this.retryDelay = options.retryDelay || 1000;\n    this.timeout = options.timeout || 30000;\n  }\n\n  async call(method, params, retryCount = 0) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n      const response = await fetch(this.rpcUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: method,\n          params: params,\n          id: Date.now() + Math.random()\n        }),\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      \n      if (result.error) {\n        // Handle rate limiting\n        if (result.error.code === -32005) { // Rate limit exceeded\n          if (retryCount  setTimeout(resolve, this.retryDelay * (retryCount + 1)));\n            return this.call(method, params, retryCount + 1);\n          }\n        }\n        throw new Error(`RPC Error ${result.error.code}: ${result.error.message}`);\n      }\n      \n      return result.result;\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        throw new Error('Request timeout');\n      }\n      \n      if (retryCount  setTimeout(resolve, this.retryDelay * (retryCount + 1)));\n        return this.call(method, params, retryCount + 1);\n      }\n      \n      throw error;\n    }\n  }\n\n  isRetriableError(error) {\n    // Retry on network errors, timeouts, and server errors\n    return error.message.includes('fetch') || \n           error.message.includes('timeout') || \n           error.message.includes('5');\n  }\n}\n\n// Usage\nconst client = new CircleLayerRPCClient('https://testnet-rpc.circlelayer.com', {\n  maxRetries: 5,\n  retryDelay: 2000,\n  timeout: 30000\n});\n\nconst balance = await client.call('eth_getBalance', ['0x123...', 'latest']);\n\n## Security & Authentication\n\n### API Key Authentication\n\nCode example:\n// For enhanced features that require authentication\nconst response = await fetch('https://testnet-rpc.circlelayer.com', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_API_KEY',\n    'X-Client-Version': '1.0.0'\n  },\n  body: JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'clayer_getComplianceStatus',\n    params: ['0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8'],\n    id: 1,\n  }),\n});\n\n### Signed Requests (for sensitive operations)\n\nCode example:\n\nasync function makeSignedRequest(method, params, privateKey) {\n  const timestamp = Date.now();\n  const nonce = Math.random().toString(36).substring(7);\n  \n  // Create message to sign\n  const message = JSON.stringify({\n    method,\n    params,\n    timestamp,\n    nonce\n  });\n  \n  // Sign the message\n  const wallet = new ethers.Wallet(privateKey);\n  const signature = await wallet.signMessage(message);\n  \n  const response = await fetch('https://testnet-rpc.circlelayer.com', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Signature': signature,\n      'X-Timestamp': timestamp.toString(),\n      'X-Nonce': nonce,\n      'X-Address': wallet.address\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: method,\n      params: params,\n      id: 1,\n    }),\n  });\n  \n  return response.json();\n}\n\n// Example: Report suspicious activity with signed request\nconst evidence = {\n  type: 'double_signing',\n  validatorAddress: '0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8',\n  blockHeight: 1234567,\n  evidence: 'encoded_proof_data'\n};\n\nconst result = await makeSignedRequest(\n  'clayer_reportSuspiciousActivity',\n  [evidence],\n  'your-private-key'\n);\n\n## Resources\n\n### Official Documentation\n- **API Reference**: https://docs.circlelayer.com/api\n- **SDK Documentation**: https://docs.circlelayer.com/sdk\n- **WebSocket API**: https://docs.circlelayer.com/websocket\n\n### Development Tools\n- **RPC Playground**: https://playground.circlelayer.com\n- **API Testing**: Use Postman collection or curl examples\n- **Network Status**: https://status.circlelayer.com\n\n### Community & Support\n- **X (Twitter)**: https://twitter.com/circlelayer\n- **Telegram**: https://t.me/circlelayer\n- **GitHub Issues**: https://github.com/circle-layer-org/rpc-issues\n\n### Rate Limits & Performance\n- **Rate Limit**: 100 requests/minute for free tier\n- **Enhanced Tier**: 1000 requests/minute with API key\n- **WebSocket Connections**: 10 concurrent connections per IP\n- **Batch Requests**: Maximum 10 requests per batch\n\nCode example:\nconst ws = new WebSocket('wss://testnet-rpc.circlelayer.com');\nws.send(JSON.stringify({\n  jsonrpc: '2.0',\n  method: 'eth_subscribe',\n  params: ['newHeads'],\n  id: 1,\n}));\n\n### Interact with Example Contract\n\nCode example:\n// Using the deployed example contract\nconst contractAddress = '0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB';\n\n// Get contract interaction examples\nconst response = await fetch('https://testnet-rpc.circlelayer.com', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'eth_call',\n    params: [{\n      to: contractAddress,\n      data: '0x...' // Method call data\n    }, 'latest'],\n    id: 1,\n  }),\n});",
    "frontmatter": {
      "sidebar_position": 1
    },
    "filePath": "apis-sdks/rpc-endpoints.md",
    "category": "apis-sdks",
    "url": "/apis-sdks/rpc-endpoints"
  },
  "apis-sdks-web3-libraries": {
    "id": "apis-sdks-web3-libraries",
    "title": "Web3 Libraries",
    "content": "# Web3 Libraries\n\n## Overview\n\nCircle Layer supports various Web3 libraries for interacting with the testnet. All standard Ethereum Web3 libraries work with Circle Layer using the same patterns.\n\n## Network Configuration\n\n### Circle Layer Testnet\n- **RPC URL**: https://testnet-rpc.circlelayer.com\n- **WebSocket**: wss://testnet-rpc.circlelayer.com\n- **Chain ID**: 28525\n- **Currency**: CLAYER\n\n## Supported Libraries\n\n### 1. ethers.js\n\nCode example:\n\n// HTTP Provider\nconst provider = new ethers.providers.JsonRpcProvider('https://rpc-testnet.circlelayer.com');\n\n// WebSocket Provider\nconst wsProvider = new ethers.providers.WebSocketProvider('wss://testnet-rpc.circlelayer.com');\n\n// Wallet setup\nconst wallet = new ethers.Wallet(privateKey, provider);\n\n// Check CLAYER balance\nconst balance = await wallet.getBalance();\nconsole.log('Balance:', ethers.utils.formatEther(balance), 'CLAYER');\n\n### 2. web3.js\n\nCode example:\n\n// HTTP Provider\nconst web3 = new Web3('https://rpc-testnet.circlelayer.com');\n\n// WebSocket Provider\nconst webSocketWeb3 = new Web3('wss://testnet-rpc.circlelayer.com');\n\n// Account setup\nconst account = web3.eth.accounts.privateKeyToAccount(privateKey);\nweb3.eth.accounts.wallet.add(account);\n\n// Check CLAYER balance\nconst balance = await web3.eth.getBalance(account.address);\nconsole.log('Balance:', web3.utils.fromWei(balance, 'ether'), 'CLAYER');\n\n### 3. Web3.py\n\nCode example:\nfrom web3 import Web3\n\n# HTTP Provider\nw3 = Web3(Web3.HTTPProvider('https://rpc-testnet.circlelayer.com'))\n\n# Account setup\naccount = w3.eth.account.from_key(private_key)\n\n# Check CLAYER balance\nbalance = w3.eth.get_balance(account.address)\nprint(f'Balance: {w3.from_wei(balance, \"ether\")} CLAYER')\n\n## Circle Layer Specific Features\n\n### Network Information\n\nCode example:\n// Get network information\nconst network = await provider.getNetwork();\nconsole.log('Chain ID:', network.chainId); // 28525\nconsole.log('Name:', network.name);\n\n// Current gas price (in CLAYER)\nconst gasPrice = await provider.getGasPrice();\nconsole.log('Gas Price:', ethers.utils.formatUnits(gasPrice, 'gwei'), 'Gwei');\n\n### Transaction with CLAYER\n\nCode example:\n// Send CLAYER transaction\nconst transaction = {\n  to: '0x...',\n  value: ethers.utils.parseEther('1'), // 1 CLAYER\n  gasPrice: ethers.utils.parseUnits('21', 'gwei'), // 0.000021 CLAYER\n  gasLimit: 21000\n};\n\nconst tx = await wallet.sendTransaction(transaction);\nconst receipt = await tx.wait();\nconsole.log('Transaction confirmed:', receipt.transactionHash);\n\n### Smart Contract Interaction\n\nCode example:\n// Example contract interaction\nconst contractAddress = '0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB';\nconst contract = new ethers.Contract(contractAddress, abi, wallet);\n\n// Call contract method\nconst result = await contract.someMethod();\n\n// Send transaction to contract (using CLAYER for gas)\nconst tx = await contract.someWriteMethod(params, {\n  gasPrice: ethers.utils.parseUnits('21', 'gwei'), // CLAYER gas price\n  gasLimit: 100000\n});\n\n## Best Practices\n\n### 1. Network Configuration\n\nCode example:\n// Always verify network\nconst network = await provider.getNetwork();\nif (network.chainId !== 28525) {\n  throw new Error('Please connect to Circle Layer Testnet');\n}\n\n### 2. Gas Management\n\nCode example:\n// Use appropriate gas settings for Circle Layer\nconst gasPrice = ethers.utils.parseUnits('21', 'gwei'); // 0.000021 CLAYER\nconst gasLimit = await contract.estimateGas.methodName(params);\n\n### 3. Error Handling\n\nCode example:\ntry {\n  const tx = await contract.someMethod(params);\n  const receipt = await tx.wait();\n} catch (error) {\n  if (error.code === 'INSUFFICIENT_FUNDS') {\n    console.error('Insufficient CLAYER balance');\n  } else {\n    console.error('Transaction failed:', error.message);\n  }\n}\n\n### 4. Environment Setup\n\nCode example:\n// Use environment variables\nconst provider = new ethers.providers.JsonRpcProvider(\n  process.env.CIRCLE_LAYER_RPC || 'https://rpc-testnet.circlelayer.com'\n);\n\n## Integration Examples\n\n### React Integration\n\nCode example:\n\nfunction useCircleLayer() {\n  const [provider, setProvider] = useState(null);\n  const [balance, setBalance] = useState('0');\n\n  useEffect(() => {\n    const initProvider = async () => {\n      if (window.ethereum) {\n        const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(web3Provider);\n        \n        // Add Circle Layer Testnet to MetaMask if needed\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: '0x6F75', // 28525 in hex\n            chainName: 'Circle Layer Testnet',\n            nativeCurrency: {\n              name: 'CLAYER',\n              symbol: 'CLAYER',\n              decimals: 18\n            },\n            rpcUrls: ['https://rpc-testnet.circlelayer.com'],\n            blockExplorerUrls: ['https://explorer-testnet.circlelayer.com/']\n          }]\n        });\n      }\n    };\n    \n    initProvider();\n  }, []);\n\n  return { provider, balance };\n}\n\n### Node.js Backend\n\nCode example:\nconst { ethers } = require('ethers');\n\nclass CircleLayerService {\n  constructor() {\n    this.provider = new ethers.providers.JsonRpcProvider('https://rpc-testnet.circlelayer.com');\n    this.wallet = new ethers.Wallet(process.env.PRIVATE_KEY, this.provider);\n  }\n\n  async sendCLAYER(to, amount) {\n    const tx = await this.wallet.sendTransaction({\n      to,\n      value: ethers.utils.parseEther(amount),\n      gasPrice: ethers.utils.parseUnits('21', 'gwei')\n    });\n    \n    return await tx.wait();\n  }\n}\n\n## Resources\n\n### Example Contract\n- **Address**: 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB\n- **Explorer**: [View Contract](https://testnet.circlelayer.com/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract)\n- **ABI**: [Contract ABI](https://testnet.circlelayer.com/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract_abi)\n\n### Additional Guides\n- [Web3 Integration Guide](/development/web3-integration)\n- [Contract Deployment](/development/deploying-contracts)\n- [Network Setup](/getting-started/connect-testnet)",
    "frontmatter": {
      "sidebar_position": 2
    },
    "filePath": "apis-sdks/web3-libraries.md",
    "category": "apis-sdks",
    "url": "/apis-sdks/web3-libraries"
  },
  "architecture-evm-compatibility": {
    "id": "architecture-evm-compatibility",
    "title": "EVM Compatibility",
    "content": "# EVM Compatibility\n\nCircle Layer maintains full compatibility with the Ethereum Virtual Machine (EVM), allowing developers to seamlessly migrate existing applications or build new ones using familiar tools and patterns.\n\n## Current EVM Implementation\n\n### Full Compatibility Features\n- **Bytecode Compatibility**: 100% compatible with Ethereum bytecode\n- **Same Opcodes**: Identical instruction set as Ethereum\n- **Gas Model**: Standard Ethereum gas calculation (gas price × gas amount)\n- **Integration Patterns**: Same as other EVM blockchains\n\n### Circle Layer Testnet Specifics\n- **Network**: Circle Layer Testnet (Chain ID: 28525)\n- **Currency**: CLAYER tokens for gas fees\n- **Gas Pricing**: Minimum 0.000021 CLAYER\n- **Block Gas Limit**: 10,000,000,000,000 per block\n\n## Development Benefits\n\n### Familiar Environment\n- **Reuse Existing Contracts**: Deploy without modifications\n- **Same Development Tools**: Hardhat, Truffle, Remix work identically\n- **Standard Libraries**: Web3.js, Ethers.js work without changes\n- **Wallet Integration**: MetaMask and other EVM wallets compatible\n\n### Proven Security Model\n- **Standard EVM Security**: Established security patterns\n- **DPoS Consensus**: Enhanced with Delegated Proof of Stake\n- **Testing Environment**: Full testnet for comprehensive testing\n\n## Migration Guide\n\n### From Ethereum\n1. **Change Network Configuration**\n   \nCode example:\n   // Update RPC endpoint\n   const provider = new ethers.providers.JsonRpcProvider('https://rpc-testnet.circlelayer.com');\n   \n   // Update network configuration\n   {\n     chainId: 28525,\n     name: 'Circle Layer Testnet',\n     currency: 'CLAYER',\n     rpcUrl: 'https://rpc-testnet.circlelayer.com'\n   }\n   \n\n2. **Get Test Tokens**\n   - Visit faucet: https://faucet.circlelayer.com\n   - Request 1 CLAYER per day for testing\n\n3. **Deploy Contracts**\n   - Use same deployment scripts\n   - Configure gas price for CLAYER\n   - Verify on Circle Layer explorer\n\n4. **Test Integration**\n   - Test with CLAYER for gas fees\n   - Verify wallet connectivity\n   - Check transaction finality (1-3 seconds)\n\n### From Other EVM Chains\nMigration from Polygon, BSC, or other EVM chains follows the same pattern:\n- Update RPC endpoint\n- Configure for CLAYER gas token\n- Test on Circle Layer testnet\n\n## Practical Examples\n\n### Hardhat Configuration\n\nCode example:\nmodule.exports = {\n  networks: {\n    circleLayerTestnet: {\n      url: \"https://rpc-testnet.circlelayer.com\",\n      chainId: 28525,\n      accounts: [process.env.PRIVATE_KEY],\n      gasPrice: 21000000000, // 0.000021 CLAYER\n    }\n  }\n};\n\n### Web3.js Integration\n\nCode example:\nconst Web3 = require('web3');\nconst web3 = new Web3('https://rpc-testnet.circlelayer.com');\n\n// Same API as Ethereum\nconst balance = await web3.eth.getBalance(address);\nconst gasPrice = await web3.eth.getGasPrice();\n\n### MetaMask Setup\n\nCode example:\n// Add Circle Layer Testnet to MetaMask\nawait window.ethereum.request({\n  method: 'wallet_addEthereumChain',\n  params: [{\n    chainId: '0x6F75', // 28525 in hex\n    chainName: 'Circle Layer Testnet',\n    nativeCurrency: {\n      name: 'CLAYER',\n      symbol: 'CLAYER',\n      decimals: 18\n    },\n    rpcUrls: ['https://rpc-testnet.circlelayer.com'],\n    blockExplorerUrls: ['https://explorer-testnet.circlelayer.com/']\n  }]\n});\n\n## Performance Benefits\n\n### Circle Layer Advantages\n- **Faster Finality**: 1-3 seconds vs Ethereum's 6-10 minutes\n- **Lower Gas Costs**: Affordable testing with CLAYER\n- **Consistent Block Time**: 3-second intervals\n- **High Uptime**: 99.95% network availability\n\n### Development Experience\n- **Same Tools**: No learning curve for Ethereum developers\n- **Quick Testing**: Fast block times for rapid iteration\n- **Cost Effective**: Free testnet tokens via faucet\n- **Standard Patterns**: Familiar development workflows\n\n## Resources\n\n### Example Implementation\n- **Reference Contract**: 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB\n- **Source Code**: [View on Explorer](https://testnet.circlelayer.com/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract)\n- **ABI**: [Contract ABI](https://testnet.circlelayer.com/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract_abi)\n\n### Integration Guides\n- [Smart Contract Development](/development/writing-smart-contracts)\n- [Contract Deployment](/development/deploying-contracts)\n- [Web3 Integration](/development/web3-integration)\n- [Wallet Setup](/getting-started/set-up-wallet)",
    "frontmatter": {
      "id": "evm-compatibility",
      "title": "EVM Compatibility",
      "sidebar_label": "EVM Compatibility"
    },
    "filePath": "architecture/evm-compatibility.md",
    "category": "architecture",
    "url": "/architecture/evm-compatibility"
  },
  "architecture-high-tps": {
    "id": "architecture-high-tps",
    "title": "Performance Architecture",
    "content": "# Performance Architecture\n\nLearn about Circle Layer's current performance capabilities and the architecture that enables fast, reliable transaction processing.\n\n## Current Testnet Performance\n\n### Target Network Metrics\n- **Block Time**: 3 seconds (actual performance)\n- **Transaction Finality**: 1-3 seconds (actual performance)\n- **Network Uptime**: 99.95% (Last 30 days)\n- **Consensus**: Delegated Proof of Stake (DPoS)\n\n### Network Configuration\n- **Chain ID**: 28525\n- **Gas Price**: Minimum 0.000021 CLAYER\n- **Block Gas Limit**: 10,000,000,000,000 per block\n- **Energy Efficiency**: 99.9% less than Proof of Work\n\n## Technical Implementation\n\n### DPoS Consensus Architecture\n- **Validator Network**: Minimum 5 active validators required\n- **Staking Requirements**: 100,000 CLAYER minimum\n- **Block Production**: Consistent 3-second intervals\n- **Finality**: Fast confirmation through DPoS mechanism\n\n### Network Infrastructure\n- **RPC Endpoint**: https://testnet-rpc.circlelayer.com\n- **WebSocket**: wss://testnet-rpc.circlelayer.com\n- **Multiple Ports**: 32668, 32669, 8545, 6060, 80, 22\n- **Geographic Distribution**: Support for multiple RPC endpoints\n\n### Performance Optimizations\n- **Efficient Block Propagation**: 3-second consistent timing\n- **Resource Optimization**: Modest hardware requirements\n- **Network Topology**: Optimized for low latency\n- **Gas Efficiency**: Predictable CLAYER-based fees\n\n## Current Use Cases\n\n### Development & Testing\n- **Smart Contract Testing**: Fast iteration with 3-second blocks\n- **dApp Development**: Quick feedback loops\n- **Integration Testing**: Real-time transaction confirmation\n- **Gas Optimization**: Cost-effective testing environment\n\n### Target Applications\n- **DeFi Protocols**: Fast transaction settlement\n- **Token Development**: Quick deployment and testing\n- **Wallet Integration**: Seamless user experience\n- **Cross-chain Testing**: Bridge and oracle preparation\n\n## Performance Comparison\n\n### Block Time Comparison\n| Network | Block Time | Finality |\n|---------|------------|----------|\n| Circle Layer Testnet | 3s | 1-3s |\n| Ethereum | 12s | 6-10min |\n| Polygon | 2s | 2-3s |\n| BSC | 3s | 3s |\n\n  \n    Block Time Comparison\n  \n  \n  \n    \n      Circle Layer Testnet\n      Our Network\n    \n    \n      \n        Block Time\n        3s\n      \n      \n        Finality\n        1-3s\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Block Time\n        12s\n      \n      \n        Finality\n        6-10min\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Block Time\n        2s\n      \n      \n        Finality\n        2-3s\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Block Time\n        3s\n      \n      \n        Finality\n        3s\n      \n    \n  \n\n### Network Reliability\n- **Consistent Performance**: 99.95% uptime\n- **Predictable Gas Costs**: Stable CLAYER pricing\n- **Fast Confirmation**: 1-3 second finality\n- **Validator Network**: Distributed consensus\n\n## 🚧 Future Performance Enhancements\n\n### In Development\n- **Enhanced Consensus**: Advanced DPoS optimizations\n- **Monitoring Systems**: Real-time performance tracking\n- **Network Analytics**: Comprehensive performance metrics\n- **Scaling Solutions**: Preparation for higher throughput\n\n### Planned Improvements\n- **TPS Optimization**: Enhanced transaction processing\n- **Latency Reduction**: Further consensus improvements\n- **Capacity Scaling**: Infrastructure expansion\n- **Cross-chain Performance**: Bridge optimization\n\n## Real-World Applications\n\n### Testnet Use Cases\n- **Development Testing**: 99.95% reliable environment\n- **Performance Benchmarking**: Consistent 3-second blocks\n- **Integration Validation**: Fast confirmation times\n- **User Experience Testing**: Real-time responsiveness\n\n### Production Readiness\n- **Proven Stability**: Months of consistent operation\n- **Scalable Architecture**: Validator network growth\n- **Performance Monitoring**: Continuous optimization\n- **Community Testing**: Real-world validation\n\n## Developer Benefits\n\n### Fast Development Cycle\n- **Quick Deployment**: 3-second confirmation\n- **Rapid Testing**: Fast iteration cycles\n- **Real-time Feedback**: Immediate transaction results\n- **Cost-effective**: Affordable CLAYER gas fees\n\n### Integration Advantages\n- **Standard EVM**: Familiar performance patterns\n- **Predictable Timing**: Consistent block intervals\n- **Reliable Network**: High uptime guarantees\n- **Multiple Endpoints**: Redundant connectivity\n\nFor detailed integration guides, see:\n- [Network Configuration](/getting-started/connect-testnet)\n- [Performance Monitoring](/nodes-validation/node-monitoring)\n- [Development Setup](/development/deploying-contracts)",
    "frontmatter": {
      "id": "high-tps",
      "title": "Performance Architecture",
      "sidebar_label": "Performance Architecture"
    },
    "filePath": "architecture/high-tps.md",
    "category": "architecture",
    "url": "/architecture/high-tps"
  },
  "architecture-pos-consensus": {
    "id": "architecture-pos-consensus",
    "title": "POS Consensus Mechanism",
    "content": "🌱 Energy Efficient\n  Proof of Stake Consensus Mechanism\n  \n    Circle Layer implements a cutting-edge Delegated Proof of Stake (DPoS) consensus mechanism that ensures network security, energy efficiency, and fast finality while maintaining true decentralization.\n  \n  \n  \n    \n      99.9%\n      Less Energy\n    \n    \n      1-3s\n      Finality\n    \n    \n      32\n      Min Stake (Testnet)\n    \n  \n\n  \n    \n  \n\n## 🌐 Consensus Overview\n\nCode example:\ngraph TB\n    A[🗳️ Validator Selection] --> B[📦 Block Production]\n    B --> C[✅ Consensus Process]\n    C --> D[🎁 Reward Distribution]\n    D --> A\n    \n    E[👥 Delegators] --> A\n    F[💰 Stake Pool] --> A\n    G[🔄 Rotation Timer] --> A\n    \n    B --> H[📋 Transaction Validation]\n    B --> I[🔗 Block Assembly]\n    \n    C --> J[🔐 Byzantine Fault Tolerance]\n    C --> K[⚡ Fast Finality]\n    \n    D --> L[💎 Validator Rewards]\n    D --> M[🏆 Delegator Rewards]\n\n### 🔥 Key Benefits\n\n  \n    🌱\n    Energy Efficiency\n    \n      99.9%\n      Less Energy\n    \n    Consumes 99.9% less energy compared to Proof of Work consensus mechanisms\n    \n      \n        PoW\n        \n        100 TWh/year\n      \n      \n        PoS\n        \n        0.1 TWh/year\n      \n    \n  \n\n  \n    🛡️\n    Enhanced Security\n    \n      67%+\n      Attack Threshold\n    \n    Economic security through stake-based validation and slashing conditions\n    \n      🔒 Cryptographic Signatures\n      ⚔️ Slashing Penalties\n      🎯 Stake Requirements\n      🔄 Validator Rotation\n    \n  \n\n  \n    ⚡\n    Faster Finality\n    \n      1-3s\n      Finality Time\n    \n    Achieve transaction finality in seconds, not minutes or hours\n          \n        \n          Circle Layer\n          1-3s\n        \n      \n        Ethereum\n        12-19s\n      \n      \n        Bitcoin\n        60min+\n      \n    \n  \n\n  \n    🌐\n    True Decentralization\n    \n      1000+\n      Validators\n    \n    Low barriers to entry reduce centralization risks and promote participation\n    \n      \n        32 CLAYER\n        Min Stake\n      \n      \n        24/7\n        Uptime Req.\n      \n      \n        0%\n        Hardware Cost\n      \n    \n  \n\n## 🔄 How Consensus Works\n\n  \n    \n      Validator Selection Process\n      \n      \n        \n          💰\n          \n            Stake Requirement\n            Validators must stake a minimum of 32 CLAYER tokens (testnet) or 100,000 CLAYER tokens (mainnet) to participate in consensus\n            \n              \n                Testnet Min Stake:\n                32 CLAYER\n              \n              \n                Mainnet Min Stake:\n                100,000 CLAYER\n              \n              \n                Lock Period:\n                7 days\n              \n            \n          \n        \n\n        \n          🎲\n          \n            Random Selection\n            Validators are chosen using verifiable random function (VRF) weighted by stake amount\n            \n              \n                Selection Probability\n                P = (Validator_Stake / Total_Stake) × Randomness_Factor\n              \n            \n          \n        \n\n        \n          ⏰\n          \n            Time Slots\n            Selected validators are assigned specific time slots for block production\n            \n              \n                Slot 1\n                Validator A\n              \n              \n                Slot 2\n                Validator B\n              \n              \n                Slot 3\n                Validator C\n              \n            \n          \n        \n      \n\n      \n        Current Validator Network\n        \n          \n            127\n            Active Validators\n            +12 this week\n          \n          \n            15,423\n            Total Staked CLAYER\n            +892 this week\n          \n          \n            99.95%\n            Network Uptime\n            Excellent\n          \n          \n            2.1s\n            Avg Block Time\n            Consistent\n          \n        \n      \n    \n  \n\n  \n    \n      Block Production Workflow\n      \n      \n        \n          1\n          \n            Transaction Collection\n            Validator collects pending transactions from mempool\n            \n              📋 2,847 pending transactions\n              ⏱️ 0.2s collection time\n            \n          \n        \n\n        \n          2\n          \n            Transaction Validation\n            Verify signatures, balances, and smart contract execution\n            \n              \n                ✅ Signature Valid\n                2,834 txns\n              \n              \n                ❌ Invalid\n                13 txns\n              \n            \n          \n        \n\n        \n          3\n          \n            Block Assembly\n            Package validated transactions into a new block\n            \n              \n                Block #1,234,567\n                2,834 transactions\n                1.2 MB size\n              \n            \n          \n        \n\n        \n          4\n          \n            Block Proposal\n            Broadcast block to network for validation\n            \n              📡 Broadcasted to 127 validators\n              🔍 Awaiting consensus\n            \n          \n        \n      \n\n      \n        Production Performance\n        \n          \n            \n              Block Production Rate\n              Excellent\n            \n            \n              \n            \n            \n              98% successful blocks\n              2.1s avg time\n            \n          \n\n          \n            \n              Transaction Throughput\n              High\n            \n            \n              \n            \n            \n              3,247 TPS\n              85% capacity\n            \n          \n\n          \n            \n              Network Latency\n              Low\n            \n            \n              \n            \n            \n              47ms avg\n              Global network\n            \n          \n        \n      \n    \n  \n\n  \n    \n      Byzantine Fault Tolerance\n      \n      \n        \n          \n            \n              🟢\n              Honest\n            \n            \n              🟢\n              Honest\n            \n            \n              🟢\n              Honest\n            \n            \n              🟢\n              Honest\n            \n            \n              🔴\n              Byzantine\n            \n          \n          \n            Consensus Achieved ✅\n            4/5 honest validators (80%) > 2/3 threshold (67%)\n          \n        \n      \n\n      \n        Three-Phase Consensus\n        \n          \n            📝\n            1. Propose\n            Selected validator proposes a new block\n            \n              ⏱️ Duration: 0.5s\n              🎯 Success Rate: 99.95%\n            \n          \n\n          \n            🗳️\n            2. Prevote\n            Validators vote on the proposed block\n            \n              ⏱️ Duration: 0.7s\n              🎯 Threshold: 67%+\n            \n          \n\n          \n            ✅\n            3. Precommit\n            Final commitment to add block to chain\n            \n              ⏱️ Duration: 0.8s\n              🎯 Finality: Immediate\n            \n          \n        \n      \n\n      \n        Safety Guarantees\n        \n          \n            🔒\n            \n              Fork Prevention\n              Two valid blocks cannot be finalized at the same height\n            \n          \n          \n            🎯\n            \n              Liveness Guarantee\n              Network continues to make progress even with up to 33% faulty validators\n            \n          \n          \n            ⚔️\n            \n              Slashing Conditions\n              Validators lose stake for double-signing or other malicious behavior\n            \n          \n        \n      \n    \n  \n\n  \n    \n      Staking Rewards & Economics\n      \n      \n\n      \n        📊 Reward Distribution & Revenue Sharing\n        \n          \n            \n              👥 Validators\n              30%\n            \n            \n              \n            \n            \n              For block production and validation\n            \n          \n\n          \n            \n              🤝 Delegators\n              45%\n            \n            \n              \n            \n            \n              Shared with token delegators\n            \n          \n\n          \n            \n              🔥 Burn\n              25%\n            \n            \n              \n            \n            \n              Burned (stops at 1M CLAYER threshold)\n            \n          \n        \n\n        \n          💰 Revenue Sharing Breakdown\n          \n            \n              🔥 Transaction Fees\n              \n                Validators: 30% of transaction fees\n                Delegators: 45% of transaction fees\n                Burn Mechanism: 25% (max 1M CLAYER threshold)\n                Expected Fee Revenue: $50K-500K daily at peak usage\n              \n            \n            \n              🎁 Block Rewards\n              \n                Base Block Reward: 2 CLAYER per block\n                Uptime Bonus: +20% for 99%+ uptime\n                Performance Bonus: +15% for top 25% validators\n                Expected Block Revenue: 8,640-12,000 CLAYER daily\n              \n            \n            \n              📈 Delegation Commission\n              \n                Validator Commission: 5-15% from delegator rewards\n                Competitive Commission Range: Market-driven rates\n                Expected Delegation Revenue: 2-8% annual from delegated stake\n                Total Delegated Value: $500K-5M per validator at scale\n              \n            \n          \n\n          \n            💎 Expected Validator Revenue (Annual)\n            \n              \n                🟢 Conservative (Low Network Usage)\n                \n                  Block Rewards:\n                  12,000-18,000 CLAYER\n                \n                \n                  Transaction Fees:\n                  5,000-15,000 CLAYER\n                \n                \n                  Delegation Commission:\n                  8,000-25,000 CLAYER\n                \n                \n                  Total Annual Revenue:\n                  25,000-58,000 CLAYER\n                \n                \n                  USD Equivalent:\n                  $25K-58K (at $1/CLAYER)\n                \n              \n\n              \n                🟡 Moderate (Medium Network Usage)\n                \n                  Block Rewards:\n                  18,000-28,000 CLAYER\n                \n                \n                  Transaction Fees:\n                  25,000-75,000 CLAYER\n                \n                \n                  Delegation Commission:\n                  40,000-120,000 CLAYER\n                \n                \n                  Total Annual Revenue:\n                  83,000-223,000 CLAYER\n                \n                \n                  USD Equivalent:\n                  $83K-223K (at $1/CLAYER)\n                \n              \n\n              \n                🔴 Optimistic (High Network Usage)\n                \n                  Block Rewards:\n                  28,000-42,000 CLAYER\n                \n                \n                  Transaction Fees:\n                  100,000-500,000 CLAYER\n                \n                \n                  Delegation Commission:\n                  200,000-800,000 CLAYER\n                \n                \n                  Total Annual Revenue:\n                  328,000-1,342,000 CLAYER\n                \n                \n                  USD Equivalent:\n                  $328K-1.34M (at $1/CLAYER)\n                \n              \n            \n          \n\n          \n            📊 Revenue Factors\n            \n              \n                🔥 Network Activity\n                Higher transaction volume = more fee revenue\n              \n              \n                ⚡ Validator Performance\n                Better uptime and performance = bonus rewards\n              \n              \n                🤝 Delegation Amount\n                More delegated stake = higher commission earnings\n              \n              \n                💰 Token Price\n                CLAYER price appreciation increases USD value\n              \n            \n          \n        \n      \n\n      \n        🎯 Staking Options\n        \n          \n            \n              👑\n              Run Validator\n            \n            \n              \n                Min Stake:\n                100,000 CLAYER\n              \n              \n                Hardware:\n                Cloud/VPS\n              \n              \n                Uptime:\n                99%+\n              \n              \n                Reward Rate:\n                15-20% APY\n              \n            \n            Start Validating\n          \n\n          \n            \n              🤝\n              Delegate Stake\n            \n            \n              \n                Min Stake:\n                32 CLAYER\n              \n              \n                Hardware:\n                None\n              \n              \n                Maintenance:\n                None\n              \n              \n                Reward Rate:\n                10-15% APY\n              \n            \n            Delegate Now\n          \n\n          \n            \n              🏊\n              Staking Pools\n            \n            \n              \n                Min Stake:\n                0.1 CLAYER\n              \n              \n                Liquidity:\n                High\n              \n              \n                Risk:\n                Low\n              \n              \n                Reward Rate:\n                8-12% APY\n              \n            \n            Join Pool\n          \n        \n      \n    \n  \n\n## 🛡️ Security Features\n\n  \n    \n      ⚔️\n      Slashing Conditions\n    \n    \n      Validators face economic penalties for malicious behavior\n      \n        \n          Double Signing\n          5% Stake\n        \n        \n          Nothing at Stake\n          2% Stake\n        \n        \n          Long Range Attack\n          100% Stake\n        \n        \n          Extended Downtime\n          1% Stake\n        \n        \n          Invalid Proposals\n          0.5% Stake\n        \n      \n    \n  \n\n  \n    \n      🔄\n      Validator Rotation\n    \n    \n      Regular rotation prevents centralization and censorship\n      \n        \n          Rotation Period\n          24 hours\n        \n        \n          Selection Method\n          VRF + Stake\n        \n        \n          Max Consecutive\n          3 blocks\n        \n      \n    \n  \n\n  \n    \n      🎯\n      Stake Delegation\n    \n    \n      Token holders can delegate stake without giving up custody\n      \n        ✅ Non-custodial\n        ✅ Liquid staking\n        ✅ Governance rights\n        ✅ Flexible unbonding\n      \n    \n  \n\n  \n    \n      🎁\n      Participation Incentives\n    \n    \n      Rewards encourage honest participation and network growth\n      \n        \n          Block Rewards\n          2 CLAYER/block\n        \n        \n          Transaction Fees\n          Variable\n        \n        \n          Uptime Bonus\n          +20%\n        \n      \n    \n  \n\n## 🛡️ DPoS Punishment System\n\n### Comprehensive Slashing Conditions\n\nCircle Layer implements a sophisticated punishment system to maintain network integrity and security:\n\n  \n    💀 Critical Violations (Severe Penalties)\n    \n      \n        \n          Double Signing Attack\n          5% Stake Slashed\n        \n        \n          Validator signs two conflicting blocks at the same height\n          \n            ⏱️ Detection: Immediate\n            🔒 Jail Time: 30 days\n            💰 Recovery: Requires re-staking\n          \n        \n      \n\n      \n        \n          Long Range Attack\n          100% Stake Slashed\n        \n        \n          Attempting to reorganize the blockchain from an old state\n          \n            ⏱️ Detection: 24-48 hours\n            🔒 Jail Time: Permanent\n            💰 Recovery: Not possible\n          \n        \n      \n\n      \n        \n          Nothing at Stake\n          2% Stake Slashed\n        \n        \n          Validator participates in multiple competing chains simultaneously\n          \n            ⏱️ Detection: 6-12 hours\n            🔒 Jail Time: 14 days\n            💰 Recovery: Partial re-staking\n          \n        \n      \n    \n  \n\n  \n    ⚠️ Performance Violations (Moderate Penalties)\n    \n      \n        \n          Extended Downtime\n          1% Stake Slashed\n        \n        \n          Validator offline for more than 12 consecutive hours\n          \n            ⏱️ Detection: 12 hours\n            🔒 Jail Time: 7 days\n            💰 Recovery: Automatic after jail\n          \n        \n      \n\n      \n        \n          Invalid Block Proposals\n          0.5% Stake Slashed\n        \n        \n          Proposing blocks with invalid transactions or format\n          \n            ⏱️ Detection: Immediate\n            🔒 Jail Time: 3 days\n            💰 Recovery: Automatic after jail\n          \n        \n      \n\n      \n        \n          Repeated Missed Proposals\n          0.1% per incident\n        \n        \n          Missing 5+ consecutive block proposal opportunities\n          \n            ⏱️ Detection: 15 minutes\n            🔒 Jail Time: 24 hours\n            💰 Recovery: Warning system\n          \n        \n      \n    \n  \n\n### System Contracts for Validator Management\n\nCircle Layer uses a comprehensive system of smart contracts to manage validator operations:\n\n  \n    🏛️ Core Validator Contracts\n    \n    \n      \n        ValidatorRegistry Contract\n        Active\n      \n      \n        \n          Registration Functions\n          \n            registerValidator() - Register new validator with minimum stake\n            updateValidatorInfo() - Update validator metadata and commission\n            deactivateValidator() - Voluntarily exit from validator set\n          \n        \n        \n          Status Management\n          \n            getValidatorStatus() - Query current validator state\n            isValidatorActive() - Check if validator is in active set\n            getValidatorMetrics() - Performance and uptime data\n          \n        \n      \n    \n\n    \n      \n        StakingManager Contract\n        Active\n      \n      \n        \n          Staking Operations\n          \n            stakeTokens(validatorAddress, amount) - Delegate stake to validator\n            unstakeTokens(validatorAddress, amount) - Initiate unstaking process\n            restakeRewards(validatorAddress) - Compound staking rewards\n          \n        \n        \n          Reward Distribution\n          \n            claimRewards(validatorAddress) - Claim accumulated rewards\n            distributeRewards() - Automated reward distribution\n            calculateRewards(address) - Preview pending rewards\n          \n        \n      \n    \n\n    \n      \n        SlashingManager Contract\n        Active\n      \n      \n        \n          Slashing Operations\n          \n            slashValidator(validator, evidence, penalty) - Execute slashing\n            jailValidator(validator, duration) - Jail validator temporarily\n            submitEvidence(evidence) - Submit slashing evidence\n          \n        \n        \n          Recovery Functions\n          \n            unjailValidator(validator) - Release from jail after term\n            appealSlashing(validator, appeal) - Appeal slashing decision\n            getSlashingHistory(validator) - Query slashing record\n          \n        \n      \n    \n  \n\n  \n    ⚖️ Governance & Dispute Contracts\n    \n    \n      \n        DisputeResolution Contract\n        Development\n      \n      \n        Handles appeals and disputes related to validator slashing and punishment decisions.\n        \n          📋 Evidence submission\n          🗳️ Community voting\n          ⚖️ Arbitration system\n          💰 Appeal bonds\n        \n      \n    \n\n    \n      \n        ParameterGovernance Contract\n        Development\n      \n      \n        Manages changes to staking parameters, slashing conditions, and network settings.\n        \n          🎛️ Parameter updates\n          ⏰ Time-locked changes\n          🔐 Multi-sig approval\n          📊 Impact analysis\n        \n      \n    \n  \n\n### Detailed Staking & Unstaking Mechanics\n\n  \n    🔐 Staking Process\n    \n    \n      \n        1\n        \n          Stake Preparation\n          \n            Minimum stake: 32 CLAYER (testnet) / 100,000 CLAYER (mainnet)\n            Wallet balance verification\n            Gas fee preparation (≈0.01 CLAYER for staking transaction)\n            Validator selection and due diligence\n          \n          ⏱️ Duration: Immediate\n        \n      \n\n      \n        2\n        \n          Transaction Execution\n          \n            Call stakeTokens(validatorAddress, amount)\n            Tokens transferred to staking contract\n            Staking record created with timestamp\n            Validator delegation pool updated\n          \n          ⏱️ Duration: 3-9 seconds (1-3 blocks)\n        \n      \n\n      \n        3\n        \n          Activation Period\n          \n            Staking amount enters \"pending\" state\n            Becomes active in next epoch (≈24 hours)\n            Starts earning rewards after activation\n            Delegation shows in validator's total stake\n          \n          ⏱️ Duration: Up to 24 hours\n        \n      \n\n      \n        4\n        \n          Active Staking\n          \n            Rewards accrue automatically per block\n            Can claim rewards without unstaking\n            Voting power proportional to stake\n            Subject to slashing if validator misbehaves\n          \n          ⏱️ Duration: Ongoing\n        \n      \n    \n  \n\n  \n    🔓 Unstaking Process\n    \n    \n      \n        1\n        \n          Unstaking Initiation\n          \n            Call unstakeTokens(validatorAddress, amount)\n            Specify amount to unstake (minimum 1 CLAYER)\n            Tokens enter \"unbonding\" state immediately\n            Stop earning rewards from this block\n          \n          ⏱️ Duration: 3-9 seconds (1-3 blocks)\n        \n      \n\n      \n        2\n        \n          Unbonding Period\n          \n            Mandatory waiting period: 21 days\n            Tokens locked and cannot be transferred\n            Still subject to slashing if validator misbehaves\n            No rewards earned during unbonding\n          \n          ⏱️ Duration: 21 days (518,400 blocks)\n        \n      \n\n      \n        3\n        \n          Release & Withdrawal\n          \n            Automatic release after 21 days\n            Tokens become transferable\n            Can be withdrawn to wallet or re-staked\n            No longer subject to slashing\n          \n          ⏱️ Duration: Immediate after unbonding\n        \n      \n    \n  \n\n  \n    ⚡ Emergency Mechanisms\n    \n    \n      \n        🚨 Emergency Unstaking\n        Available during severe validator misconduct or network emergencies\n        \n          ⏱️ Reduced unbonding: 7 days\n          💰 Emergency fee: 0.5% of stake\n          🔒 Governance approval required\n        \n      \n\n      \n        🛡️ Validator Jailing Protection\n        Automatic unstaking triggered when validator is jailed for critical violations\n        \n          ⏱️ Automatic trigger: During jailing\n          💰 No additional fees\n          🔒 Normal 21-day unbonding\n        \n      \n\n      \n        🔄 Validator Migration\n        Transfer stake between validators without unbonding period\n        \n          ⏱️ Instant transfer\n          💰 Migration fee: 0.1% of stake\n          🔒 Once per month limit\n        \n      \n    \n  \n\n### Advanced Slashing Protections\n\n  🛡️ Delegator Protections\n  \n  \n    \n      📊 Graduated Slashing\n      Slashing penalties applied gradually to minimize delegator impact:\n      \n        First offense: 50% of total penalty\n        Second offense: 75% of total penalty\n        Third offense: 100% of total penalty\n        Grace period: 90 days between offense resets\n      \n    \n\n    \n      ⚠️ Early Warning System\n      Automated notifications for delegators when validators show concerning patterns:\n      \n        Uptime drops below 95%\n        Missed block proposals exceed threshold\n        Commission rate changes\n        Abnormal behavior detected\n      \n    \n\n    \n      🔄 Auto-Migration Options\n      Smart contract features to protect delegator interests:\n      \n        Auto-unstake on critical violations\n        Automatic re-delegation to backup validators\n        Insurance pool for slashing compensation\n        Community-governed protection mechanisms\n      \n    \n  \n\n  \n    🚀 Ready to Participate?\n    Circle Layer's advanced DPoS system with comprehensive punishment mechanisms ensures network security while protecting legitimate participants. Our detailed staking and slashing systems provide clear rules and fair protections for all network participants.\n    \n      Start Staking\n      Learn More\n      View Validators",
    "frontmatter": {
      "id": "pos-consensus",
      "title": "POS Consensus Mechanism",
      "sidebar_label": "POS Consensus Mechanism",
      "sidebar_position": 1,
      "description": "Learn about Circle Layer's advanced Proof of Stake consensus mechanism, validator selection, and reward system."
    },
    "filePath": "architecture/pos-consensus.mdx",
    "category": "architecture",
    "url": "/architecture/pos-consensus"
  },
  "community-contribution-guidelines": {
    "id": "community-contribution-guidelines",
    "title": "Contribution Guidelines",
    "content": "# Contribution Guidelines\n\n## Overview\n\nWelcome to the Circle Layer community! This guide will help you contribute to our project.\n\n## How to Contribute\n\n### 1. Code Contributions\n- Fork the repository\n- Create a feature branch\n- Make your changes\n- Submit a pull request\n\n### 2. Documentation\n- Improve existing docs\n- Add new tutorials\n- Fix typos and errors\n- Update outdated information\n\n### 3. Bug Reports\n- Use the issue tracker\n- Provide detailed steps to reproduce\n- Include error messages\n- Specify your environment\n\n## Development Workflow\n\n1. **Setup**\n   \nCode example:\n   git clone https://github.com/your-org/circle-layer.git\n   cd circle-layer\n   npm install\n\n2. **Testing**\n   \nbash\n   npm run test\n   npm run lint\n\n3. **Building**\n   ```bash\n   npm run build\n\n## Code Standards\n\n- Follow the style guide\n- Write unit tests\n- Document your code\n- Keep commits atomic\n\n## Review Process\n\n1. Submit PR\n2. Automated checks\n3. Code review\n4. Merge or request changes\n\n## Getting Help\n\n- Join our Telegram community\n- Check the FAQ\n- Read the documentation\n- Follow us on X for updates",
    "frontmatter": {
      "sidebar_position": 1
    },
    "filePath": "community/contribution-guidelines.md",
    "category": "community",
    "url": "/community/contribution-guidelines"
  },
  "community-social-media": {
    "id": "community-social-media",
    "title": "Community and Social Media",
    "content": "# Community and Social Media\n\n## Community Channels\n\n### Social Media Platforms\n- [X (Twitter)](https://twitter.com/circlelayer)\n- [Telegram](https://t.me/circlelayer)\n\n## Community Guidelines\n\n### 1. Be Respectful\n- Treat others with respect\n- No harassment or discrimination\n- Keep discussions constructive\n\n### 2. Stay On Topic\n- Use appropriate channels\n- Follow platform guidelines\n- Avoid spam\n\n### 3. Share Knowledge\n- Help others learn\n- Share your experiences\n- Contribute to discussions\n\n## Getting Support\n\n### Technical Support\n- Ask questions on Telegram\n- Check documentation first\n- Provide necessary details\n- Tag your questions appropriately\n\n### General Questions\n- Use Telegram for community discussions\n- Search previous messages before asking\n- Be specific about your issue\n\n## Community Events\n\n### Regular Events\n- Weekly AMAs on X\n- Community updates on Telegram\n- Developer workshops and announcements\n\n### How to Participate\n1. Follow us on X and join our Telegram\n2. Enable notifications for announcements\n3. Register for events when announced\n4. Share feedback and questions\n\n## Stay Connected\n\nJoin our active community:\n- **X (Twitter)**: Get the latest updates, announcements, and industry insights\n- **Telegram**: Real-time community discussions, support, and direct communication with the team\n\nWe regularly share:\n- Development updates\n- Network status\n- Educational content\n- Community highlights\n- Event announcements",
    "frontmatter": {
      "sidebar_position": 2
    },
    "filePath": "community/social-media.md",
    "category": "community",
    "url": "/community/social-media"
  },
  "comparison-feature-comparison": {
    "id": "comparison-feature-comparison",
    "title": "Feature Comparison",
    "content": "# Feature Comparison\n\n## Overview\n\nCompare Circle Layer's current testnet features with other blockchain platforms:\n\n## Technical Features\n\n### Performance (Target vs Live Networks)\n| Feature | Circle Layer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| Block Time | 3s | 12s | 2s | 3s |\n| Finality | 1-3s | 6-10min | 2-3s | 3s |\n| Uptime | 99.95% | 99.95% | 99.9% | 99.9% |\n| Chain ID | 28525 | 1 | 137 | 56 |\n\n  \n    Performance Comparison\n  \n  \n  \n    \n      Circle Layer Testnet\n      Testnet\n    \n    \n      \n        Block Time\n        3s\n      \n      \n        Finality\n        1-3s\n      \n      \n        Uptime\n        99.95%\n      \n      \n        Chain ID\n        28525\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Block Time\n        12s\n      \n      \n        Finality\n        6-10min\n      \n      \n        Uptime\n        99.95%\n      \n      \n        Chain ID\n        1\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Block Time\n        2s\n      \n      \n        Finality\n        2-3s\n      \n      \n        Uptime\n        99.9%\n      \n      \n        Chain ID\n        137\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Block Time\n        3s\n      \n      \n        Finality\n        3s\n      \n      \n        Uptime\n        99.9%\n      \n      \n        Chain ID\n        56\n      \n    \n  \n\n### Network Configuration\n| Feature | Circle Layer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| Consensus | DPoS | PoW→PoS | PoS | PoA |\n| Currency | CLAYER | ETH | MATIC | BNB |\n| Min Gas Price | 0.000021 CLAYER | Variable | 30 Gwei | 5 Gwei |\n| EVM Compatible | Yes | Native | Yes | Yes |\n\n  \n    Network Configuration\n  \n  \n  \n    \n      Circle Layer Testnet\n      Testnet\n    \n    \n      \n        Consensus\n        DPoS\n      \n      \n        Currency\n        CLAYER\n      \n      \n        Min Gas Price\n        0.000021 CLAYER\n      \n      \n        EVM Compatible\n        Yes\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Consensus\n        PoW→PoS\n      \n      \n        Currency\n        ETH\n      \n      \n        Min Gas Price\n        Variable\n      \n      \n        EVM Compatible\n        Native\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Consensus\n        PoS\n      \n      \n        Currency\n        MATIC\n      \n      \n        Min Gas Price\n        30 Gwei\n      \n      \n        EVM Compatible\n        Yes\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Consensus\n        PoA\n      \n      \n        Currency\n        BNB\n      \n      \n        Min Gas Price\n        5 Gwei\n      \n      \n        EVM Compatible\n        Yes\n      \n    \n  \n\n### Validator Requirements\n| Feature | Circle Layer Testnet | Circle Layer Mainnet | Ethereum 2.0 | Polygon | BSC |\n|---------|---------------------|---------------------|---------------|---------|-----|\n| Min Stake | 32 CLAYER | 100,000 CLAYER | 32 ETH | 1 MATIC | N/A |\n| Min Validators | 5 active | 5 active | Various | 100+ | 21 |\n| Max Validators | 21 active | 10,000 active | Unlimited | Unlimited | 21 |\n| Staking Method | Manual | Smart Contract | Smart Contract | Smart Contract | N/A |\n\n  \n    Validator Requirements\n  \n  \n  \n    \n      Circle Layer Testnet\n      Testnet\n    \n    \n      \n        Min Stake\n        32 CLAYER\n      \n      \n        Min Validators\n        5 active\n      \n      \n        Max Validators\n        21 active\n      \n      \n        Staking Method\n        Manual\n      \n    \n  \n\n  \n    \n      Circle Layer Mainnet\n      Mainnet\n    \n    \n      \n        Min Stake\n        100,000 CLAYER\n      \n      \n        Min Validators\n        5 active\n      \n      \n        Max Validators\n        10,000 active\n      \n      \n        Staking Method\n        Smart Contract\n      \n    \n  \n  \n  \n    \n      Ethereum 2.0\n      Mainnet\n    \n    \n      \n        Min Stake\n        32 ETH\n      \n      \n        Min Validators\n        Various\n      \n      \n        Max Validators\n        Unlimited\n      \n      \n        Staking Method\n        Smart Contract\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Min Stake\n        1 MATIC\n      \n      \n        Min Validators\n        100+\n      \n      \n        Max Validators\n        Unlimited\n      \n      \n        Staking Method\n        Smart Contract\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Min Stake\n        N/A\n      \n      \n        Min Validators\n        21\n      \n      \n        Max Validators\n        21\n      \n      \n        Staking Method\n        N/A\n      \n    \n  \n\n## Security Features\n\n### Current Implementation\n| Feature | Circle Layer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| Security Model | Standard EVM + DPoS | PoW→PoS | PoS | PoA |\n| Burn Mechanism | 25% gas fees | EIP-1559 | No | No |\n| Slashing | DPoS standard | Yes | Yes | No |\n\n  \n    Security Features\n  \n  \n  \n    \n      Circle Layer Testnet\n      Testnet\n    \n    \n      \n        Security Model\n        Standard EVM + DPoS\n      \n      \n        Burn Mechanism\n        25% gas fees\n      \n      \n        Slashing\n        DPoS standard\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Security Model\n        PoW→PoS\n      \n      \n        Burn Mechanism\n        EIP-1559\n      \n      \n        Slashing\n        Yes\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Security Model\n        PoS\n      \n      \n        Burn Mechanism\n        No\n      \n      \n        Slashing\n        Yes\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Security Model\n        PoA\n      \n      \n        Burn Mechanism\n        No\n      \n      \n        Slashing\n        No\n      \n    \n  \n\n## Developer Experience\n\n### Development Tools\n| Feature | Circle Layer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| Hardhat Support | Yes | Yes | Yes | Yes |\n| Truffle Support | Yes | Yes | Yes | Yes |\n| Remix Support | Yes | Yes | Yes | Yes |\n| Web3.js/Ethers.js | Yes | Yes | Yes | Yes |\n\n  \n    Development Tools\n  \n  \n  \n    \n      Circle Layer Testnet\n      Testnet\n    \n    \n      \n        Hardhat Support\n        Yes\n      \n      \n        Truffle Support\n        Yes\n      \n      \n        Remix Support\n        Yes\n      \n      \n        Web3.js/Ethers.js\n        Yes\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Hardhat Support\n        Yes\n      \n      \n        Truffle Support\n        Yes\n      \n      \n        Remix Support\n        Yes\n      \n      \n        Web3.js/Ethers.js\n        Yes\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Hardhat Support\n        Yes\n      \n      \n        Truffle Support\n        Yes\n      \n      \n        Remix Support\n        Yes\n      \n      \n        Web3.js/Ethers.js\n        Yes\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Hardhat Support\n        Yes\n      \n      \n        Truffle Support\n        Yes\n      \n      \n        Remix Support\n        Yes\n      \n      \n        Web3.js/Ethers.js\n        Yes\n      \n    \n  \n\n### Network Resources\n| Feature | Circle Layer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| Block Explorer | explorer-testnet.circlelayer.com | etherscan.io | polygonscan.com | bscscan.com |\n| Faucet | 1 CLAYER/day | Various | Yes | Yes |\n| API Docs | testnet.circlelayer.com/api-docs | Various | docs.polygon.technology | docs.bnbchain.org |\n| GraphQL | Yes | Yes | Yes | Yes |\n\n  \n    Network Resources\n  \n  \n  \n    \n      Circle Layer Testnet\n      Testnet\n    \n    \n      \n        Block Explorer\n        explorer-testnet.circlelayer.com\n      \n      \n        Faucet\n        1 CLAYER/day\n      \n      \n        API Docs\n        testnet.circlelayer.com/api-docs\n      \n      \n        GraphQL\n        Yes\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Block Explorer\n        etherscan.io\n      \n      \n        Faucet\n        Various\n      \n      \n        API Docs\n        Various\n      \n      \n        GraphQL\n        Yes\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Block Explorer\n        polygonscan.com\n      \n      \n        Faucet\n        Yes\n      \n      \n        API Docs\n        docs.polygon.technology\n      \n      \n        GraphQL\n        Yes\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Block Explorer\n        bscscan.com\n      \n      \n        Faucet\n        Yes\n      \n      \n        API Docs\n        docs.bnbchain.org\n      \n      \n        GraphQL\n        Yes\n      \n    \n  \n\n## User Experience\n\n### Wallet Integration\n| Feature | Circle Layer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| MetaMask | Yes (testnet config) | Yes | Yes | Yes |\n| WalletConnect | Yes (register required) | Yes | Yes | Yes |\n| Mobile Wallets | Yes (EVM standard) | Yes | Yes | Yes |\n| Hardware Wallets | Limited (No Ledger) | Yes | Yes | Yes |\n\n  \n    Wallet Integration\n  \n  \n  \n    \n      Circle Layer Testnet\n      Testnet\n    \n    \n      \n        MetaMask\n        Yes (testnet config)\n      \n      \n        WalletConnect\n        Yes (register required)\n      \n      \n        Mobile Wallets\n        Yes (EVM standard)\n      \n      \n        Hardware Wallets\n        Limited (No Ledger)\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        MetaMask\n        Yes\n      \n      \n        WalletConnect\n        Yes\n      \n      \n        Mobile Wallets\n        Yes\n      \n      \n        Hardware Wallets\n        Yes\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        MetaMask\n        Yes\n      \n      \n        WalletConnect\n        Yes\n      \n      \n        Mobile Wallets\n        Yes\n      \n      \n        Hardware Wallets\n        Yes\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        MetaMask\n        Yes\n      \n      \n        WalletConnect\n        Yes\n      \n      \n        Mobile Wallets\n        Yes\n      \n      \n        Hardware Wallets\n        Yes\n      \n    \n  \n\n### Ecosystem Status\n| Feature | Circle Layer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| Status | In Development | Mainnet | Mainnet | Mainnet |\n| DApps | Testing Phase | 3000+ | 1000+ | 500+ |\n| Example Contracts | 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB | Many | Many | Many |\n\n  \n    Ecosystem Status\n  \n  \n  \n    \n      Circle Layer Testnet\n      Development\n    \n    \n      \n        Status\n        In Development\n      \n      \n        DApps\n        Testing Phase\n      \n      \n        Example Contracts\n        0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Status\n        Mainnet\n      \n      \n        DApps\n        3000+\n      \n      \n        Example Contracts\n        Many\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Status\n        Mainnet\n      \n      \n        DApps\n        1000+\n      \n      \n        Example Contracts\n        Many\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Status\n        Mainnet\n      \n      \n        DApps\n        500+\n      \n      \n        Example Contracts\n        Many\n      \n    \n  \n\n## 🚧 Features in Development\n\n### Upcoming Circle Layer Features\n| Feature | Status | Comparable Networks |\n|---------|--------|-------------------|\n| Automated Staking | In Development | Ethereum 2.0, Polygon |\n| On-chain Governance | In Development | Compound, Uniswap |\n| Cross-chain Bridges | In Development | Polygon, Avalanche |\n| Oracle Integration | In Development | Chainlink, Band Protocol |\n| Status Dashboard | In Development | Ethereum Network Status |\n\n  \n    🚧 Features in Development\n  \n  \n  \n    \n      \n        Automated Staking\n      \n      \n        \n          Circle Layer\n          In Development\n        \n        \n          Comparable to\n          Ethereum 2.0, Polygon\n        \n      \n    \n    \n    \n      \n        On-chain Governance\n      \n      \n        \n          Circle Layer\n          In Development\n        \n        \n          Comparable to\n          Compound, Uniswap\n        \n      \n    \n    \n    \n      \n        Cross-chain Bridges\n      \n      \n        \n          Circle Layer\n          In Development\n        \n        \n          Comparable to\n          Polygon, Avalanche\n        \n      \n    \n    \n    \n      \n        Oracle Integration\n      \n      \n        \n          Circle Layer\n          In Development\n        \n        \n          Comparable to\n          Chainlink, Band Protocol\n        \n      \n    \n    \n    \n      \n        Status Dashboard\n      \n      \n        \n          Circle Layer\n          In Development\n        \n        \n          Comparable to\n          Ethereum Network Status\n        \n      \n    \n  \n\n## Integration Comparison\n\n### Development Similarity\n| Aspect | Circle Layer | Similarity to |\n|--------|-------------|---------------|\n| Smart Contracts | Solidity | Ethereum (100%) |\n| Web3 Libraries | Web3.js, Ethers.js | Ethereum (100%) |\n| Development Flow | Standard EVM | Ethereum, Polygon, BSC |\n| Wallet Setup | Standard EVM | All EVM chains |\n\n  \n    Development Similarity\n  \n  \n  \n    \n      \n        Smart Contracts\n      \n      \n        \n          Circle Layer\n          Solidity\n        \n        \n          Similarity to\n          Ethereum (100%)\n        \n      \n    \n    \n    \n      \n        Web3 Libraries\n      \n      \n        \n          Circle Layer\n          Web3.js, Ethers.js\n        \n        \n          Similarity to\n          Ethereum (100%)\n        \n      \n    \n    \n    \n      \n        Development Flow\n      \n      \n        \n          Circle Layer\n          Standard EVM\n        \n        \n          Similarity to\n          Ethereum, Polygon, BSC\n        \n      \n    \n    \n    \n      \n        Wallet Setup\n      \n      \n        \n          Circle Layer\n          Standard EVM\n        \n        \n          Similarity to\n          All EVM chains\n        \n      \n    \n  \n\n### Migration Effort\n- **From Ethereum**: Minimal (just change RPC endpoint)\n- **From Polygon**: Minimal (same EVM patterns)\n- **From BSC**: Minimal (same EVM patterns)\n- **From Solana**: Significant (different architecture)",
    "frontmatter": {
      "sidebar_position": 1
    },
    "filePath": "comparison/feature-comparison.md",
    "category": "comparison",
    "url": "/comparison/feature-comparison"
  },
  "comparison-key-advantages": {
    "id": "comparison-key-advantages",
    "title": "Key Advantages",
    "content": "# Key Advantages\n\n## Overview\n\nCircle Layer offers several key advantages over other blockchain platforms:\n\n## Technical Advantages\n\n### 1. High Performance\n- 10,000+ TPS\n- 2-second block time\n- 4-second finality\n- Efficient consensus mechanism\n\n### 2. Advanced Security\n- AI-powered security system\n- Real-time threat detection\n- Automated vulnerability scanning\n- Formal verification support\n\n### 3. Scalability\n- Built-in sharding\n- Layer 2 solutions\n- Cross-chain compatibility\n- Optimized resource usage\n\n## Developer Advantages\n\n### 1. Developer Experience\n- EVM compatibility\n- Comprehensive tooling\n- Extensive documentation\n- Active community support\n\n### 2. Cost Efficiency\n- Lower gas fees\n- Optimized resource usage\n- Efficient contract execution\n- Cost-effective deployment\n\n### 3. Innovation\n- Latest blockchain features\n- Regular updates\n- Community-driven development\n- Open to new ideas\n\n## User Advantages\n\n### 1. User Experience\n- Fast transactions\n- Low fees\n- User-friendly interfaces\n- Multiple wallet support\n\n### 2. Security\n- Advanced protection\n- User-friendly security features\n- Regular security updates\n- Community-driven security\n\n### 3. Ecosystem\n- Growing DApp ecosystem\n- Active community\n- Regular events\n- Strong partnerships",
    "frontmatter": {
      "sidebar_position": 2
    },
    "filePath": "comparison/key-advantages.md",
    "category": "comparison",
    "url": "/comparison/key-advantages"
  },
  "development-cross-chain-bridge": {
    "id": "development-cross-chain-bridge",
    "title": "Cross-Chain Bridge",
    "content": "# Cross-Chain Bridge\n\n## Overview\n\nCircle Layer implements a comprehensive cross-chain bridge infrastructure that enables seamless asset transfer between Circle Layer Blockchain and other major blockchain networks. The bridge uses a secure lock-and-mint mechanism to ensure asset safety and maintain liquidity across chains.\n\n## Bridge Architecture\n\n### Asset Mapping System\nCircle Layer's cross-chain bridge supports mapping of major crypto assets to the Circle Layer ecosystem:\n\n- **ETH (Ethereum)**: Native Ethereum tokens\n- **BNB (Binance Smart Chain)**: BSC native and BEP-20 tokens  \n- **Stable Coins**: USDC, USDT, DAI, and other major stablecoins\n- **Wrapped Bitcoin**: wBTC and other Bitcoin representations\n- **Custom Tokens**: ERC-20 and compatible token standards\n\n### Lock-and-Mint Mechanism\nThe bridge operates using a secure lock-and-mint protocol:\n\n1. **Asset Locking**: Original tokens are locked in secure smart contracts on the source chain\n2. **Verification**: Multi-signature validation confirms the lock transaction\n3. **Minting**: Corresponding amount of tokens are minted on Circle Layer Blockchain\n4. **Redemption**: Users can burn Circle Layer tokens to unlock original assets\n\nCode example:\ngraph TD\n    A[User Deposits ETH] --> B[Lock in Bridge Contract]\n    B --> C[Multi-sig Validation]\n    C --> D[Mint Wrapped ETH on Circle Layer]\n    D --> E[User Receives clETH]\n    \n    F[User Burns clETH] --> G[Burn Verification]\n    G --> H[Multi-sig Release]\n    H --> I[Unlock Original ETH]\n    I --> J[User Receives ETH]\n\n## Supported Assets\n\n### Primary Bridge Pairs\n- **CLAYER/ETH**: Direct bridging between native tokens\n- **CLAYER/USDC**: Stable coin integration for DeFi\n- **CLAYER/BNB**: Binance Smart Chain connectivity\n- **CLAYER/USDT**: Additional stable coin support\n\n### Asset Categories\n\n#### 1. Native Tokens\n- **Ethereum (ETH)**: 1:1 mapping to clETH\n- **BNB**: 1:1 mapping to clBNB\n- **CLAYER**: Native Circle Layer token\n\n#### 2. Stable Coins\n- **USDC**: USD Coin bridging\n- **USDT**: Tether bridging  \n- **DAI**: MakerDAO stable coin\n- **BUSD**: Binance USD\n\n#### 3. Wrapped Assets\n- **wBTC**: Wrapped Bitcoin\n- **wETH**: Wrapped Ethereum\n- **Custom Wrapped Tokens**: Project-specific wrapped assets\n\n## Bridge Security\n\n### Multi-Signature Validation\n- **Validator Consensus**: 5-of-7 multi-signature requirement\n- **Time Delays**: 24-hour delay for large transfers (>$100,000)\n- **Emergency Pause**: Circuit breaker functionality for security incidents\n- **Audit Trail**: Complete transaction history and verification\n\n### Security Features\n- **Real-time Monitoring**: AI-powered anomaly detection\n- **Rate Limiting**: Protection against bulk transfer attacks\n- **Whitelist Support**: Optional whitelisting for institutional users\n- **Insurance Integration**: Coverage for bridge-related losses\n\n## Token-Peg Application Process\n\n### Application Requirements\nTo apply for token bridging support, projects must follow this process:\n\n1. **Initial Application**\n   - Contact: contact@circlelayer.com\n   - Submit project details and technical specifications\n   - Provide tokenomics and security audit information\n\n2. **Technical Review**\n   - Smart contract audit verification\n   - Token economics analysis\n   - Security assessment\n   - Compliance check\n\n3. **Bridge Contract Deployment**\n   - Custom bridge contract development\n   - Multi-signature setup\n   - Security testing and validation\n   - Testnet deployment and testing\n\n4. **Production Launch**\n   - Mainnet bridge deployment\n   - Liquidity bootstrapping\n   - Community announcement\n   - Monitoring and support\n\n### Application Timeline\n- **Initial Review**: 2-3 weeks\n- **Technical Development**: 4-6 weeks\n- **Testing Phase**: 2-3 weeks\n- **Production Deployment**: 1-2 weeks\n\n## Decentralized Cross-Chain Solutions\n\n### Community Development\nCircle Layer encourages the development of decentralized cross-chain solutions:\n\n- **Open Source Bridges**: Community-developed bridge protocols\n- **Decentralized Validators**: Permissionless validator participation\n- **Cross-Chain DAOs**: Governance across multiple chains\n- **Interoperability Standards**: Development of universal standards\n\n### Developer Incentives\n- **Grant Programs**: Funding for cross-chain development\n- **Technical Support**: Core team assistance for bridge projects\n- **Security Resources**: Audit support and security reviews\n- **Community Recognition**: Developer showcase and promotion\n\n## Bridge Usage\n\n### User Guide\n\n#### Bridging Assets to Circle Layer\n1. **Connect Wallet**: Connect MetaMask or compatible wallet\n2. **Select Asset**: Choose asset to bridge (ETH, BNB, USDC, etc.)\n3. **Enter Amount**: Specify amount to bridge\n4. **Confirm Transaction**: Sign the lock transaction\n5. **Wait for Minting**: Receive wrapped tokens on Circle Layer\n\n#### Bridging Assets from Circle Layer\n1. **Select Wrapped Asset**: Choose asset to bridge back\n2. **Enter Amount**: Specify amount to unlock\n3. **Initiate Burn**: Burn wrapped tokens on Circle Layer\n4. **Wait for Unlock**: Original tokens released on source chain\n\n### Integration Examples\n\n#### Web3.js Integration\n\nCode example:\nconst CircleLayerBridge = require('@circlelayer/bridge-sdk');\n\n// Initialize bridge\nconst bridge = new CircleLayerBridge({\n  rpcUrl: 'https://testnet-rpc.circlelayer.com',\n  contractAddress: '0x...' // Bridge contract address\n});\n\n// Bridge ETH to Circle Layer\nasync function bridgeETH(amount, userAddress) {\n  const tx = await bridge.lockETH({\n    amount: amount,\n    recipient: userAddress,\n    sourceChain: 'ethereum'\n  });\n  \n  return await tx.wait();\n}\n\n// Bridge back to Ethereum\nasync function bridgeBack(amount, userAddress) {\n  const tx = await bridge.burnWrappedETH({\n    amount: amount,\n    recipient: userAddress,\n    targetChain: 'ethereum'\n  });\n  \n  return await tx.wait();\n}\n\n#### React Integration\n\nCode example:\n\nfunction BridgeComponent() {\n  const { bridge, bridgeETH, getBalances } = useBridge();\n  const [amount, setAmount] = useState('');\n  \n  const handleBridge = async () => {\n    try {\n      const tx = await bridgeETH(amount);\n      console.log('Bridge transaction:', tx.hash);\n    } catch (error) {\n      console.error('Bridge failed:', error);\n    }\n  };\n  \n  return (\n    \n       setAmount(e.target.value)}\n        placeholder=\"Amount to bridge\"\n      />\n      \n        Bridge to Circle Layer\n      \n    \n  );\n}\n\n## Bridge Monitoring\n\n### Real-time Status\n- **Bridge Health**: Live status monitoring\n- **Transaction Queue**: Pending bridge transactions\n- **Liquidity Levels**: Available liquidity on both sides\n- **Performance Metrics**: Bridge speed and success rates\n\n### Analytics Dashboard\n- **Volume Statistics**: Daily/weekly/monthly bridge volume\n- **Asset Distribution**: Most bridged assets\n- **User Analytics**: Bridge adoption metrics\n- **Security Incidents**: Security event tracking\n\n## Future Development\n\n### Planned Enhancements\n- **Additional Chains**: Polygon, Arbitrum, Avalanche support\n- **Faster Finality**: Reduced bridge confirmation times\n- **Lower Fees**: Optimized gas costs for bridging\n- **Mobile Integration**: Native mobile wallet bridge support\n\n### Community Contributions\n- **Open Source**: Bridge contracts and SDK open sourced\n- **Developer Community**: Active developer engagement\n- **Security Bounties**: Ongoing security research incentives\n- **Protocol Improvements**: Community-driven enhancements\n\n## Resources\n\n### Documentation\n- **Technical Specs**: Bridge architecture documentation\n- **API Reference**: Complete SDK documentation\n- **Security Audits**: Published security audit reports\n- **Integration Guides**: Step-by-step integration tutorials\n\n### Support\n- **Developer Telegram**: Real-time developer support\n- **Technical Support**: contact@circlelayer.com\n- **Security Issues**: security@circlelayer.com\n- **Bug Reports**: GitHub issues and bug tracking",
    "frontmatter": {
      "sidebar_position": 5
    },
    "filePath": "development/cross-chain-bridge.md",
    "category": "development",
    "url": "/development/cross-chain-bridge"
  },
  "development-deploying-contracts": {
    "id": "development-deploying-contracts",
    "title": "Deploying Contracts",
    "content": "# Deploying Contracts\n\n## Overview\n\nLearn how to deploy smart contracts to Circle Layer testnet.\n\n## Network Configuration\n\n### Circle Layer Testnet\n- **RPC URL**: https://testnet-rpc.circlelayer.com\n- **Chain ID**: 28525\n- **Currency Symbol**: CLAYER\n- **Gas Price**: Minimum 0.000021 CLAYER (adjusts based on network consumption)\n- **Block Gas Limit**: 10,000,000,000,000 per block\n- **Block Explorer**: https://explorer-testnet.circlelayer.com/\n\n## Deployment Methods\n\n### 1. Using Hardhat\n\nCode example:\n// hardhat.config.js\nrequire('@nomiclabs/hardhat-ethers');\n\nmodule.exports = {\n  solidity: \"0.8.19\",\n  networks: {\n    circleLayerTestnet: {\n      url: \"https://testnet-rpc.circlelayer.com\",\n      chainId: 28525,\n      accounts: [process.env.PRIVATE_KEY],\n      gasPrice: 21000000000, // 0.000021 CLAYER in wei\n      gas: 10000000000000 // Block gas limit\n    }\n  }\n};\n\n// deploy.js\nasync function main() {\n  const [deployer] = await ethers.getSigners();\n  console.log(\"Deploying with account:\", deployer.address);\n  console.log(\"Account balance:\", (await deployer.getBalance()).toString());\n\n  const Contract = await ethers.getContractFactory(\"MyContract\");\n  const contract = await Contract.deploy({\n    gasPrice: ethers.utils.parseUnits('21', 'gwei'), // 0.000021 CLAYER\n  });\n  \n  await contract.deployed();\n  console.log(\"Contract deployed to:\", contract.address);\n  console.log(\"Transaction hash:\", contract.deployTransaction.hash);\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch(error => {\n    console.error(error);\n    process.exit(1);\n  });\n\n### 2. Using Truffle\n\nCode example:\n// truffle-config.js\nconst HDWalletProvider = require('@truffle/hdwallet-provider');\n\nmodule.exports = {\n  networks: {\n    circleLayerTestnet: {\n      provider: () => new HDWalletProvider(\n        process.env.PRIVATE_KEY,\n        'https://testnet-rpc.circlelayer.com'\n      ),\n      network_id: 28525,\n      gas: 10000000000000,\n      gasPrice: 21000000000, // 0.000021 CLAYER in wei\n      confirmations: 2,\n      timeoutBlocks: 200,\n      skipDryRun: true\n    }\n  },\n  compilers: {\n    solc: {\n      version: \"0.8.19\"\n    }\n  }\n};\n\n// migrations/1_deploy_contracts.js\nconst MyContract = artifacts.require(\"MyContract\");\nmodule.exports = function(deployer) {\n  deployer.deploy(MyContract);\n};\n\n### 3. Using Remix IDE\n1. Open [Remix IDE](https://remix.ethereum.org/)\n2. Connect to Circle Layer testnet:\n   - Environment: \"Injected Provider - MetaMask\"\n   - Ensure MetaMask is connected to Circle Layer Testnet\n3. Compile your contract\n4. Deploy with appropriate gas settings\n\n## Example Deployed Contract\n\nFor reference, here's an example contract deployed on Circle Layer testnet:\n- **Contract Address**: 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB\n- **Explorer**: [View Contract](https://testnet.circlelayer.com/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract)\n- **ABI**: [Contract ABI](https://testnet.circlelayer.com/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract_abi)\n\n## Deployment Checklist\n\n### 1. Pre-deployment\n- Test thoroughly on Circle Layer testnet\n- Get CLAYER from [faucet](https://faucet.circlelayer.com)\n- Check gas estimates with current network conditions\n- Verify constructor arguments\n\n### 2. During Deployment\n- Monitor transaction on [explorer](https://explorer-testnet.circlelayer.com/)\n- Use appropriate gas price (minimum 0.000021 CLAYER)\n- Verify deployment address\n- Save deployment info\n\n### 3. Post-deployment\n- Verify contract on block explorer\n- Test functionality with CLAYER\n- Update documentation\n- Monitor events\n\n## Gas Calculation\n\nCircle Layer follows Ethereum's standard gas calculation:\n\nCode example:\nTotal Fee = Gas Price × Gas Used\n\nWith current parameters:\n- **Minimum Gas Price**: 0.000021 CLAYER\n- **Block Gas Limit**: 10,000,000,000,000\n- **Average Block Time**: 3 seconds\n\n## Best Practices\n\n### 1. Security\n- Use secure private keys\n- Test on Circle Layer testnet first\n- Verify contract code on explorer\n- Monitor deployment transactions\n\n### 2. Cost Optimization\n- Optimize contract size for lower deployment costs\n- Use appropriate gas price based on network conditions\n- Consider gas efficiency in contract design\n- Monitor CLAYER token costs\n\n### 3. Integration\n- Same as EVM blockchain integration\n- Compatible with existing Ethereum development tools\n- Use standard Web3 libraries (Web3.js, Ethers.js)\n\n### 4. Maintenance\n- Keep deployment records\n- Monitor contract activity on explorer\n- Update documentation\n- Plan for upgrades",
    "frontmatter": {
      "sidebar_position": 3
    },
    "filePath": "development/deploying-contracts.md",
    "category": "development",
    "url": "/development/deploying-contracts"
  },
  "development-interacting-with-contracts": {
    "id": "development-interacting-with-contracts",
    "title": "Interacting with Contracts",
    "content": "# Interacting with Contracts\n\n## Overview\n\nLearn how to interact with smart contracts on Circle Layer.\n\n## Methods of Interaction\n\n### 1. Web3 Libraries\n\nCode example:\n// Using ethers.js\nconst contract = new ethers.Contract(address, abi, signer);\nconst result = await contract.someFunction();\n\nCode example:\n\nCode example:\n\n### 2. Command Line\n\nCode example:\n\nCode example:\n# Using Circle Layer CLI\ncircle-layer contract call   [args]\n\nCode example:\n\nCode example:\n\n### 3. Web Interface\n- Circle Layer Explorer\n- Custom DApp interfaces\n- Wallet integrations\n\n## Common Interactions\n\n### Reading Data\n\nCode example:\n\nCode example:\n// Get contract state\nconst value = await contract.getValue();\nconst owner = await contract.owner();\n\nCode example:\n\nCode example:\n\n### Writing Data\n\nCode example:\n\nCode example:\n// Send transaction\nconst tx = await contract.setValue(42);\nawait tx.wait();\n\nCode example:\n\nCode example:\n\n### Events\n\nCode example:\n\nCode example:\n// Listen to events\ncontract.on(\"ValueChanged\", (newValue, oldValue) => {\n    console.log(`Value changed from ${oldValue} to ${newValue}`);\n});\n\nCode example:\n\nCode example:\n\n## Best Practices\n\n### 1. Error Handling\n- Check transaction status\n- Handle revert cases\n- Implement retry logic\n- Monitor gas usage\n\n### 2. Security\n- Verify contract addresses\n- Check function permissions\n- Validate input data\n- Use secure connections\n\n### 3. Performance\n- Batch transactions\n- Optimize gas usage\n- Cache contract instances\n- Use appropriate providers",
    "frontmatter": {
      "sidebar_position": 2
    },
    "filePath": "development/interacting-with-contracts.md",
    "category": "development",
    "url": "/development/interacting-with-contracts"
  },
  "development-support-plans": {
    "id": "development-support-plans",
    "title": "Developer Support Plans",
    "content": "# Developer Support Plans\n\n## Overview\n\nCircle Layer provides comprehensive support for developers and projects building on our blockchain ecosystem. Our multi-faceted support program includes financial assistance, traffic support, and resource allocation to help projects succeed and grow within the Circle Layer ecosystem.\n\n## Support Categories\n\n### 🏦 Financial Support\n\nCircle Layer offers various forms of financial assistance to support developer success:\n\n#### Special Developer Fund\n- **Purpose**: Direct financial support for promising projects\n- **Eligibility**: Projects building innovative solutions on Circle Layer\n- **Application Process**: Submit proposal through official channels\n- **Funding Range**: Varies based on project scope and potential impact\n- **Contact**: developers@circlelayer.com\n\n#### Competition Programs\n- **Hackathons**: Regular hackathon events with substantial prize pools\n- **Developer Challenges**: Ongoing coding challenges and bounties\n- **Innovation Contests**: Competitions for breakthrough blockchain solutions\n- **Prize Structure**: $1M+ total annual prize distribution\n- **Recognition**: Winner showcases and community promotion\n\n#### Meta-Transaction Gas Reduction\n- **Gas Fee Discounts**: Step-wise gas fee reduction for CLAYER holders\n- **Developer Benefits**: Reduced operational costs for dApp deployment\n- **Testing Support**: Free gas for extensive testnet development\n- **Optimization Assistance**: Help optimize contracts for lower gas usage\n\n### 🚀 Traffic Support\n\nCircle Layer helps quality projects gain visibility and user adoption:\n\n#### Traffic Entrance Programs\n- **Quality dApp Promotion**: Featured placement for high-quality applications\n- **Ecosystem Integration**: Integration into Circle Layer's native ecosystem\n- **User Acquisition**: Access to Circle Layer's growing user base\n- **Cross-Promotion**: Promotion across Circle Layer's marketing channels\n\n#### Token Listing Opportunities\n- **DEX Integration**: Priority listing on Circle Layer's native DEX\n- **Bridge Support**: Cross-chain token bridging assistance\n- **Liquidity Support**: Initial liquidity provision assistance\n- **Market Making**: Support for healthy token markets\n\n#### Community Exposure\n- **Official Features**: Highlighting in official documentation and announcements\n- **Social Media Promotion**: Promotion across Circle Layer's social channels\n- **Conference Presentations**: Opportunities to present at Circle Layer events\n- **Press Coverage**: Assistance with blockchain media coverage\n\n### 🎁 Resource Support\n\nComprehensive resource allocation to accelerate project development:\n\n#### Marketing Packages\n- **Brand Development**: Professional branding and design support\n- **Content Creation**: Technical and marketing content development\n- **Campaign Management**: Professional marketing campaign assistance\n- **Community Building**: Support for building engaged user communities\n\n#### Foundation Roadshows\n- **Global Events**: Participation in major blockchain conferences\n- **Networking Opportunities**: Connections with investors and partners\n- **Speaking Opportunities**: Platform to present projects to industry leaders\n- **Travel Support**: Assistance with conference attendance and presentation\n\n#### Ecological Partnerships\n- **Strategic Introductions**: Connections with relevant ecosystem partners\n- **Integration Support**: Technical assistance for ecosystem integrations\n- **Collaboration Facilitation**: Support for inter-project collaborations\n- **Ecosystem Synergies**: Opportunities to leverage ecosystem partnerships\n\n## Application Process\n\n### Eligibility Requirements\n\n#### Basic Criteria\n- **Innovation**: Project demonstrates technical innovation or unique value proposition\n- **Quality**: High-quality code and professional development practices\n- **Commitment**: Long-term commitment to building on Circle Layer\n- **Community Value**: Potential to add value to the Circle Layer ecosystem\n\n#### Technical Requirements\n- **EVM Compatibility**: Projects must be EVM-compatible\n- **Security Standards**: Adherence to blockchain security best practices\n- **Documentation**: Comprehensive technical documentation\n- **Testing**: Thorough testing on Circle Layer testnet\n\n### Application Steps\n\n#### 1. Initial Application\n\nCode example:\nContact: developers@circlelayer.com\nSubject: Support Plan Application - [Project Name]\n\nRequired Information:\n- Project description and vision\n- Technical architecture overview  \n- Team background and experience\n- Requested support type(s)\n- Timeline and milestones\n- Community impact potential\n\n#### 2. Technical Review\n- **Code Review**: Evaluation of technical implementation\n- **Security Assessment**: Security audit and vulnerability analysis\n- **Scalability Analysis**: Assessment of project scalability potential\n- **Ecosystem Fit**: Evaluation of alignment with Circle Layer ecosystem\n\n#### 3. Support Plan Design\n- **Customized Package**: Tailored support plan based on project needs\n- **Resource Allocation**: Specific resource commitment and timeline\n- **Milestone Structure**: Performance-based support distribution\n- **Success Metrics**: Clear metrics for measuring support effectiveness\n\n#### 4. Implementation & Monitoring\n- **Active Support**: Ongoing support and assistance\n- **Progress Tracking**: Regular check-ins and milestone reviews\n- **Adaptive Support**: Adjustments based on project evolution\n- **Success Amplification**: Additional support for highly successful projects\n\n## Support Tiers\n\n### 🌱 Startup Tier\n**For early-stage projects and individual developers**\n\n- **Financial**: Up to $25,000 in development grants\n- **Traffic**: Basic promotion and community exposure\n- **Resources**: Documentation support and technical guidance\n- **Duration**: 6-12 months\n- **Requirements**: Testnet deployment and proof of concept\n\n### 🚀 Growth Tier  \n**For established projects ready to scale**\n\n- **Financial**: $25,000-$100,000+ in comprehensive support\n- **Traffic**: Featured placement and marketing campaigns\n- **Resources**: Full marketing package and partnership introductions\n- **Duration**: 12-24 months\n- **Requirements**: Mainnet deployment and user traction\n\n### 🏆 Strategic Tier\n**For high-impact projects with ecosystem significance**\n\n- **Financial**: $100,000+ and ongoing strategic support\n- **Traffic**: Premier ecosystem integration and promotion\n- **Resources**: Complete resource package including global roadshows\n- **Duration**: Long-term strategic partnership\n- **Requirements**: Significant ecosystem impact and innovation\n\n## Success Stories\n\n### Example Support Outcomes\n- **90% Project Success Rate**: Supported projects have 90%+ continued development\n- **10x User Growth**: Average 10x user growth within 12 months of support\n- **$50M+ Total Funding**: Supported projects have raised $50M+ in additional funding\n- **Ecosystem Leaders**: Many supported projects become ecosystem leaders\n\n### Case Study Framework\n*Detailed case studies will be added as the support program matures*\n\n- **Challenge**: Initial project challenges and needs\n- **Support Provided**: Specific support measures implemented\n- **Outcomes**: Measurable results and success metrics\n- **Lessons Learned**: Key insights for future support programs\n\n## Best Practices for Applicants\n\n### Application Tips\n- **Clear Vision**: Articulate a clear project vision and value proposition\n- **Technical Excellence**: Demonstrate high-quality technical implementation\n- **Market Research**: Show understanding of target market and competition\n- **Team Strength**: Highlight team experience and commitment\n- **Realistic Timeline**: Provide realistic development and growth timelines\n\n### Maximizing Support Value\n- **Active Communication**: Maintain regular communication with support team\n- **Milestone Achievement**: Consistently meet agreed-upon milestones\n- **Community Engagement**: Actively engage with Circle Layer community\n- **Feedback Integration**: Incorporate support team feedback and guidance\n- **Success Sharing**: Share successes and learnings with the ecosystem\n\n## Contact Information\n\n### Support Team Contacts\n- **General Inquiries**: developers@circlelayer.com\n- **Financial Support**: grants@circlelayer.com\n- **Marketing Support**: marketing@circlelayer.com\n- **Technical Support**: tech-support@circlelayer.com\n\n### Response Times\n- **Initial Response**: Within 48 hours\n- **Application Review**: 2-3 weeks\n- **Decision Communication**: Within 1 week of review completion\n- **Support Activation**: Within 2 weeks of approval\n\n---\n\n*Circle Layer is committed to fostering a thriving developer ecosystem through comprehensive support programs. We believe in supporting innovation and helping projects achieve their full potential within our ecosystem.*",
    "frontmatter": {
      "sidebar_position": 6
    },
    "filePath": "development/support-plans.md",
    "category": "development",
    "url": "/development/support-plans"
  },
  "development-web3-integration": {
    "id": "development-web3-integration",
    "title": "Web3 Integration",
    "content": "# Web3 Integration\n\n## Overview\n\nLearn how to integrate Web3 libraries with Circle Layer testnet. Circle Layer follows standard EVM blockchain integration patterns, making it compatible with existing Ethereum development tools.\n\n## Network Configuration\n\n### Circle Layer Testnet\n*Configuration for testnet deployment:*\n\n- **RPC URL**: https://testnet-rpc.circlelayer.com\n- **WebSocket**: wss://testnet-rpc.circlelayer.com\n- **Chain ID**: 28525\n- **Currency Symbol**: CLAYER\n\n- **Block Explorer**: https://explorer-testnet.circlelayer.com\n\n## Web3.js Integration\n\n### Installation\n\nCode example:\nnpm install web3\n\n### Basic Setup\n\nCode example:\nconst Web3 = require('web3');\n\n// HTTP Provider\nconst web3 = new Web3('https://testnet-rpc.circlelayer.com');\n\n// WebSocket Provider\nconst web3WS = new Web3('wss://testnet-rpc.circlelayer.com');\n\n// Network Configuration\nconst networkConfig = {\n  chainId: 28525,\n  name: 'Circle Layer Testnet',\n  currency: 'CLAYER'\n};\n\n### CLAYER Transactions\n\nCode example:\n// Send CLAYER transaction\nasync function sendCLAYER() {\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  \n  const tx = {\n    from: account.address,\n    to: '0x...', // recipient address\n    value: web3.utils.toWei('1', 'ether'), // 1 CLAYER\n    gas: 21000,\n    gasPrice: web3.utils.toWei('21', 'gwei'), // 0.000021 CLAYER\n    chainId: 28525\n  };\n  \n  const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);\n  const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n  \n  console.log('Transaction hash:', receipt.transactionHash);\n  return receipt;\n}\n\n### Contract Interaction\n\nCode example:\n// Interact with deployed example contract\nconst contractAddress = '0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB';\nconst contractABI = []; // ABI from explorer\n\nconst contract = new web3.eth.Contract(contractABI, contractAddress);\n\n// Call contract method\nasync function callContract() {\n  const result = await contract.methods.someMethod().call();\n  return result;\n}\n\n// Send transaction to contract\nasync function sendToContract() {\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  \n  const tx = contract.methods.someMethod(params);\n  const gas = await tx.estimateGas({ from: account.address });\n  \n  const signedTx = await account.signTransaction({\n    to: contractAddress,\n    data: tx.encodeABI(),\n    gas: gas,\n    gasPrice: web3.utils.toWei('21', 'gwei'), // Use CLAYER for gas\n    chainId: 28525\n  });\n  \n  const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n  return receipt;\n}\n\n## Ethers.js Integration\n\n### Installation\n\nCode example:\nnpm install ethers\n\n### Basic Setup\n\nCode example:\nconst { ethers } = require('ethers');\n\n// Provider setup\nconst provider = new ethers.providers.JsonRpcProvider('https://testnet-rpc.circlelayer.com');\n\n// WebSocket Provider\nconst wsProvider = new ethers.providers.WebSocketProvider('wss://testnet-rpc.circlelayer.com');\n\n// Network configuration\nconst network = {\n  name: 'Circle Layer Testnet',\n  chainId: 28525,\n  ensAddress: null\n};\n\n### Wallet Integration\n\nCode example:\n// Create wallet\nconst wallet = new ethers.Wallet(privateKey, provider);\n\n// Get balance in CLAYER\nasync function getBalance() {\n  const balance = await wallet.getBalance();\n  console.log('Balance:', ethers.utils.formatEther(balance), 'CLAYER');\n  return balance;\n}\n\n// Send CLAYER\nasync function sendCLAYER(toAddress, amount) {\n  const tx = {\n    to: toAddress,\n    value: ethers.utils.parseEther(amount), // Amount in CLAYER\n    gasPrice: ethers.utils.parseUnits('21', 'gwei'), // 0.000021 CLAYER\n    gasLimit: 21000\n  };\n  \n  const transaction = await wallet.sendTransaction(tx);\n  const receipt = await transaction.wait();\n  \n  console.log('Transaction confirmed:', receipt.transactionHash);\n  return receipt;\n}\n\n### Contract Interaction\n\nCode example:\n// Contract setup\nconst contractAddress = '0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB';\nconst contractABI = []; // ABI from explorer\n\nconst contract = new ethers.Contract(contractAddress, contractABI, wallet);\n\n// Read contract data\nasync function readContract() {\n  const result = await contract.someReadMethod();\n  return result;\n}\n\n// Write to contract\nasync function writeContract() {\n  const tx = await contract.someWriteMethod(params, {\n    gasPrice: ethers.utils.parseUnits('21', 'gwei'), // CLAYER gas price\n    gasLimit: 100000\n  });\n  \n  const receipt = await tx.wait();\n  console.log('Contract interaction confirmed:', receipt.transactionHash);\n  return receipt;\n}\n\n## React Integration\n\n### React Hook Example\n\nCode example:\n\nconst useCircleLayer = () => {\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState(null);\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        // Request account access\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\n        \n        // Add Circle Layer network\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: '0x6F75', // 28525 in hex\n            chainName: 'Circle Layer Testnet',\n            nativeCurrency: {\n              name: 'CLAYER',\n              symbol: 'CLAYER',\n              decimals: 18\n            },\n            rpcUrls: ['https://testnet-rpc.circlelayer.com'],\n            blockExplorerUrls: ['https://explorer-testnet.circlelayer.com/']\n          }]\n        });\n        \n        const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = web3Provider.getSigner();\n        const address = await signer.getAddress();\n        \n        setProvider(web3Provider);\n        setSigner(signer);\n        setAccount(address);\n        \n      } catch (error) {\n        console.error('Error connecting wallet:', error);\n      }\n    }\n  };\n\n  return { provider, signer, account, connectWallet };\n};\n\nexport default useCircleLayer;\n\n## Vue.js Integration\n\n### Vue Component Example\n\nCode example:\n\n  \n    Connect Wallet\n    \n      Connected: {{ account }}\n      Balance: {{ balance }} CLAYER\n      Send CLAYER\n    \n  \n\nexport default {\n  data() {\n    return {\n      provider: null,\n      signer: null,\n      account: null,\n      balance: '0'\n    };\n  },\n  methods: {\n    async connectWallet() {\n      if (window.ethereum) {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' });\n          \n          this.provider = new ethers.providers.Web3Provider(window.ethereum);\n          this.signer = this.provider.getSigner();\n          this.account = await this.signer.getAddress();\n          \n          await this.getBalance();\n        } catch (error) {\n          console.error('Error connecting wallet:', error);\n        }\n      }\n    },\n    \n    async getBalance() {\n      if (this.signer) {\n        const balance = await this.signer.getBalance();\n        this.balance = ethers.utils.formatEther(balance);\n      }\n    }\n  }\n};\n\n## Mobile Integration\n\nCircle Layer testnet can be integrated into mobile applications using the same EVM integration patterns:\n\n### React Native Example\n\nCode example:\n\n// Provider setup for mobile\nconst provider = new ethers.providers.JsonRpcProvider('https://testnet-rpc.circlelayer.com');\n\n// Mobile wallet integration follows standard EVM patterns\nconst connectMobileWallet = async () => {\n  // Use WalletConnect or similar for mobile wallet integration\n  // Follow EVM blockchain integration standards\n};\n\n## Best Practices\n\n### 1. Gas Management\n- Always use minimum gas price: 0.000021 CLAYER\n- Monitor network conditions for optimal gas pricing\n- Use gas estimation for contract interactions\n\n### 2. Error Handling\n\nCode example:\ntry {\n  const tx = await wallet.sendTransaction(transaction);\n  const receipt = await tx.wait();\n} catch (error) {\n  if (error.code === 'INSUFFICIENT_FUNDS') {\n    console.error('Insufficient CLAYER balance');\n  } else if (error.code === 'NETWORK_ERROR') {\n    console.error('Network connection issue');\n  }\n}\n\n### 3. Network Verification\n\nCode example:\n// Verify connected to correct network\nconst network = await provider.getNetwork();\nif (network.chainId !== 28525) {\n  throw new Error('Please connect to Circle Layer Testnet');\n}\n\n### 4. Performance Optimization\n- Use WebSocket for real-time updates\n- Implement proper connection pooling\n- Cache frequently accessed data\n- Monitor block confirmations (3-second block time)\n\n## Resources\n\n- **API Documentation**: https://testnet.circlelayer.com/api-docs\n- **GraphQL Endpoint**: https://testnet.circlelayer.com/graphiql\n- **Block Explorer**: https://explorer-testnet.circlelayer.com/\n- **Example Contract**: 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB",
    "frontmatter": {
      "sidebar_position": 4
    },
    "filePath": "development/web3-integration.md",
    "category": "development",
    "url": "/development/web3-integration"
  },
  "development-writing-smart-contracts": {
    "id": "development-writing-smart-contracts",
    "title": "Writing Smart Contracts",
    "content": "# Writing Smart Contracts\n\n## Overview\n\nLearn how to write and deploy smart contracts on Circle Layer.\n\n## Getting Started\n\n### Prerequisites\n- Solidity knowledge\n- Development environment setup\n- Circle Layer testnet access\n- CLAYER tokens from faucet (https://faucet.circlelayer.com)\n\n### Network Configuration\n- **Network**: Circle Layer Testnet\n- **Chain ID**: 28525\n- **RPC URL**: https://rpc-testnet.circlelayer.com\n- **Currency**: CLAYER\n- **Block Explorer**: https://explorer-testnet.circlelayer.com/\n\n### Basic Contract Structure\n\nCode example:\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    // State variables\n    address public owner;\n    uint256 public value;\n\n    // Constructor\n    constructor() {\n        owner = msg.sender;\n    }\n\n    // Functions\n    function setValue(uint256 _value) public {\n        require(msg.sender == owner, \"Not authorized\");\n        value = _value;\n    }\n}\n\n## Best Practices\n\n### 1. Security\n- Use latest Solidity version\n- Implement access control\n- Add input validation\n- Handle errors properly\n\n### 2. Gas Optimization\n- Optimize storage usage\n- Use appropriate data types\n- Batch operations\n- Minimize state changes\n- Consider Circle Layer's gas pricing (minimum 0.000021 CLAYER)\n\n### 3. Testing\n- Write unit tests\n- Use test coverage tools\n- Test edge cases\n- Simulate attacks\n\n## Development Tools\n\n### 1. IDE Support\n- VSCode with Solidity extension\n- Remix IDE\n- Hardhat\n- Truffle\n\n### 2. Testing Frameworks\n- Hardhat\n- Truffle\n- Waffle\n- Foundry\n\n### 3. Deployment Tools\n- Hardhat (with Circle Layer testnet configuration)\n- Truffle (with CLAYER gas settings)\n- Remix (using Injected Provider - MetaMask)\n- Web3.js/ethers.js (standard EVM integration)\n\n## Example Resources\n\n### Reference Implementation\n- **Example Contract**: 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB\n- **View on Explorer**: [Contract Details](https://testnet.circlelayer.com/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract)\n- **Contract ABI**: [View ABI](https://testnet.circlelayer.com/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract_abi)\n\n### Integration Guides\n- [Deploying Contracts](/development/deploying-contracts)\n- [Web3 Integration](/development/web3-integration)\n- [Contract Interaction](/development/interacting-with-contracts)",
    "frontmatter": {
      "sidebar_position": 1
    },
    "filePath": "development/writing-smart-contracts.md",
    "category": "development",
    "url": "/development/writing-smart-contracts"
  },
  "faqs-common-questions": {
    "id": "faqs-common-questions",
    "title": "Common Questions",
    "content": "# Common Questions\n\n## General Questions\n\n### What is Circle Layer?\nCircle Layer is a high-performance, EVM-compatible blockchain platform powered by Delegated Proof of Stake (DPoS) consensus mechanism with AI-enhanced security features, designed to deliver up to 50,000 TPS with 1-3 second finality.\n\n### How does Circle Layer differ from Ethereum?\n- **Performance**: Up to 50,000 TPS vs 15 TPS\n- **Block Time**: 3 seconds vs 12+ seconds\n- **Finality**: 1-3 seconds vs 6-10 minutes\n- **Consensus**: DPoS vs Proof of Stake\n- **Energy Efficiency**: 99.9% less energy consumption\n- **Security**: AI-enhanced security features\n- **Gas Fees**: Lower fees with CLAYER token\n\n### Is Circle Layer EVM compatible?\nYes, Circle Layer is fully EVM compatible, allowing Ethereum developers to easily port their applications using the same tools and libraries.\n\n## Network Information\n\n### What is the current network status?\n- **Status**: Development & Testing Phase\n- **Chain ID**: 28525\n- **Currency**: CLAYER\n- **Block Time**: 3 seconds\n- **Finality**: 1-3 second\n- **Target Performance**: 50,000 TPS\n- **Current Performance**: 2,000+ TPS\n- **Target Uptime**: 99.95%\n\n### Where can I find network resources?\n*Circle Layer testnet resources:*\n\n- **RPC**: https://testnet-rpc.circlelayer.com\n- **Explorer**: https://explorer-testnet.circlelayer.com\n- **Faucet**: https://faucet.circlelayer.com\n- **Faucet API**: https://faucet-api.circlelayer.com\n\n## Technical Questions\n\n### How do I connect to Circle Layer testnet?\n*Configuration for Circle Layer testnet:*\n\nCode example:\n// Using ethers.js\nconst provider = new ethers.providers.JsonRpcProvider('https://testnet-rpc.circlelayer.com');\n\n// Network configuration for MetaMask\n{\n  chainId: '0x6F75', // 28525 in hex\n  chainName: 'Circle Layer Testnet',\n  nativeCurrency: {\n    name: 'CLAYER',\n    symbol: 'CLAYER',\n    decimals: 18\n  },\n  rpcUrls: ['https://testnet-rpc.circlelayer.com'],\n  blockExplorerUrls: ['https://explorer-testnet.circlelayer.com']\n}\n\n### What wallets are supported?\n- **MetaMask** (Recommended with testnet configuration)\n- **WalletConnect** (Register and follow their guidelines)\n- **Custom Wallets** (EVM-compatible software wallets)\n- **Mobile Wallets** (Trust Wallet, Rainbow, Coinbase Wallet, etc.)\n\n**Note**: Ledger and other hardware wallets are NOT currently supported.\n\n### How do I get testnet tokens?\n*Circle Layer testnet faucet:*\n\n1. Visit the faucet: https://faucet.circlelayer.com\n2. Paste your EVM wallet address\n3. Click \"Get 1 CLAYER coin\"\n4. Wait 24 hours between requests (1 CLAYER per day limit)\n\n## Development Questions\n\n### How do I deploy a smart contract?\nSee our [Deployment Guide](/development/deploying-contracts) with Hardhat and Truffle configurations for Circle Layer testnet.\n\n### What development tools are available?\n- **Hardhat** (with Circle Layer testnet configuration)\n- **Truffle** (with CLAYER gas settings)\n- **Remix** (using Injected Provider - MetaMask)\n- **Web3.js / Ethers.js** (standard EVM integration)\n\n### How do I interact with contracts?\nSee our [Web3 Integration Guide](/development/web3-integration) for detailed instructions. \n\n### What are the gas requirements?\n- **Minimum Gas Price**: 0.000021 CLAYER\n- **Block Gas Limit**: 10,000,000,000,000 per block\n- **Fee Calculation**: gas price × gas amount (Ethereum standard)\n\n## Security Questions\n\n### What security features are implemented?\n- **DPoS Consensus**: Delegated Proof of Stake security model  \n- **Multi-Layer Security**: Network, validator, and transaction-level protection\n- **Economic Security**: Token burn mechanism (25% of transaction fees)\n- **Network Requirements**: Minimum 5 active validators for security\n\n### What security features are coming in Phase 2?\n- **AI-Enhanced Security**: Advanced threat detection targeting 99.8% accuracy\n- **Real-time Monitoring**: Continuous threat detection and response\n- **Automated Security Auditing**: AI-powered contract analysis\n\n### How do I report security issues?\n- Use our bug bounty program\n- Contact security team\n- Follow responsible disclosure protocols\n\n## Network Questions\n\n### How do I become a validator?\nSee our [Validator Guide](/nodes-validation/becoming-validator)\n\n### What are the current staking requirements?\n- **Testnet Validator Minimum Stake**: 32 CLAYER\n- **Mainnet Validator Minimum Stake**: 100,000 CLAYER\n- **Delegator Minimum Stake**: 32 CLAYER\n- **Maximum Validators**: 21 (testnet), 10,000 (mainnet)\n- **Hardware**: Ubuntu ≥ 20.04 LTS, 8GB RAM minimum (32GB recommended)\n- **Storage**: 25GB minimum (100GB SSD recommended)\n- **Network**: Multiple RPC endpoints required\n- **Security**: Minimum 5 validators active required\n\n### What can validators earn?\n**Revenue Sources:**\n- **Block Rewards**: 2 CLAYER per block + performance bonuses\n- **Transaction Fees**: 30% of network transaction fees\n- **Delegation Commission**: 5-20% from delegated stakes\n\n**Fee Distribution:**\n- **Delegators**: 45% of gas fees\n- **Validators**: 30% of gas fees  \n- **Burn Mechanism**: 25% of gas fees (stops at 1,000,000 CLAYER threshold)\n\n**Expected Annual Revenue (estimates):**\n- **Conservative**: $25,000 - $58,000\n- **Moderate**: $83,000 - $223,000  \n- **Optimistic**: $328,000 - $1,340,000\n\n*Revenue depends on network activity, token price, delegation amount, and validator performance.*\n\n### What ports do validators need?\n- **Required Ports**: 32668, 32669, 8545, 6060, 80, 22\n- **Firewall**: Not required\n\n### How do I run a node?\nSee our [Node Guide](/nodes-validation/running-full-node) with current hardware and software requirements.\n\n## Integration Questions\n\n### Is Circle Layer the same as other EVM chains?\nYes, Circle Layer follows standard EVM integration patterns, making it compatible with existing Ethereum development tools and workflows.\n\n### Can I use existing Ethereum tools?\nYes, all standard Ethereum development tools work with Circle Layer testnet:\n- Same Web3 libraries\n- Same wallet integrations  \n- Same development frameworks\n- Same smart contract languages (Solidity)\n\n## 🚧 Development Status & Roadmap\n\n### What is the current development status?\nCircle Layer is currently in active development and testing phase with the following progress:\n\n**Completed Components:**\n- Core blockchain architecture (DPoS consensus)\n- EVM compatibility layer\n- Basic smart contract infrastructure\n- Network configuration and tooling\n- Documentation and developer resources\n\n**In Development:**\n- **AI security framework** (targeting 99.8% threat detection accuracy)\n- Testnet deployment and testing\n- Advanced validator tooling\n- Enhanced monitoring systems\n- Cross-chain bridge development\n\n### What features are coming in each phase?\n\n**Phase 1: Testnet Launch (Current Focus)**\n- Public testnet availability\n- Faucet and explorer services\n- Developer tooling and SDKs\n- Community validator onboarding\n\n**Phase 2: Ecosystem Development**\n- DeFi protocol partnerships\n- Developer grants program\n- Advanced staking mechanisms\n- Cross-chain integrations\n\n**Phase 3: Mainnet Preparation**\n- Security audits and testing\n- Performance optimization\n- Governance system activation\n- Economic model finalization\n\n**Phase 4: Mainnet & Expansion**\n- Full mainnet launch\n- Enterprise partnerships\n- Scaling to 50,000 TPS\n- Global ecosystem growth\n\n### When will testnet be available?\nWe're currently in the final development and testing phase. Testnet availability will be announced through our official channels when ready.",
    "frontmatter": {
      "sidebar_position": 1
    },
    "filePath": "faqs/common-questions.md",
    "category": "faqs",
    "url": "/faqs/common-questions"
  },
  "getting-started-connect-testnet": {
    "id": "getting-started-connect-testnet",
    "title": "Connect to Testnet",
    "content": "# Connect to Testnet\n\nLearn about Circle Layer's testnet configuration for development and testing purposes.\n\n## Testnet Details\n\n*Configuration for Circle Layer testnet:*\n\n- **Network Name**: Circle Layer Testnet\n- **RPC URL**: https://testnet-rpc.circlelayer.com\n- **WebSocket Endpoint**: wss://testnet-rpc.circlelayer.com\n- **Chain ID**: 28525\n- **Currency Symbol**: CLAYER\n- **Currency Decimals**: 18\n- **Block Explorer**: https://explorer-testnet.circlelayer.com\n\n## Network Performance\n- **Block Time**: 3 seconds per block\n- **Transaction Finality**: 1-3 seconds\n- **Network Uptime**: 99.95% (Last 30 days with minor downtime due to maintenance)\n- **Gas Price Range**: Minimum 0.000021 CLAYER (depending on network consumption and function calls)\n\n## Connection Steps\n\nTo connect to the Circle Layer testnet:\n\n1. Configure your wallet with testnet settings\n2. Switch to the testnet network\n3. Verify connection\n4. Check testnet status\n5. Start testing your applications\n\n## Testnet Faucet\n\nThe testnet faucet provides test tokens for development and testing.\n- **Faucet URL**: https://faucet.circlelayer.com\n- **Faucet API**: https://faucet-api.circlelayer.com\n- **Daily limit**: 1 CLAYER per address",
    "frontmatter": {
      "id": "connect-testnet",
      "title": "Connect to Testnet",
      "sidebar_label": "Connect to Testnet"
    },
    "filePath": "getting-started/connect-testnet.md",
    "category": "getting-started",
    "url": "/getting-started/connect-testnet"
  },
  "getting-started-set-up-wallet": {
    "id": "getting-started-set-up-wallet",
    "title": "Set Up a Wallet",
    "content": "# Set Up a Wallet\n\nLearn how to set up your wallet for Circle Layer testnet access.\n\n## Supported Wallets\n\n- **MetaMask** (Recommended - Desktop and Mobile)\n- **WalletConnect** (Register on WalletConnect and follow their guidelines)\n- **Custom Wallets** (EVM-compatible software wallets)\n- **Mobile Wallets** (Trust Wallet, Rainbow, Coinbase Wallet, etc.)\n\n:::warning Hardware Wallet Limitation\n**Ledger hardware wallets are NOT supported** on Circle Layer at this time. Please use software wallets like MetaMask for Circle Layer testnet access.\n:::\n\n### Wallet Compatibility Details\n\n#### ✅ Fully Supported\n- **MetaMask**: Browser extension and mobile app\n- **Trust Wallet**: Mobile and desktop versions  \n- **Rainbow Wallet**: Mobile and browser support\n- **Coinbase Wallet**: Full EVM compatibility\n- **WalletConnect**: All WalletConnect-compatible wallets\n- **Brave Wallet**: Built-in Ethereum wallet\n- **Frame**: Desktop wallet with hardware isolation\n\n#### ❌ Not Supported\n- **Ledger Hardware Wallets**: Due to technical limitations\n- **Trezor Hardware Wallets**: Due to technical limitations\n- **Other Hardware Wallets**: Currently not compatible\n\n## Preparation Steps\n\n1. Choose your preferred wallet\n2. Install the wallet extension or application\n3. Create a new wallet or import existing\n4. Configure network settings\n5. Add Circle Layer testnet\n\n## MetaMask Configuration\n\n### Testnet Network Settings\n\nCode example:\n{\n  \"networkName\": \"Circle Layer Testnet\",\n  \"rpcUrl\": \"https://testnet-rpc.circlelayer.com\",\n  \"chainId\": 28525,\n  \"currencySymbol\": \"CLAYER\",\n  \"currencyDecimals\": 18,\n  \"blockExplorerUrl\": \"https://explorer-testnet.circlelayer.com\"\n}\n\n### Manual Network Addition\n\n#### Method 1: Manual Configuration\n1. **Open MetaMask** and click the network dropdown\n2. **Select \"Add Network\"** → \"Add a network manually\"\n3. **Fill in the network details**:\n   - Network Name: `Circle Layer Testnet`\n   - New RPC URL: `https://testnet-rpc.circlelayer.com`\n   - Chain ID: `28525`\n   - Currency Symbol: `CLAYER`\n   - Block Explorer URL: `https://explorer-testnet.circlelayer.com`\n4. **Click \"Save\"** to add the network\n5. **Switch to Circle Layer** from the network dropdown\n\n#### Method 2: Programmatic Addition\n\nCode example:\n// Add Circle Layer Testnet programmatically\nasync function addCircleLayerNetwork() {\n  try {\n    await window.ethereum.request({\n      method: 'wallet_addEthereumChain',\n      params: [{\n        chainId: '0x6F75', // 28525 in hexadecimal\n        chainName: 'Circle Layer Testnet',\n        nativeCurrency: {\n          name: 'CLAYER',\n          symbol: 'CLAYER',\n          decimals: 18\n        },\n        rpcUrls: ['https://testnet-rpc.circlelayer.com'],\n        blockExplorerUrls: ['https://explorer-testnet.circlelayer.com']\n      }]\n    });\n    console.log('Circle Layer Testnet added successfully');\n  } catch (error) {\n    console.error('Error adding network:', error);\n  }\n}\n\n### Network Verification\nAfter adding the network, verify the configuration:\n\n1. **Check Network Display**: Should show \"Circle Layer Testnet\"\n2. **Verify Chain ID**: Should display 28525\n3. **Currency Symbol**: Should show CLAYER\n4. **Test Connection**: Try viewing account balance\n\n### Advanced MetaMask Settings\n\n#### Gas Configuration\n\nCode example:\n// Recommended gas settings for Circle Layer\nconst gasSettings = {\n  gasPrice: '21000000000', // 0.000021 CLAYER in wei\n  gasLimit: '21000', // Standard transfer\n  maxFeePerGas: '25000000000', // 0.000025 CLAYER\n  maxPriorityFeePerGas: '2000000000' // 0.000002 CLAYER\n};\n\n#### Custom RPC Configuration\n- **Primary RPC**: `https://testnet-rpc.circlelayer.com`\n- **WebSocket**: `wss://testnet-rpc.circlelayer.com`\n- **Backup RPC**: Contact support for additional endpoints\n- **Connection Timeout**: 30 seconds (default)\n\n## WalletConnect Setup\nFor WalletConnect integration, you need to register on WalletConnect and follow their guidelines for EVM-compatible chains.\n\n### WalletConnect Configuration\n\nCode example:\n// WalletConnect v2 setup for Circle Layer\n\nconst circleLayerTestnet = {\n  id: 28525,\n  name: 'Circle Layer Testnet',\n  network: 'circle-layer-testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'CLAYER',\n    symbol: 'CLAYER',\n  },\n  rpcUrls: {\n    default: { http: ['https://testnet-rpc.circlelayer.com'] },\n    public: { http: ['https://testnet-rpc.circlelayer.com'] },\n  },\n  blockExplorers: {\n    default: { \n      name: 'Circle Layer Explorer', \n      url: 'https://explorer-testnet.circlelayer.com' \n    },\n  },\n};\n\nconst { chains, publicClient } = configureChains(\n  [circleLayerTestnet],\n  [\n    jsonRpcProvider({\n      rpc: (chain) => ({\n        http: 'https://testnet-rpc.circlelayer.com',\n      }),\n    }),\n  ]\n);\n\n## Mobile Wallet Configuration\n\n### Trust Wallet Setup\n1. **Open Trust Wallet** → Settings → Wallets\n2. **Add Network** → Select \"Custom\"\n3. **Enter Network Details**:\n   - Network Name: `Circle Layer Testnet`\n   - RPC URL: `https://testnet-rpc.circlelayer.com`\n   - Chain ID: `28525`\n   - Symbol: `CLAYER`\n   - Explorer: `https://explorer-testnet.circlelayer.com`\n\n### Rainbow Wallet Setup\n1. **Open Rainbow Wallet** → Settings → Networks\n2. **Add Network** → Custom Network\n3. **Configure Circle Layer**:\n   - Name: `Circle Layer Testnet`\n   - RPC: `https://testnet-rpc.circlelayer.com`\n   - Chain ID: `28525`\n   - Currency: `CLAYER`\n\n### Coinbase Wallet Setup\n1. **Open Coinbase Wallet** → Settings → Active Networks\n2. **Add Network** → Custom RPC\n3. **Fill Network Information**:\n   - Network Name: `Circle Layer Testnet`\n   - RPC URL: `https://testnet-rpc.circlelayer.com`\n   - Chain ID: `28525`\n   - Currency Symbol: `CLAYER`\n\n## Troubleshooting\n\n### Common Issues\n\n#### Connection Problems\n- **Verify RPC URL**: Ensure `https://testnet-rpc.circlelayer.com` is correct\n- **Check Chain ID**: Must be exactly `28525`\n- **Network Status**: Check Circle Layer testnet status\n- **Clear Cache**: Clear wallet cache and retry\n\n#### Transaction Issues\n- **Insufficient Gas**: Ensure you have CLAYER for gas fees\n- **Gas Price**: Use minimum 0.000021 CLAYER gas price\n- **Network Congestion**: Wait for network to clear\n- **Wallet Update**: Ensure wallet is updated to latest version\n\n#### Balance Display\n- **Token Not Visible**: May need to manually add CLAYER token\n- **Incorrect Network**: Ensure you're on Circle Layer Testnet\n- **Sync Issues**: Try refreshing wallet or switching networks\n\n### Support Contacts\n- **Technical Support**: tech-support@circlelayer.com\n- **Wallet Issues**: wallet-support@circlelayer.com\n- **Documentation**: docs-feedback@circlelayer.com\n\n## Development Integration\nCircle Layer follows standard EVM integration patterns, making it compatible with existing Ethereum development tools and wallets.",
    "frontmatter": {
      "id": "set-up-wallet",
      "title": "Set Up a Wallet",
      "sidebar_label": "Set Up a Wallet"
    },
    "filePath": "getting-started/set-up-wallet.md",
    "category": "getting-started",
    "url": "/getting-started/set-up-wallet"
  },
  "getting-started-use-faucet": {
    "id": "getting-started-use-faucet",
    "title": "Use the Faucet",
    "content": "# Use the Faucet\n\nLearn about Circle Layer's testnet faucet for development and testing.\n\n## Faucet Access\n\n- **URL**: https://faucet.circlelayer.com\n- **API URL**: https://faucet-api.circlelayer.com\n- **Supported Networks**: Circle Layer Testnet\n- **Token Type**: CLAYER\n- **Supported Wallet Formats**: EVM-based wallets\n\n## How to Use\n\nTo use the Circle Layer testnet faucet:\n\n1. Copy your wallet address\n2. Paste your wallet address in the text box on the faucet page\n3. Click on \"Get 1 CLAYER coin\" button\n4. Wait for confirmation\n5. Verify balance in your wallet\n\n## Faucet Limits\n\n- **Daily limit**: 1 CLAYER per day per address\n- **Request interval**: 24 hours\n- **Distribution**: From treasury wallet\n\n## Token Information\n\n- **Token Symbol**: CLAYER\n- **Testnet Total Supply**: 10 Billion CLAYER\n- **Decimals**: 18\n\n## Troubleshooting\n\nCommon issues and solutions for faucet usage:\n\n- Ensure you're using an EVM-compatible wallet address\n- Wait 24 hours between requests\n- Check that your wallet is configured for Circle Layer Testnet",
    "frontmatter": {
      "id": "use-faucet",
      "title": "Use the Faucet",
      "sidebar_label": "Use the Faucet"
    },
    "filePath": "getting-started/use-faucet.md",
    "category": "getting-started",
    "url": "/getting-started/use-faucet"
  },
  "governance-governance-model": {
    "id": "governance-governance-model",
    "title": "Governance Model",
    "content": "# Governance Model\n\n## Overview\n\nCircle Layer uses a decentralized governance model that allows token holders to participate in decision-making. The governance structure clearly separates the Circle Layer company's supportive role from network control, ensuring true decentralization.\n\n## Company Structure & Network Governance\n\n### Circle Layer Company Role\nThe Circle Layer company serves as an ecosystem supporter and facilitator, **not as a network controller**:\n\n- **Ecosystem Support**: Provides development resources, documentation, and community support\n- **Infrastructure Development**: Builds tools, SDKs, and developer resources\n- **Community Building**: Facilitates community growth and ecosystem partnerships\n- **No Network Control**: Does not control network operations, consensus, or governance decisions\n\n### Network Control Model\nThe Circle Layer network is controlled by its validators and community:\n\n- **Validator Governance**: Network controlled by distributed validator nodes\n- **Decentralized Consensus**: No single entity controls the blockchain\n- **Community Decision Making**: Token holders and validators make governance decisions\n- **Autonomous Operation**: Network operates independently of company control\n\n### Shared Vision Framework\n- **Global Contributors**: Open ecosystem welcoming global development contributors\n- **Shared Vision**: Alignment around advancing blockchain technology and adoption\n- **Value Creation Focus**: Core values centered on creating value for the blockchain industry\n- **Community-Driven**: Development priorities shaped by community needs and input\n\n### Governance Separation\n- **Technical Governance**: Handled by validators and community consensus\n- **Ecosystem Governance**: Community-driven through token-based voting\n- **Company Operations**: Separate from network governance decisions\n- **Transparency**: Clear separation ensures transparency and decentralization\n\n## Governance Structure\n\n### 1. Token Holders\n- Voting power based on token holdings\n- Minimum stake for voting: 1,000 CLAYER\n- Delegation options available\n\n### 2. Validators\n- Network security providers\n- Additional voting weight\n- Technical expertise\n\n### 3. Development Team\n- Technical implementation\n- Proposal evaluation\n- Community support\n\n## Governance Process\n\n### 1. Proposal Creation\n- Minimum stake: 10,000 CLAYER\n- Technical specification\n- Implementation plan\n- Resource requirements\n\n### 2. Discussion Phase\n- Community feedback\n- Technical review\n- Economic impact analysis\n- Security assessment\n\n### 3. Voting Phase\n- Duration: 7 days\n- Quorum: 20% of total supply\n- Majority: 60% approval\n- Implementation threshold\n\n## Proposal Types\n\n### 1. Protocol Upgrades\n- Network parameters\n- Consensus changes\n- Security updates\n\n### 2. Treasury Management\n- Fund allocation\n- Grant programs\n- Development funding\n\n### 3. Ecosystem Development\n- Partnership proposals\n- Integration requests\n- Community initiatives\n\n## Voting Mechanism\n\n### 1. On-chain Voting\n\nCode example:\nfunction vote(uint256 proposalId, bool support) external {\n    require(hasVotingPower(msg.sender), \"No voting power\");\n    require(!hasVoted[msg.sender][proposalId], \"Already voted\");\n    // Voting logic\n}\n\n### 2. Delegation\n\nCode example:\nfunction delegate(address to) external {\n    require(to != address(0), \"Invalid delegate\");\n    require(!hasDelegated[msg.sender], \"Already delegated\");\n    // Delegation logic\n}\n\n### 3. Vote Counting\n- Weighted voting power\n- Time-locked tokens\n- Delegation consideration\n```",
    "frontmatter": {
      "sidebar_position": 1
    },
    "filePath": "governance/governance-model.md",
    "category": "governance",
    "url": "/governance/governance-model"
  },
  "governance-tokenomics": {
    "id": "governance-tokenomics",
    "title": "Tokenomics",
    "content": "# Tokenomics\n\n## Overview\n\nCircle Layer's tokenomics model is designed to ensure long-term sustainability and growth. The current testnet provides insight into the economic mechanisms that will support the network.\n\n## Economic Model\n\n### Endogenous Token System\nCircle Layer uses **CLAYER** as its native endogenous token that powers all network operations:\n\n- **Transaction Fees**: All transactions consume CLAYER as gas fees\n- **Network Security**: Validators must pledge CLAYER to participate in consensus\n- **Reward Distribution**: Gas fees are distributed according to stake proportion\n- **Economic Incentives**: Stake-weighted participation in network governance\n\n### Validator Economics Model\nThe Circle Layer network operates on a stake-based validator system:\n\n1. **Validator Participation**: Miners pledge CLAYER to become validator nodes\n2. **Reward Distribution**: Node rewards come from gas fees, distributed according to mortgage (stake) proportion\n3. **Proportional Rewards**: Higher stake = higher share of network fees\n4. **Economic Security**: Validator incentives align with network security\n\n### Meta-Transaction Functionality\nCircle Layer implements advanced gas fee optimization:\n\n- **Gas Fee Reduction**: Meta-transaction function reduces overall network costs\n- **Step-wise Reduction**: Users holding CLAYER receive graduated gas fee discounts\n- **Developer Benefits**: Reduced costs for developers deploying and operating dApps\n- **User Experience**: Lower barriers to entry for end users\n\n## Current Testnet Token Information\n\n### Token Details\n- **Token Symbol**: CLAYER\n- **Token Type**: Endogenous network token\n- **Decimals**: 18\n- **Testnet Total Supply**: 10 Billion CLAYER\n- **Mainnet Total Supply**: 1 Billion CLAYER\n- **Chain ID**: 28525\n- **Network**: Circle Layer Testnet\n\n### Current Economic Parameters\n- **Minimum Gas Price**: 0.000021 CLAYER (1 Gwei)\n- **Block Gas Limit**: 10,000,000,000,000 per block\n- **Testnet Validator Minimum Stake**: 32 CLAYER\n- **Mainnet Validator Minimum Stake**: 100,000 CLAYER\n- **Delegator Minimum Stake**: 32 CLAYER\n- **Maximum Validators**: 21 (testnet), 10,000 (mainnet)\n- **Faucet Distribution**: 1 CLAYER per day per address\n\n## Validator Economics\n\n### Staking Requirements\n- **Testnet Validator Minimum Stake**: 32 CLAYER\n- **Mainnet Validator Minimum Stake**: 100,000 CLAYER\n- **Delegator Minimum Stake**: 32 CLAYER\n- **Maximum Validators**: 21 (testnet), 10,000 (mainnet)\n- **Staking Method**: Currently manual process\n- **Rewards**: CLAYER tokens from gas fees\n\n### Stake-Based Reward Distribution\nThe network distributes rewards based on proportional stake holdings:\n\n- **Gas Fee Collection**: All transaction fees paid in CLAYER\n- **Proportional Distribution**: Rewards distributed according to validator stake percentage\n- **Delegation Support**: Delegators share in validator rewards proportionally\n- **Economic Alignment**: Higher stake = higher reward share + higher security responsibility\n\n### Network Security\n- **Consensus**: Delegated Proof of Stake (DPoS)\n- **Security Model**: Stake-weighted consensus with economic penalties\n- **Minimum Validators**: 5 active validators for network security\n- **Maximum Validators**: 21 (testnet), 10,000 (mainnet)\n- **Economic Security**: Validators risk staked CLAYER for misbehavior\n\n## Fee Structure\n\n### Gas Economics\n- **Gas Price Calculation**: Standard Ethereum method (gas price × gas amount)\n- **Base Gas Price**: 0.000000001 CLAYER (1 Gwei)\n- **Minimum Gas Price**: 0.000021 CLAYER\n- **Fee Payment**: CLAYER tokens only\n- **Meta-Transaction Benefits**: Reduced effective costs for CLAYER holders\n\n### Fee Distribution Model\nCircle Layer implements a stake-weighted fee distribution system:\n\n- **Delegator Rewards**: 45% from gas fees (distributed by stake proportion)\n- **Validator Rewards**: 30% from gas fees (distributed by stake proportion)\n- **Burn Mechanism**: 25% from gas fees (deflationary pressure)\n- **Maximum Burn Limit**: 1,000,000 CLAYER (burning stops after this threshold)\n- **Proportional Allocation**: All distributions based on stake percentage\n\n### Meta-Transaction Gas Optimization\nAdvanced gas fee reduction mechanisms:\n\n- **CLAYER Holder Benefits**: Step-wise gas fee reduction for token holders\n- **Developer Cost Reduction**: Lower operational costs for dApp deployment\n- **User Experience Enhancement**: Reduced transaction costs improve adoption\n- **Network Efficiency**: Optimized resource utilization across the network\n\n## 🚧 Features in Development\n\n### Automated Staking System\nThe following tokenomics features are currently in development:\n\n**Smart Contract Staking**\n- Automated staking contracts (replacing manual process)\n- Smart contract-based delegation system\n- Automated reward distribution\n- Slashing conditions implementation\n\n**Enhanced Economics**\n- Dynamic fee structures\n- Advanced burn mechanisms\n- Governance token mechanics\n- Cross-chain token economics\n\n### Governance Integration\n- **On-chain Governance**: Voting and proposal systems in development\n- **Token-based Voting**: CLAYER-based governance rights\n- **Delegation Mechanisms**: Stake delegation for governance\n- **Treasury Management**: Community-controlled treasury\n\n## Network Operations\n\n### Current Testnet Metrics\n- **Network Uptime**: 99.95% (Last 30 days)\n- **Block Time**: 3 seconds\n- **Transaction Finality**: 1-3 seconds\n- **Energy Efficiency**: 99.9% less than Proof of Work\n- **Current TPS**: 2,000 (done)\n- **Target TPS**: 50,000 (in development)\n\n### Token Distribution (Testnet)\n- **Faucet**: Daily distribution of 1 CLAYER per address\n- **Treasury Wallet**: Distribution source for testnet tokens\n- **Validator Staking**: Manual 32 CLAYER requirement\n- **Delegator Staking**: Manual 32 CLAYER minimum\n- **Testing Supply**: 10 Billion CLAYER available for testing\n\n## Economic Incentives\n\n### Validator Incentives & Revenue Potential\n- **CLAYER Rewards**: Earned through block validation\n- **Network Security**: Stake-based security model\n- **Performance Requirements**: 24/7 uptime expectations\n- **Hardware Requirements**: Modest requirements (8GB RAM minimum)\n\n#### Expected Validator Revenue Streams\n1. **Block Rewards**: 2 CLAYER per block (base reward)\n   - Daily earnings: 8,640-12,000 CLAYER\n   - Uptime bonus: +20% for 99%+ availability\n   - Performance bonus: +15% for top quartile validators\n\n2. **Transaction Fee Revenue**: 30% share of network fees\n   - Conservative estimate: $50K-150K daily network fees\n   - Moderate estimate: $200K-600K daily network fees  \n   - Optimistic estimate: $1M+ daily network fees at peak adoption\n\n3. **Delegation Commission**: 5-15% from delegated stake\n   - Revenue scales with total delegated amount\n   - Competitive commission rates drive delegation\n   - Expected delegation: $500K-5M per validator at scale\n\n### Delegator Incentives\n- **Minimum Stake**: 32 CLAYER tokens\n- **Reward Share**: 45% of gas fees distributed to delegators\n- **No Hardware Required**: Pure stake-based participation\n- **Flexible Delegation**: Can delegate to any validator\n- **Governance Rights**: Participate in network decisions\n\n#### Annual Revenue Projections (Per Validator)\n- **Conservative Scenario**: 25,000-58,000 CLAYER ($25K-58K USD)\n- **Moderate Scenario**: 83,000-223,000 CLAYER ($83K-223K USD)\n- **Optimistic Scenario**: 328,000-1,342,000 CLAYER ($328K-1.34M USD)\n\n*Note: USD values assume $1/CLAYER price. Actual returns depend on network adoption, CLAYER price, and individual validator performance.*\n\n### Developer Incentives\n- **Free Testnet Tokens**: Daily faucet distribution\n- **Low Gas Costs**: Affordable testing environment\n- **Example Contracts**: Reference implementation at 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB\n- **Development Tools**: Full EVM compatibility\n\n## Future Economic Model\n\n### Planned Features\nThe following economic features are planned for future releases:\n\n**Enhanced Tokenomics**\n- Advanced staking mechanisms\n- Governance-based fee adjustments\n- Cross-chain economic models\n- Oracle-based pricing mechanisms\n\n**Ecosystem Growth**\n- DeFi protocol incentives\n- Developer grant programs\n- Community governance participation\n- Network effect economics\n\n### Migration Path\n- Current testnet economics provide testing ground\n- Lessons learned will inform mainnet economics\n- Community feedback integration\n- Security audit requirements\n\n## Integration Economics\n\n### For Developers\n- **Gas Costs**: Predictable CLAYER-based fees\n- **Testing**: Free testnet environment\n- **Tools**: Standard EVM development costs\n- **Migration**: Minimal costs from other EVM chains\n\n### For Users\n- **Transaction Costs**: Low CLAYER fees\n- **Wallet Setup**: Standard EVM wallet compatibility\n- **Token Acquisition**: Faucet for testing, future exchanges for mainnet\n- **Network Access**: Standard EVM interaction patterns",
    "frontmatter": {
      "sidebar_position": 2
    },
    "filePath": "governance/tokenomics.md",
    "category": "governance",
    "url": "/governance/tokenomics"
  },
  "intro": {
    "id": "intro",
    "title": "Welcome to Circle Layer",
    "content": "Welcome to Circle Layer Documentation\n  \n    Circle Layer is a high-performance, EVM-compatible, Proof of Stake Layer 1 blockchain designed to power the next generation of decentralized applications.\n  \n  \n  \n    \n      🚀 Get Started\n    \n    \n      🏗️ Build Now\n    \n  \n\n  \n    \n      3s\n      Block Time\n    \n    \n      1-3s\n      Finality\n    \n    \n      99.95%\n      Uptime\n    \n  \n\n  \n    \n  \n\n## 📈 Network Performance Metrics\n\n  \n    3s\n    Block Time\n    ⚡ Consistent\n  \n  \n  \n    1-3s\n    Finality\n    🚀 Ultra Fast\n  \n  \n  \n    99.95%\n    Uptime (30d)\n    🔒 Highly Reliable\n  \n  \n  \n    28525\n    Chain ID\n    🌐 Ready for Testing\n  \n\n## ✨ Key Features\n\n  \n    🚀\n    High Performance\n    2,000 TPS on testnet, targeting 50,000 TPS for mainnet\n    \n      2,000 TPS Testnet\n      50,000 TPS Target\n      3s Block Time\n    \n  \n  \n  \n    🔒\n    AI Security\n    Real-time smart contract auditing and threat detection\n    \n      Real-time Auditing\n      Threat Detection\n      Auto-Protection\n    \n  \n  \n  \n    ⚡\n    EVM Compatible\n    Seamless migration from Ethereum\n    \n      Solidity Ready\n      Web3.js Support\n      Metamask Compatible\n    \n  \n  \n  \n    🌱\n    Energy Efficient\n    Proof of Stake consensus mechanism\n    \n      99.9% Less Energy\n      PoS Consensus\n      Eco-Friendly\n    \n  \n\n## 🔥 Why Choose Circle Layer?\n\n  \n    \n### Lightning-Fast Transactions\n\nCode example:\ngraph LR\n    A[Transaction Submitted] -->|under 1s| B[Validated]\n    B -->|2-5s| C[Block Included]  \n    C -->|under 10s| D[Finalized]\n\n#### Target Performance Metrics\n\n  \n    50,000+\n    🎯 Target TPS\n  \n  \n    &lt; 1s\n    ⚡ Finality\n  \n  \n    99.9%\n    🌱 Energy Efficient\n  \n\n  \n    🎯 Our Target\n    \n      \n        ⚡ 50,000+ TPS\n        Target Speed\n      \n      \n        ⏱️ Under 1s\n        Finality\n      \n      \n        🌱 99.9%\n        Less Energy\n      \n      \n        Circle Layer\n        Blockchain\n      \n    \n  \n  \n  \n    📊 vs EVM L1 Competition:\n  \n  \n  \n    \n      Polygon\n      7,000 TPS\n    \n    \n    \n      BSC\n      300 TPS\n    \n    \n    \n      Avalanche\n      4,500 TPS\n    \n    \n    \n      Ethereum\n      15 TPS\n    \n  \n\n  \n    \n    \n    \n    \n  \n  \n    \n      Blockchain\n      TPS\n      Finality\n      Energy Usage\n    \n  \n  \n    \n      Circle Layer (Mainnet Target)\n      50,000+ 🎯\n      under 1s\n      99.9% less\n    \n    \n      Circle Layer (Testnet Development)\n      2,000\n      1-3s\n      99.9% less\n    \n    \n      Polygon\n      7,000\n      2-3s\n      Medium\n    \n    \n      BSC\n      300\n      3s\n      Medium\n    \n    \n      Avalanche\n      4,500\n      1-2s\n      Low\n    \n    \n      Ethereum\n      15\n      6-10min\n      High\n    \n  \n\n  \n    🚧 Development Roadmap - Phase 1\n    Target: 50,000 TPS (In Development)\n  \n\n  \n    \n      \n        🔬\n        How We'll Achieve 50,000 TPS\n      \n      \n      \n        \n          ⚡\n          \n            Parallel Transaction Processing\n            Multi-threaded execution for maximum throughput\n          \n        \n        \n        \n          🔄\n          \n            Optimized Consensus\n            Enhanced PoS with instant finality\n          \n        \n        \n        \n          🚀\n          \n            State Sharding\n            Horizontal scaling architecture\n          \n        \n        \n        \n          🎯\n          \n            EVM Optimization\n            Custom bytecode improvements\n          \n        \n      \n      \n      \n        📊\n        Status: In development - Building comprehensive ecosystem before mainnet\n      \n    \n  \n\n  \n  \n  \n    \n### AI-Powered Security Suite\n\nCode example:\nflowchart TD\n    A[Smart Contract Deployed] --> B[AI Scanner]\n    B --> C{Vulnerabilities Found?}\n    C -->|Yes| D[Alert & Block]\n    C -->|No| E[Deploy to Network]\n    D --> F[Developer Notification]\n    F --> G[Fix Required]\n    E --> H[Continuous Monitoring]\n\n**Security Features:**\n\n  🤖 Real-time AI auditing\n  🛡️ Automated threat detection\n  ⚠️ Smart contract vulnerability scanning\n  🔔 Instant security alerts\n\n  \n  \n  \n    \n### Growing Ecosystem\n\nPhase 3 Targets\n\n*Projected ecosystem growth before mainnet launch*\n\n  \n    150+\n    Target Validators\n  \n  \n    25+\n    DApps in Development\n  \n  \n    Growing\n    Community Target\n  \n\n**Supported Tools & Frameworks:**\n\n  🔧 Hardhat, Truffle, Remix\n  🌐 Web3.js, Ethers.js\n  💼 MetaMask, WalletConnect\n  📊 The Graph, OpenZeppelin\n\n  \n\n## 🚀 Quick Start\n\n  \n    \n      🏗️ Developers\n      Easy\n    \n    Start building on Circle Layer\n    \n      Setup wallet\n      Get testnet tokens\n      Deploy contract\n    \n    \n      Build Now →\n    \n  \n  \n  \n    \n      🎯 Validators\n      Medium\n    \n    Secure the network and earn rewards\n    \n      Up to 8% APY\n      Network rewards\n    \n    \n      Become a Validator →\n    \n  \n  \n  \n    \n      👥 Community\n      Beginner\n    \n    Join our growing ecosystem\n    \n      Active Telegram community\n      Growing Twitter following\n    \n    \n      Get Involved →\n    \n  \n\n## 🏗️ Architecture Overview\n\nCircle Layer's innovative architecture combines proven blockchain technology with cutting-edge AI security:\n\nCode example:\ngraph TB\n    subgraph \"Circle Layer Architecture\"\n        A[Application Layer] --> B[Consensus Layer]\n        B --> C[AI Security Layer] \n        C --> D[Network Layer]\n        \n        A --> E[Smart Contracts]\n        A --> F[DApps]\n        A --> G[APIs & SDKs]\n        \n        B --> H[PoS Consensus]\n        B --> I[Validator Network]\n        B --> J[Block Production]\n        \n        C --> K[Real-time Auditing]\n        C --> L[Threat Detection]\n        C --> M[Auto-Protection]\n        \n        D --> N[P2P Network]\n        D --> O[RPC Endpoints]\n        D --> P[Cross-chain Bridges]\n    end\n\n## 🚧 Development Roadmap\n\nCircle Layer is building a comprehensive blockchain ecosystem through strategic phases:\n\n  \n    🚀 Phase 1: Token Launch & Core Infrastructure\n    \n      ERC20 token launch for community building\n      Community-driven development approach\n      2,000 TPS testnet development\n      DPoS consensus implementation\n      Validator network establishment\n    \n  \n  \n  \n    🌉 Phase 2: Ecosystem Expansion\n    \n      Native Bridge & DEX (4 trading pairs)\n      iOS/Android wallet development\n      Agentic AI security layer\n      Startup onboarding & hackathons\n      50,000 TPS optimization\n    \n  \n  \n  \n    🎯 Phase 3: Mainnet Launch\n    \n      Genesis launch with 21 validators\n      Token migration to native chain\n      Gradual scaling to 50,000 TPS\n      DeFi infrastructure activation\n      Mobile wallet deployment\n    \n  \n  \n  \n    🌍 Phase 4: Global Expansion\n    \n      Top 10 blockchain by innovation & adoption\n      10M+ active users globally\n      100,000+ TPS performance\n      Enterprise & institutional adoption\n    \n  \n\n## 📚 What's Next?\n\n  \n    Step 1\n    Set Up Your Wallet\n    Configure MetaMask for Circle Layer testnet\n    Start Here →\n  \n  \n  \n    Step 2\n    Explore Architecture\n    Deep dive into our consensus mechanism\n    Learn More →\n  \n  \n  \n    Step 3\n    Join Community\n    Connect with developers and validators\n    Connect →\n  \n\n  🌟 Ready to build the future? Circle Layer provides the perfect foundation for your next-generation dApp.",
    "frontmatter": {
      "slug": "/",
      "title": "Welcome to Circle Layer",
      "hide_title": true,
      "description": "Circle Layer is a high-performance, EVM-compatible, Proof of Stake Layer 1 blockchain with AI security features."
    },
    "filePath": "intro.mdx",
    "category": "general",
    "url": "/"
  },
  "introduction-key-features": {
    "id": "introduction-key-features",
    "title": "Key Features",
    "content": "# Key Features\n\nCircle Layer offers a comprehensive suite of features designed to meet the needs of modern blockchain applications and users. Our platform combines cutting-edge technology with user-friendly design to create a powerful and accessible blockchain ecosystem.\n\n## Current Network Features\n\n### Target Network Performance\n- **Block Time**: 3 seconds (actual performance)\n- **Transaction Finality**: 1-3 seconds (actual performance)\n- **Network Uptime**: 99.95% (Last 30 days)\n- **Chain ID**: 28525\n- **Currency**: CLAYER tokens\n\n### Network Infrastructure\n*Configuration for testnet deployment:*\n\n- **RPC Endpoint**: https://testnet-rpc.circlelayer.com\n- **WebSocket**: wss://testnet-rpc.circlelayer.com\n- **Block Explorer**: https://explorer-testnet.circlelayer.com\n- **Faucet**: https://faucet.circlelayer.com\n- **Faucet API**: https://faucet-api.circlelayer.com\n\n### Cost Efficiency\n- **Minimum Gas Price**: 0.000021 CLAYER\n- **Block Gas Limit**: 10,000,000,000,000 per block\n- **Gas Calculation**: Standard Ethereum method (gas price × gas amount)\n- **Energy Efficient**: 99.9% less energy than Proof of Work\n\n## Technical Features\n\n### EVM Compatibility\n- **Full Compatibility**: Same as other EVM blockchains\n- **Standard Integration**: Works with Web3.js, Ethers.js\n- **Existing Tools**: Compatible with Hardhat, Truffle, Remix\n- **Seamless Migration**: Standard EVM integration patterns\n\n### Security Features\n- **DPoS Consensus**: Delegated Proof of Stake security model\n- **Validator Network**: Minimum 5 active validators required\n- **Staking Requirements**: 100,000 CLAYER minimum stake\n- **Burn Mechanism**: 25% from gas fees (maximum 1,000,000 CLAYER)\n\n### Developer Tools\n- **API Endpoints**: REST and GraphQL available\n- **Example Contract**: 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB\n- **Integration Guides**: Web3.js, Ethers.js, React, Vue.js\n- **Development Frameworks**: Hardhat, Truffle support\n\n## User Features\n\n### Wallet Integration\n- **MetaMask**: Recommended with testnet configuration\n- **WalletConnect**: Register and follow their guidelines\n- **Custom Wallets**: Same as EVM integration\n- **Mobile Wallets**: Same as EVM integration\n\n### Network Access\n- **Network Status**: Development & testing phase\n- **Faucet**: https://faucet.circlelayer.com (1 CLAYER per day)\n- **Block Explorer**: https://explorer-testnet.circlelayer.com - Real-time transaction tracking\n- **Network Monitoring**: 99.95% uptime target\n\n### Documentation\n- **Comprehensive Guides**: Complete setup and development docs\n- **API References**: REST and GraphQL documentation\n- **Integration Examples**: Web3, React, Vue.js examples\n- **Best Practices**: EVM development standards\n\n## Current vs Future Comparison\n\n| Feature | Current Testnet | In Development |\n|---------|-----------------|----------------|\n| Block Time | 3s | Optimized |\n| Finality | 1-3s | Enhanced |\n| Consensus | DPoS | Advanced DPoS |\n| Staking | Manual | Smart Contracts |\n| Governance | Manual | On-chain |\n| Bridges | N/A | Cross-chain |\n| Oracles | N/A | Decentralized |\n\n  \n    Current vs Future Comparison\n  \n  \n  \n    \n      \n        Block Time\n      \n      \n        \n          Current Testnet\n          3s\n        \n        \n          In Development\n          Optimized\n        \n      \n    \n    \n    \n      \n        Finality\n      \n      \n        \n          Current Testnet\n          1-3s\n        \n        \n          In Development\n          Enhanced\n        \n      \n    \n    \n    \n      \n        Consensus\n      \n      \n        \n          Current Testnet\n          DPoS\n        \n        \n          In Development\n          Advanced DPoS\n        \n      \n    \n    \n    \n      \n        Staking\n      \n      \n        \n          Current Testnet\n          Manual\n        \n        \n          In Development\n          Smart Contracts\n        \n      \n    \n    \n    \n      \n        Governance\n      \n      \n        \n          Current Testnet\n          Manual\n        \n        \n          In Development\n          On-chain\n        \n      \n    \n    \n    \n      \n        Bridges\n      \n      \n        \n          Current Testnet\n          N/A\n        \n        \n          In Development\n          Cross-chain\n        \n      \n    \n    \n    \n      \n        Oracles\n      \n      \n        \n          Current Testnet\n          N/A\n        \n        \n          In Development\n          Decentralized\n        \n      \n    \n  \n\n## Network Comparison\n\n| Feature | Circle Layer | Ethereum | Polygon | BSC |\n|---------|--------------|----------|---------|-----|\n| Block Time | 3s | 12s | 2s | 3s |\n| Finality | 1-3s | 6-10min | 2-3s | 3s |\n| Consensus | DPoS | PoW→PoS | PoS | PoA |\n| EVM Compatible | Yes | Native | Yes | Yes |\n| Gas Fees | Low (CLAYER) | High (ETH) | Low (MATIC) | Low (BNB) |\n| Chain ID | 28525 | 1 | 137 | 56 |\n\n  \n    Network Comparison\n  \n  \n  \n    \n      Circle Layer\n      Our Network\n    \n    \n      \n        Block Time\n        3s\n      \n      \n        Finality\n        1-3s\n      \n      \n        Consensus\n        DPoS\n      \n      \n        EVM Compatible\n        Yes\n      \n      \n        Gas Fees\n        Low (CLAYER)\n      \n      \n        Chain ID\n        28525\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Block Time\n        12s\n      \n      \n        Finality\n        6-10min\n      \n      \n        Consensus\n        PoW→PoS\n      \n      \n        EVM Compatible\n        Native\n      \n      \n        Gas Fees\n        High (ETH)\n      \n      \n        Chain ID\n        1\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Block Time\n        2s\n      \n      \n        Finality\n        2-3s\n      \n      \n        Consensus\n        PoS\n      \n      \n        EVM Compatible\n        Yes\n      \n      \n        Gas Fees\n        Low (MATIC)\n      \n      \n        Chain ID\n        137\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Block Time\n        3s\n      \n      \n        Finality\n        3s\n      \n      \n        Consensus\n        PoA\n      \n      \n        EVM Compatible\n        Yes\n      \n      \n        Gas Fees\n        Low (BNB)\n      \n      \n        Chain ID\n        56\n      \n    \n  \n\n## 🚧 Features in Development\n\n### Smart Contract Infrastructure\n- **Automated Staking**: Smart contract-based validator staking\n- **Governance System**: On-chain voting and proposals\n- **Bridge Contracts**: Cross-chain interoperability\n- **Oracle Network**: Decentralized data feeds\n\n### Network Enhancements\n- **Status Dashboard**: Real-time network monitoring\n- **Analytics Platform**: Advanced network metrics\n- **Alert System**: Automated monitoring and notifications\n- **Enhanced APIs**: Advanced rate limiting and features\n\n## Development Roadmap\n\n### Current Phase: Development & Testing ✅\n- ✅ Core network functionality in testing\n- ✅ DPoS consensus implemented\n- ✅ Developer tools in development\n- ✅ Community engagement building\n\n### Next Phase: Enhanced Features 🚧\n- 🚧 Smart contract infrastructure\n- 🚧 Advanced monitoring systems\n- 🚧 Governance implementation\n- 🚧 Cross-chain capabilities\n\n### Future Phase: Ecosystem Growth 📋\n- 📋 Advanced developer tools\n- 📋 Partner integrations\n- 📋 Community incentives\n- 📋 Performance optimizations",
    "frontmatter": {
      "id": "key-features",
      "title": "Key Features",
      "sidebar_label": "Key Features"
    },
    "filePath": "introduction/key-features.md",
    "category": "introduction",
    "url": "/introduction/key-features"
  },
  "introduction-use-cases": {
    "id": "introduction-use-cases",
    "title": "Use Cases",
    "content": "# Use Cases\n\nCircle Layer's architecture and features make it ideal for various blockchain applications and use cases. Our high throughput, low latency, and AI security features enable innovative solutions across multiple industries.\n\n## DeFi Applications\n\n### Decentralized Exchanges (DEXs)\n- High-frequency trading support\n- Low-latency order matching\n- Cost-effective transactions\n- Secure smart contracts\n\n### Lending Platforms\n- Real-time interest calculations\n- Automated liquidations\n- Collateral management\n- Risk assessment\n\n### Yield Farming\n- Efficient reward distribution\n- Automated compounding\n- Multi-pool strategies\n- Risk management\n\n### Stablecoins\n- Fast minting and burning\n- Efficient price stability\n- Collateral management\n- Cross-chain compatibility\n\n## NFT Marketplaces\n\n### Digital Art\n- High-resolution asset storage\n- Royalty management\n- Marketplace integration\n- Creator tools\n\n### Gaming Assets\n- In-game item trading\n- Asset interoperability\n- Play-to-earn mechanics\n- Virtual economies\n\n### Collectibles\n- Digital collectible trading\n- Rarity verification\n- Collection management\n- Trading tools\n\n## Enterprise Solutions\n\n### Supply Chain\n- Real-time tracking\n- Asset verification\n- Document management\n- Compliance tracking\n\n### Identity Management\n- KYC/AML integration\n- Credential verification\n- Access control\n- Privacy protection\n\n### Data Verification\n- Document authentication\n- Data integrity\n- Timestamp verification\n- Audit trails\n\n## Gaming Applications\n\n### In-Game Assets\n- Asset ownership\n- Trading systems\n- Inventory management\n- Cross-game compatibility\n\n### Virtual Economies\n- Token economics\n- Marketplace systems\n- Reward mechanisms\n- Player incentives\n\n### Play-to-Earn\n- Reward distribution\n- Achievement tracking\n- Player progression\n- Economic balance\n\n## Social Platforms\n\n### Decentralized Social Networks\n- Content ownership\n- Reward distribution\n- Community governance\n- Privacy features\n\n### Content Platforms\n- Creator monetization\n- Content distribution\n- Rights management\n- Community engagement\n\n## Cross-chain Applications\n\n### Bridges\n- Asset transfer\n- Message passing\n- State synchronization\n- Security verification\n\n### Interoperable Solutions\n- Cross-chain DeFi\n- Multi-chain assets\n- Unified interfaces\n- Protocol integration\n\n## Technical Requirements\n\n### Performance Needs\n- High throughput (2,000-50,000 TPS)\n- Low latency (&lt;10s finality)\n- Cost efficiency\n- Scalability\n\n### Security Requirements\n- AI-powered auditing\n- Real-time monitoring\n- Threat prevention\n- Compliance support\n\n### Development Support\n- EVM compatibility\n- Comprehensive SDK\n- API integration\n- Testing tools",
    "frontmatter": {
      "id": "use-cases",
      "title": "Use Cases",
      "sidebar_label": "Use Cases"
    },
    "filePath": "introduction/use-cases.md",
    "category": "introduction",
    "url": "/introduction/use-cases"
  },
  "introduction-what-is-circle-layer": {
    "id": "introduction-what-is-circle-layer",
    "title": "What is Circle Layer?",
    "content": "# What is Circle Layer?\n\nCircle Layer is a high-performance, EVM-compatible, Delegated Proof of Stake (DPoS) Layer 1 blockchain designed to power decentralized applications with low fees, fast transactions, and exceptional scalability. We're building a comprehensive ecosystem through strategic development phases, focusing on thorough testing and security before mainnet launch.\n\n## Core Technology\n\nCircle Layer combines several cutting-edge technologies to deliver a superior blockchain experience:\n\n- **EVM Compatibility**: Full compatibility with Ethereum's virtual machine, allowing seamless migration of existing dApps\n- **Delegated Proof of Stake (DPoS)**: Energy-efficient consensus mechanism with enhanced security\n- **Standard EVM Security**: Proven security implementations across the network\n- **Fast Performance**: 3-second block time with 1-3 second finality\n- **Low Energy Usage**: 99.9% less energy consumption than Proof of Work\n\n## Development Strategy\n\n### Our Approach: Building Before Launching\nCircle Layer follows a strategic 3-phase development approach:\n\n**Phase 1: Core Infrastructure** (Current)\n- 2,000 TPS testnet development\n- DPoS consensus implementation\n- EVM compatibility & developer tools\n\n**Phase 2: Ecosystem Expansion**\n- Native Bridge & DEX (4 trading pairs)\n- iOS/Android wallets\n- **Agentic AI security layer** (in development)\n- 50,000 TPS optimization\n\n**Phase 3: Mainnet Launch**\n- Complete ecosystem development\n- Security battle-tested\n- Production-ready performance\n\n## Key Differentiators\n\n### Performance Targets\n- **Testnet Target**: 2,000 TPS with 3-second blocks\n- **Mainnet Goal**: 50,000 TPS with sub-second finality\n- **Development Status**: Building comprehensive ecosystem\n- **Gas Efficiency**: Ultra-low fees with CLAYER token\n\n### Security\n- **DPoS Consensus**: Delegated Proof of Stake security model\n- **Validator Requirements**: Minimum 5 active validators for network security\n- **Staking**: 100,000 CLAYER minimum stake requirement\n- **Burn Mechanism**: 25% from gas fees (maximum 1,000,000 CLAYER)\n\n### Developer Experience\n- **Full EVM Compatibility**: Same as other EVM blockchains\n- **Standard Integration**: Works with Web3.js, Ethers.js, and existing tools\n- **MetaMask Support**: Easy wallet configuration\n- **Example Contracts**: 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB\n\n## Future Ecosystem\n\nCircle Layer is designed to support a comprehensive blockchain ecosystem:\n\n1. **Native DeFi Infrastructure**\n   - Built-in DEX with 4 major trading pairs\n   - Cross-chain bridge architecture\n   - Yield farming and liquidity protocols\n   - Advanced trading features\n\n2. **Developer-First Platform**\n   - Full EVM compatibility for easy migration\n   - Comprehensive SDK and API suite\n   - **AI-powered security auditing tools** (Phase 2)\n   - Performance optimization frameworks\n\n3. **User Experience Focus**\n   - Native iOS and Android wallets\n   - Seamless onboarding flows\n   - Instant transaction confirmations\n   - Multi-chain support integration\n\n4. **Enterprise & Startup Ecosystem**\n   - Dedicated startup onboarding programs\n   - Enterprise blockchain solutions\n   - Grant programs and hackathon sponsorships\n   - Technical partnership opportunities\n\n## Network Architecture\n\nCode example:\n┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐\n│  Application    │     │  DPoS Consensus │     │  EVM Security   │\n│    Layer        │────▶│    Layer        │────▶│    Layer        │\n└─────────────────┘     └─────────────────┘     └─────────────────┘\n        │                       │                       │\n        ▼                       ▼                       ▼\n┌─────────────────────────────────────────────────────────────┐\n│                  Testnet Network Layer                      │\n└─────────────────────────────────────────────────────────────┘\n\n## 🚧 Features in Development\n\nThe following features are currently being developed:\n\n### Smart Contract Infrastructure\n- Automated staking contracts (currently manual process)\n- On-chain governance system\n- Cross-chain bridge contracts\n- Decentralized oracle network\n\n### Network Monitoring\n- Real-time status dashboard\n- Advanced analytics platform\n- Automated alert system\n- Enhanced API features\n\n## Getting Started\n\nTo begin using Circle Layer testnet:\n\n1. [Set up a compatible wallet](/getting-started/set-up-wallet)\n2. [Connect to the testnet](/getting-started/connect-testnet)\n3. [Obtain test tokens from the faucet](/getting-started/use-faucet)\n4. Start building or using applications\n\nFor detailed instructions, refer to the [Getting Started](/getting-started/set-up-wallet) section.",
    "frontmatter": {
      "id": "what-is-circle-layer",
      "title": "What is Circle Layer?",
      "sidebar_label": "What is Circle Layer?"
    },
    "filePath": "introduction/what-is-circle-layer.md",
    "category": "introduction",
    "url": "/introduction/what-is-circle-layer"
  },
  "nodes-validation-becoming-validator": {
    "id": "nodes-validation-becoming-validator",
    "title": "Becoming a Validator",
    "content": "# Becoming a Validator\n\n## Overview\n\nLearn how to become a validator on Circle Layer and help secure the network.\n\n## Requirements\n\n### 1. Hardware Requirements\n- **Operating System**: Ubuntu >= 20.04 LTS\n- **RAM**: 8GB minimum, 32GB recommended\n- **Persistent Storage**: 25GB minimum, 100GB high-speed SSD recommended\n- **Network**: 100Mbps+\n\n### 2. Software Requirements\n- Linux OS (Ubuntu 20.04+)\n- Docker\n- Circle Layer Node Software\n- Monitoring Tools\n\n### 3. Token Requirements\n- **Testnet Minimum Stake**: 32 CLAYER\n- **Mainnet Minimum Stake**: 100,000 CLAYER\n- Additional for operations\n- Emergency fund\n\n### 4. Network Requirements\n\n#### Port Configuration\nCircle Layer validators require specific ports to be open and properly configured:\n\nCode example:\n# Required Validator Ports\n# Port 32668 - Validator P2P communication\n# Port 32669 - Validator consensus protocol\n# Port 8545  - JSON-RPC endpoint (EVM compatibility)\n# Port 6060  - pprof profiling endpoint\n# Port 80    - HTTP endpoint (web interface)\n# Port 22    - SSH access (remote management)\n\n# Configure firewall for validator\nsudo ufw allow 32668/tcp comment 'Validator P2P'\nsudo ufw allow 32669/tcp comment 'Validator Consensus'\nsudo ufw allow 8545/tcp comment 'JSON-RPC'\nsudo ufw allow 6060/tcp comment 'pprof Profiling'\nsudo ufw allow 80/tcp comment 'HTTP Interface'\nsudo ufw allow 22/tcp comment 'SSH Access'\nsudo ufw enable\n\n#### Network Specifications\n- **Firewall**: Custom configuration required (not disabled)\n- **Minimum Active Validators**: 5 validators required for security and active blockchain\n- **Maximum Active Validators**: 21 (testnet), 10,000 (mainnet)\n- **Multiple RPC**: Required for redundancy and high availability\n- **Network Latency**: Under 100ms to other validators\n- **Bandwidth**: Minimum 1Gbps for validators\n- **Connection Limits**: Support 10,000+ concurrent connections\n\n## Economic Parameters\n\n### Gas & Fees\n- **Base Gas Price**: 0.000000001 CLAYER (1 Gwei)\n- **Gas Limit**: 10,000,000,000,000 per block\n- **Fee Calculation**: gas price × gas amount (Ethereum standard method)\n\n### Validator Rewards\n- **Reward Token**: CLAYER\n- **Fee Share**: 30% of gas fees\n- **Burn Mechanism**: 25% from gas fees (maximum limit 1,000,000 CLAYER)\n- **Delegator Share**: 45% of gas fees\n\n## Security Features\n\n### Current Implementation\n- **Security Model**: Standard EVM security applied\n- **Consensus**: DPoS (Delegated Proof of Stake)\n- **Minimum Validators**: 5 validators active required for security\n- **Maximum Validators**: 21 (testnet), 10,000 (mainnet)\n\n## Setup Process\n\n### 1. Initial Setup\n\nCode example:\n# Install dependencies\nsudo apt update\nsudo apt install -y docker.io\n\n# Pull node image\ndocker pull circlelayer/node:latest\n\n# Create config\nmkdir -p ~/.circlelayer\n\n### 2. Node Configuration\n\nCode example:\n# config.yaml\nnetwork: testnet\nport: 32668\nrpc_port: 8545\nvalidator_key: \"your-key\"\nstake_amount: 32\nchain_id: 28525\n\n### 3. Start Node\n\nCode example:\ndocker run -d \\\n  --name circlelayer-node \\\n  -p 32668:32668 \\\n  -p 8545:8545 \\\n  -v ~/.circlelayer:/root/.circlelayer \\\n  circlelayer/node:latest\n\n## Monitoring\n\n### 1. Node Status\n\nCode example:\n# Check node status\ncirclelayer status\n\n# View logs\ndocker logs circlelayer-node\n\n### 2. Performance Metrics\n- CPU usage\n- Memory usage\n- Network traffic\n- Block production (every 3 seconds)\n\n### 3. Maintenance\n- **Maintenance Schedules**: Depends on server provider requirements\n- **Network Uptime**: 99.95% (Last 30 days)\n\n## 🚧 Advanced Features in Development\n\nThe following validator-related features are currently in development:\n\n### Smart Contract Infrastructure\n- **Automated Staking Contract**: Smart contract-based staking system (currently manual process)\n- **Governance System**: On-chain validator governance and voting mechanisms\n- **Advanced Monitoring**: Real-time validator performance dashboards\n\n### Network Infrastructure\n- **Status Page**: Public network status and validator performance tracking\n- **Alert System**: Automated validator monitoring and alert notifications\n- **Analytics Dashboard**: Comprehensive validator metrics and insights\n\n## Best Practices\n\n### 1. Security\n- Configure required ports (ports 32668, 32669, 8545, 6060, 80, 22)\n- Regular updates\n- Backup keys\n- Monitor logs\n\n### 2. Performance\n- Use recommended hardware specifications\n- Regular maintenance\n- Monitor metrics\n- Update software\n\n### 3. Operations\n- 24/7 monitoring\n- Regular backups\n- Emergency procedures\n- Community support",
    "frontmatter": {
      "sidebar_position": 1
    },
    "filePath": "nodes-validation/becoming-validator.md",
    "category": "nodes-validation",
    "url": "/nodes-validation/becoming-validator"
  },
  "nodes-validation-node-monitoring": {
    "id": "nodes-validation-node-monitoring",
    "title": "Node Monitoring",
    "content": "# Node Monitoring\n\n## Overview\n\nLearn how to monitor your Circle Layer node effectively.\n\n## Monitoring Setup\n\n### 1. Basic Monitoring\n\nCode example:\n# Check node status\ncirclelayer status\n\n# View logs\ntail -f ~/.circlelayer/logs/node.log\n\n# Check resource usage\nhtop\n\nCode example:\n\nCode example:\n\n### 2. Prometheus Setup\n\nCode example:\n\nCode example:\n# prometheus.yml\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'circlelayer'\n    static_configs:\n      - targets: ['localhost:26660']\n\nCode example:\n\nCode example:\n\n### 3. Grafana Dashboard\n\nCode example:\n\nCode example:\n{\n  \"dashboard\": {\n    \"panels\": [\n      {\n        \"title\": \"Node Status\",\n        \"type\": \"stat\",\n        \"targets\": [\n          {\n            \"expr\": \"circlelayer_node_status\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Resource Usage\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"node_cpu_seconds_total\"\n          }\n        ]\n      }\n    ]\n  }\n}\n\nCode example:\n\nCode example:\n\n## Key Metrics\n\n### 1. Node Health\n- Sync status\n- Block height\n- Validator status\n- Peer count\n\n### 2. Performance\n- CPU usage\n- Memory usage\n- Disk I/O\n- Network traffic\n\n### 3. Network\n- Peer connections\n- Block propagation\n- Transaction throughput\n- Gas usage\n\n## Alerting\n\n### 1. Alert Rules\n\nCode example:\n\nCode example:\n# alert-rules.yml\ngroups:\n  - name: node_alerts\n    rules:\n      - alert: NodeDown\n        expr: circlelayer_node_status == 0\n        for: 5m\n        labels:\n          severity: critical\n      \n      - alert: HighCPU\n        expr: node_cpu_seconds_total > 80\n        for: 5m\n        labels:\n          severity: warning\n\nCode example:\n\nCode example:\n\n### 2. Notification Channels\n- Email\n- Slack\n- Telegram\n- PagerDuty\n\n### 3. Alert Management\n- Severity levels\n- Response procedures\n- Escalation paths\n- Documentation\n\n## Logging\n\n### 1. Log Configuration\n\nCode example:\n\nCode example:\n# log-config.yml\nlogging:\n  level: info\n  format: json\n  output: file\n  path: /var/log/circlelayer/node.log\n\nCode example:\n\nCode example:\n\n### 2. Log Analysis\n- Error tracking\n- Performance analysis\n- Security monitoring\n- Usage patterns\n\n### 3. Log Management\n- Rotation\n- Retention\n- Backup\n- Archival\n\n## Maintenance\n\n### 1. Regular Checks\n- Metric review\n- Alert testing\n- Log analysis\n- System health\n\n### 2. Optimization\n- Resource tuning\n- Performance optimization\n- Alert refinement\n- Log management\n\n### 3. Documentation\n- Monitoring setup\n- Alert procedures\n- Response plans\n- Maintenance logs",
    "frontmatter": {
      "sidebar_position": 4
    },
    "filePath": "nodes-validation/node-monitoring.md",
    "category": "nodes-validation",
    "url": "/nodes-validation/node-monitoring"
  },
  "nodes-validation-node-security": {
    "id": "nodes-validation-node-security",
    "title": "Node Security",
    "content": "# Node Security\n\n## Overview\n\nLearn about security best practices for running Circle Layer nodes.\n\n## Security Fundamentals\n\n### 1. System Security\n- Regular updates\n- Firewall configuration\n- Access control\n- Resource limits\n\n### 2. Network Security\n- DDoS protection\n- Rate limiting\n- Port security\n- VPN usage\n\n### 3. Application Security\n- Secure configuration\n- Access management\n- Key security\n- Monitoring\n\n## Implementation\n\n### 1. System Hardening\n\nCode example:\n# Update system\nsudo apt update\nsudo apt upgrade -y\n\n# Configure firewall\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow 26656/tcp\nsudo ufw enable\n\nCode example:\n\nCode example:\n\n### 2. Access Control\n\nCode example:\n\nCode example:\n# Create service user\nsudo useradd -m -s /bin/bash circlelayer\nsudo usermod -aG docker circlelayer\n\n# Set permissions\nsudo chown -R circlelayer:circlelayer ~/.circlelayer\n\nCode example:\n\nCode example:\n\n### 3. Monitoring Setup\n\nCode example:\n\nCode example:\n# security-monitor.yml\nalerts:\n  - name: unauthorized_access\n    condition: \"failed_login_attempts > 3\"\n    action: \"block_ip\"\n  \n  - name: resource_abuse\n    condition: \"cpu_usage > 90%\"\n    action: \"notify_admin\"\n\nCode example:\n\nCode example:\n\n## Best Practices\n\n### 1. Key Management\n- Secure storage\n- Regular rotation\n- Backup procedures\n- Access control\n\n### 2. Network Protection\n- Use VPN\n- Enable TLS\n- Rate limiting\n- DDoS protection\n\n### 3. Monitoring\n- Log analysis\n- Alert system\n- Performance monitoring\n- Security scanning\n\n## Incident Response\n\n### 1. Detection\n- Monitor logs\n- Check metrics\n- Review alerts\n- Analyze patterns\n\n### 2. Response\n- Isolate node\n- Block threats\n- Update security\n- Notify team\n\n### 3. Recovery\n- Restore backup\n- Update systems\n- Review logs\n- Document incident\n\n## Maintenance\n\n### 1. Regular Tasks\n- Update software\n- Check logs\n- Review access\n- Test backups\n\n### 2. Security Audits\n- System scan\n- Config review\n- Access audit\n- Update policies\n\n### 3. Documentation\n- Security procedures\n- Incident reports\n- Update logs\n- Policy changes",
    "frontmatter": {
      "sidebar_position": 3
    },
    "filePath": "nodes-validation/node-security.md",
    "category": "nodes-validation",
    "url": "/nodes-validation/node-security"
  },
  "nodes-validation-running-full-node": {
    "id": "nodes-validation-running-full-node",
    "title": "Running a Full Node",
    "content": "# Running a Full Node\n\n## Overview\n\nLearn how to run a full node on Circle Layer to participate in the network.\n\n## Prerequisites\n\n### 1. System Requirements\n- CPU: 4+ cores\n- RAM: 16GB+\n- Storage: 500GB+ SSD\n- Network: 50Mbps+\n\n### 2. Software Requirements\n- Linux OS (Ubuntu 20.04+)\n- Docker\n- Circle Layer Node Software\n- Basic monitoring tools\n\n### 3. Network Requirements\n- Static IP\n- Open ports:\n  - 26656 (P2P)\n  - 26657 (RPC)\n  - 26658 (API)\n\n## Installation\n\n### 1. System Setup\n\nCode example:\n# Update system\nsudo apt update\nsudo apt upgrade -y\n\n# Install dependencies\nsudo apt install -y docker.io\nsudo systemctl enable docker\n\nCode example:\n\nCode example:\n\n### 2. Node Installation\n\nCode example:\n\nCode example:\n# Create directory\nmkdir -p ~/.circlelayer\n\n# Download node software\ncurl -sSL https://get.circlelayer.com | bash\n\n# Initialize node\ncirclelayer init --chain-id circlelayer-1\n\nCode example:\n\nCode example:\n\n### 3. Configuration\n\n#### Detailed Port Configuration\nCircle Layer requires specific ports to be open and properly configured:\n\nbash\n# Required Ports for Circle Layer Node\n# 26656 - P2P communication between nodes\n# 26657 - RPC endpoint for client connections  \n# 26658 - API endpoint for REST queries\n# 26659 - gRPC endpoint (optional)\n# 26660 - Prometheus metrics (optional)\n\n# Open required ports\nsudo ufw allow 26656/tcp comment 'Circle Layer P2P'\nsudo ufw allow 26657/tcp comment 'Circle Layer RPC'\nsudo ufw allow 26658/tcp comment 'Circle Layer API'\nsudo ufw allow 26659/tcp comment 'Circle Layer gRPC'\nsudo ufw allow 26660/tcp comment 'Circle Layer Metrics'\n\nCode example:\n\n#### config.toml Configuration\n\ntoml\n# Circle Layer Node Configuration\n\n# Node Identity\nmoniker = \"your-node-name\"\nproxy_app = \"tcp://127.0.0.1:26658\"\npriv_validator_key_file = \"config/priv_validator_key.json\"\npriv_validator_state_file = \"data/priv_validator_state.json\"\nnode_key_file = \"config/node_key.json\"\nabci = \"socket\"\nfilter_peers = false\n\n# Network Configuration\n[p2p]\nladdr = \"tcp://0.0.0.0:26656\"\nexternal_address = \"\"\nseeds = \"seed1.circlelayer.com:26656,seed2.circlelayer.com:26656\"\npersistent_peers = \"\"\nupnp = false\naddr_book_file = \"config/addrbook.json\"\naddr_book_strict = true\nmax_num_inbound_peers = 40\nmax_num_outbound_peers = 10\nseed_mode = false\npex = true\nallow_duplicate_ip = false\n\n# RPC Configuration\n[rpc]\nladdr = \"tcp://0.0.0.0:26657\"\ncors_allowed_origins = [\"*\"]\ncors_allowed_methods = [\"HEAD\", \"GET\", \"POST\"]\ncors_allowed_headers = [\"Origin\", \"Accept\", \"Content-Type\", \"X-Requested-With\"]\ngrpc_laddr = \"\"\ngrpc_max_open_connections = 900\nunsafe = false\nmax_open_connections = 900\nmax_subscription_clients = 100\nmax_subscriptions_per_client = 5\n\n# Consensus Configuration\n[consensus]\nwal_file = \"data/cs.wal/wal\"\ntimeout_propose = \"3s\"\ntimeout_propose_delta = \"500ms\"\ntimeout_prevote = \"1s\"\ntimeout_prevote_delta = \"500ms\"\ntimeout_precommit = \"1s\"\ntimeout_precommit_delta = \"500ms\"\ntimeout_commit = \"3s\"\ndouble_sign_check_height = 0\nskip_timeout_commit = false\ncreate_empty_blocks = true\ncreate_empty_blocks_interval = \"3s\"\n\n# Storage Configuration\n[storage]\ndiscard_abci_responses = false\n\n# Transaction Indexer\n[tx_index]\nindexer = \"kv\"\n\n# Instrumentation\n[instrumentation]\nprometheus = true\nprometheus_listen_addr = \":26660\"\nmax_open_connections = 3\nnamespace = \"circlelayer\"\n\nCode example:\n\n#### app.toml Configuration\n\ntoml\n# Circle Layer Application Configuration\n\n# Base Configuration\nminimum-gas-prices = \"0.000021aclayer\"\npruning = \"default\"\npruning-keep-recent = \"100\"\npruning-keep-every = \"0\"\npruning-interval = \"10\"\nhalt-height = 0\nhalt-time = 0\nmin-retain-blocks = 0\ninter-block-cache = true\n\n# API Configuration\n[api]\nenable = true\nswagger = true\naddress = \"tcp://0.0.0.0:1317\"\nmax-open-connections = 1000\nrpc-read-timeout = 10\nrpc-write-timeout = 0\nrpc-max-body-bytes = 1000000\nenabled-unsafe-cors = false\n\n# gRPC Configuration\n[grpc]\nenable = true\naddress = \"0.0.0.0:9090\"\nmax-recv-msg-size = \"10485760\"\nmax-send-msg-size = \"2147483647\"\n\n# State Sync Configuration\n[state-sync]\nsnapshot-interval = 1000\nsnapshot-keep-recent = 2\n\nCode example:\n\n#### System Management Configuration\n\nbash\n# Create systemd service file for automated management\nsudo tee /etc/systemd/system/circlelayer.service > /dev/null <<EOF\n[Unit]\nDescription=Circle Layer Node\nAfter=network-online.target\n\n[Service]\nUser=$USER\nExecStart=/usr/local/bin/circlelayer start\nRestart=always\nRestartSec=3\nLimitNOFILE=65535\nEnvironment=\"DAEMON_HOME=$HOME/.circlelayer\"\nEnvironment=\"DAEMON_NAME=circlelayer\"\nEnvironment=\"DAEMON_ALLOW_DOWNLOAD_BINARIES=false\"\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable circlelayer.service\nsudo systemctl start circlelayer.service\n\nCode example:\n\n#### Network Specifications\n\nbash\n# Network Performance Targets\n# Block Time: 3 seconds\n# Transaction Finality: 1-3 seconds\n# Minimum Gas Price: 0.000021 CLAYER\n# Block Gas Limit: 10,000,000,000,000\n# Chain ID: 28525 (testnet)\n\n# Network Connectivity Requirements\n# Bandwidth: Minimum 100 Mbps symmetric\n# Latency: <100ms to other validators\n# Uptime: Target 99.95%\n# Connection Limit: Support 1000+ concurrent connections\n\nCode example:\n\n## Operation\n\n### 1. Starting the Node\n\nCode example:\n\nCode example:\n# Start node\ncirclelayer start\n\n# Check status\ncirclelayer status\n\nCode example:\n\nCode example:\n\n### 2. Syncing\n- Initial sync\n- State sync\n- Fast sync\n- Archive node\n\n### 3. Maintenance\n- Regular updates\n- Backup data\n- Monitor resources\n- Check logs\n\n## Monitoring\n\n### 1. Basic Monitoring\n\nCode example:\n\nCode example:\n# Check sync status\ncirclelayer status\n\n# View logs\ntail -f ~/.circlelayer/logs/node.log\n\nCode example:\n\nCode example:\n\n### 2. Advanced Monitoring\n- Prometheus metrics\n- Grafana dashboards\n- Alert manager\n- Log aggregation\n\n### 3. Health Checks\n- Node status\n- Sync status\n- Resource usage\n- Network connectivity\n\n## Troubleshooting\n\n### 1. Common Issues\n- Sync problems\n- Resource constraints\n- Network issues\n- Configuration errors\n\n### 2. Solutions\n- Check logs\n- Verify config\n- Update software\n- Contact support\n\n### 3. Recovery\n- Backup restore\n- State reset\n- Re-sync\n- Emergency procedures",
    "frontmatter": {
      "sidebar_position": 2
    },
    "filePath": "nodes-validation/running-full-node.md",
    "category": "nodes-validation",
    "url": "/nodes-validation/running-full-node"
  },
  "roadmap-phase-1-testnet": {
    "id": "roadmap-phase-1-testnet",
    "title": "Circle Layer Development Roadmap",
    "content": "# Circle Layer Development Roadmap\n\n## Strategic Overview\n\nCircle Layer is building a robust, high-performance blockchain ecosystem through a carefully planned 2-phase development approach before mainnet launch. Our strategy focuses on comprehensive testing, ecosystem development, and security hardening to ensure a production-ready network.\n\n## Phase 1: Token Launch & Core Infrastructure Development (Current)\n\n### Strategic Development Approach\n\n**🚀 ERC20 Token Launch**\n- Launch CLAYER token on Ethereum to bootstrap community engagement\n- Start with modest initial liquidity to allow organic growth\n- Focus on building utility and technical development progress\n- Establish strong developer and validator community\n- Create foundation for mainnet migration infrastructure\n\n**📈 Community-Driven Development Strategy**\n- Community-first development approach with transparent roadmap\n- Focus on technical milestones and ecosystem building\n- Regular development updates and community involvement\n- Building sustainable long-term value through innovation\n- Preparing infrastructure for seamless mainnet migration\n\n### Technical Development & Community Building\n\n**🎯 Development Milestone Strategy**\n- **Foundation Phase**: Core infrastructure development and testing\n- **Community Phase**: Developer onboarding and documentation\n- **Ecosystem Phase**: Validator network establishment and testing\n- **Pre-Mainnet Phase**: Security audits and stress testing\n- **Migration Phase**: Mainnet preparation and migration infrastructure\n\n**💎 Community Engagement Focus**\n- **Technical Innovation**: Focus on breakthrough blockchain technology\n- **Developer Experience**: Superior tools and documentation\n- **Community Governance**: Early community shapes development priorities\n- **Ecosystem Growth**: Building sustainable developer ecosystem\n- **Long-term Vision**: Creating lasting value through technology advancement\n\n**🔄 Migration Infrastructure Development**\n- ERC20 holders eligible for native token migration upon mainnet launch\n- 1:1 migration ratio with transparent process\n- Migration bonus system for long-term community supporters\n- Comprehensive migration tools and support\n- Seamless transition preserving all community value\n\n### Technical Development Objectives\n- Build and test core blockchain infrastructure achieving 2,000 TPS on testnet\n- Establish robust validator network and consensus mechanism\n- Create comprehensive developer tooling and documentation\n- Implement security frameworks and audit processes\n- Prepare migration infrastructure for native chain deployment\n\n### Current Development Status\n\n#### Core Infrastructure 🚀 LIVE\n- ✅ DPoS consensus implementation (Live)\n- ✅ EVM compatibility layer (Live)\n- ✅ Network optimization (Live)\n- ✅ 2,000 TPS achievement (Live)\n- ✅ Testnet network operational (Live)\n\n#### Developer Infrastructure 🛠️ LIVE\n- ✅ RPC endpoints (https://testnet-rpc.circlelayer.com)\n- ✅ WebSocket endpoints (wss://testnet-rpc.circlelayer.com)\n- ✅ Block explorer (https://explorer-testnet.circlelayer.com)\n- ✅ Faucet service (https://faucet.circlelayer.com)\n- ✅ Web3 library compatibility (Live)\n- ✅ Developer documentation (Complete)\n\n#### Ecosystem Development 🔄 COMING SOON\n- 🔄 ERC20 token deployment (Deploying Soon)\n- 🔄 Native wallet app development (In Progress)\n- 🔄 Native DEX development (In Progress)\n- 🔄 Native bridge development (In Progress)\n\n### Target Performance Metrics\n- **Block Time**: 3 seconds\n- **Transaction Finality**: 1-3 seconds\n- **Current TPS Target**: 2,000 TPS\n- **Target Network Uptime**: 99.95%\n- **Gas Price**: Minimum 0.000021 CLAYER\n\n### Validator Network Specifications\n- **Testnet Minimum Stake**: 32 CLAYER\n- **Mainnet Minimum Stake**: 100,000 CLAYER\n- **Maximum Validators**: 21 (testnet), 10,000 (mainnet)\n- **Hardware Requirements**: \n  - Ubuntu ≥ 20.04 LTS\n  - 32GB RAM recommended (8GB minimum)\n  - 100GB SSD storage recommended\n  - Required ports: 32668, 32669, 8545, 6060, 80, 22\n\n## Phase 2: Ecosystem Expansion & Security Hardening\n\n### Strategic Focus: Building Before Mainnet\n\nFollowing successful testnet deployment, Phase 2 focuses on comprehensive ecosystem development to ensure a robust, battle-tested platform before mainnet launch. This approach helps us avoid major exploits and security issues by thoroughly testing all components.\n\n#### 🌉 Cross-Chain Infrastructure\n- **Native Bridge Development**\n  - Multi-chain bridge architecture\n  - Initial support for 4 major trading pairs\n  - Advanced security protocols\n  - Cross-chain governance integration\n\n#### 🏦 DeFi Infrastructure  \n- **Native DEX Platform**\n  - Automated Market Maker (AMM) design\n  - 4 primary trading pairs at launch\n  - Advanced liquidity mining protocols\n  - Integration with bridge infrastructure\n\n#### 📱 User Experience & Mobile Access\n- **Native Wallet Development**\n  - iOS application (App Store ready)\n  - Android application (Play Store ready)\n  - Advanced security features\n  - Seamless DeFi integration\n  - Multi-chain support\n\n#### 🚀 Ecosystem Growth & Partnerships\n- **Startup Onboarding Program**\n  - Developer incentive programs\n  - Technical support and mentorship\n  - Grant programs for innovative projects\n  - Integration assistance\n\n- **Community Engagement**\n  - Major hackathon participation\n  - Developer conferences and workshops\n  - Technical partnerships\n  - Educational content creation\n\n#### 🛡️ Advanced Security Layer (Inspired by Monad's Approach)\n\n**Agentic Smart Contract Security**\n- **Pre-deployment AI Auditing**\n  - Real-time vulnerability scanning\n  - Automated exploit detection\n  - Pattern recognition for common attack vectors\n  - Integration with deployment pipeline\n\n- **Continuous Monitoring**\n  - Live transaction analysis\n  - Suspicious activity detection\n  - Automatic threat response\n  - Community alert systems\n\n**Why This Approach**: Recent incidents in the Sui ecosystem and other L1s have shown the critical importance of comprehensive pre-mainnet testing. By building a full ecosystem on testnet first, we can identify and resolve potential issues before they affect real user funds.\n\n#### 📊 Performance Optimization (Monad-Inspired)\n- **Parallel Execution Engine**\n  - Multi-threaded transaction processing\n  - Optimistic execution with rollback capabilities\n  - Advanced state management\n  - Memory optimization\n\n- **Target: 50,000 TPS Before Mainnet**\n  - Incremental scaling approach\n  - Stress testing with real applications\n  - Performance monitoring and optimization\n  - Infrastructure scaling preparation\n\n## Phase 3: Mainnet Launch\n\n### Launch Criteria\n- ✅ Sustained 50,000 TPS performance on testnet\n- ✅ Complete ecosystem development (Bridge, DEX, Wallets)\n- ✅ Security layer fully tested and verified\n- ✅ Multiple successful hackathons and audits\n- ✅ Thriving developer community and applications\n- ✅ Economic model validated through testnet operations\n\n### Initial Mainnet Focus\n- Genesis launch with 21 validators\n- Gradual performance scaling to 50,000 TPS\n- DeFi infrastructure activation\n- Mobile wallet deployment\n\n## Phase 4: Global Expansion & Innovation\n\n### Strategic Objectives\n- Achieve top 10 blockchain by technical innovation and adoption\n- 10M+ active users globally through superior user experience\n- 1,000+ enterprise clients via robust enterprise solutions\n- 100,000+ TPS performance with industry-leading efficiency\n- Global regulatory compliance and standards leadership\n\n### Innovation Areas\n- Advanced AI-blockchain integration\n- Universal cross-chain interoperability (50+ blockchains)\n- Enterprise-grade blockchain solutions\n- High-performance gaming and metaverse infrastructure\n- Next-generation quantum-resistant security\n\n## Key Differentiators\n\n### 🎯 **Comprehensive Pre-Mainnet Testing**\nUnlike many L1s that rush to mainnet, we're investing significant time in testnet ecosystem development to ensure production readiness.\n\n### 🤖 **AI-First Security**\nOur agentic security layer provides real-time protection that learns and adapts, preventing the types of exploits seen in other ecosystems.\n\n### ⚡ **Performance + Security Balance**\nAchieving 50,000 TPS while maintaining the highest security standards through extensive testing and optimization.\n\n### 🌍 **Full-Stack Ecosystem**\nBuilding every component (bridge, DEX, wallets) in-house ensures seamless integration and consistent user experience.\n\n## Development Resources\n\n### Technical Documentation\n- Complete developer guides\n- API documentation\n- Security best practices\n- Integration examples\n\n### Community Support\n- Developer Telegram community\n- Technical workshops\n- Office hours with core team\n- Grant program applications\n\n## Inspiration: Learning from Monad\n\nWe're closely studying Monad's approach to high-performance blockchain development:\n\n- **Parallel Execution**: Implementing similar multi-threaded transaction processing\n- **EVM Optimization**: Custom bytecode improvements for better performance\n- **State Management**: Advanced techniques for efficient state handling\n- **Testing Methodology**: Comprehensive testing before mainnet deployment\n\n## Get Involved\n\n### For Developers\n- Join our testnet development program\n- Contribute to ecosystem tools\n- Apply for developer grants\n- Participate in hackathons\n\n### For Validators\n- Early validator program participation\n- Network security contributions\n- Community governance involvement\n- Reward program participation\n\n### For Projects\n- Ecosystem grant applications\n- Technical integration support\n- Marketing and community support\n- Cross-promotion opportunities\n\n---\n\n*This roadmap reflects our commitment to building a production-ready, secure, and high-performance blockchain ecosystem. All timelines are estimates and may be adjusted based on development progress and security considerations.*",
    "frontmatter": {
      "id": "phase-1-testnet",
      "title": "Circle Layer Development Roadmap",
      "sidebar_label": "Development Roadmap"
    },
    "filePath": "roadmap/phase-1-testnet.md",
    "category": "roadmap",
    "url": "/roadmap/phase-1-testnet"
  },
  "roadmap-phase-2-ecosystem": {
    "id": "roadmap-phase-2-ecosystem",
    "title": "Phase 2 - Ecosystem Expansion & Security Layer",
    "content": "# Phase 2 - Ecosystem Expansion & Security Layer\n\n## Overview\n\nPhase 2 represents Circle Layer's comprehensive ecosystem development phase, where we build a complete DeFi infrastructure, native applications, and advanced security systems before mainnet launch. This strategic approach ensures a battle-tested, production-ready ecosystem.\n\n:::info Strategic Philosophy\nRather than rushing to mainnet, we're investing significant time in building a complete ecosystem on testnet. This approach helps us avoid the major exploits and security issues that have plagued other L1 blockchains.\n:::\n\n## Core Objectives\n\n### 🎯 **Build Before Launch Strategy**\n- Create a comprehensive DeFi ecosystem\n- Test all components under real-world conditions\n- Achieve 50,000 TPS performance targets\n- Implement AI-powered security layer\n- Onboard developer and startup community\n\n### 🛡️ **Security-First Approach**\nLearning from incidents in Sui and other ecosystems, we're implementing comprehensive security measures before handling real user funds.\n\n## Key Development Areas\n\n## 🌉 Cross-Chain Infrastructure\n\n### Native Bridge Development\n\n#### Technical Specifications\n- **Multi-chain Architecture**: Support for Ethereum, BSC, Polygon, Arbitrum\n- **Security Model**: Multi-signature validation with time delays\n- **Bridge Pairs**: 4 major trading pairs at launch\n  - CLAYER/ETH\n  - CLAYER/USDC\n  - CLAYER/BTC (wrapped)\n  - CLAYER/USDT\n\n#### Development Milestones\n- 🔄 **Foundation**: Core bridge architecture\n- 🔄 **Security Phase**: Security audits and testing\n- 🔄 **Integration**: Multi-chain integration\n- 🔄 **Deployment**: Production deployment\n\n### Bridge Security Features\n- **Time-locked Withdrawals**: 24-hour delay for large transfers\n- **Multi-sig Validation**: 5-of-7 validator consensus\n- **Automated Monitoring**: AI-powered anomaly detection\n- **Emergency Pause**: Circuit breaker functionality\n\n## 🏦 Native DEX Platform\n\n### Automated Market Maker (AMM)\n\n#### Core Features\n- **Advanced AMM Design**: Improved from Uniswap V3 concepts\n- **Concentrated Liquidity**: Capital-efficient trading\n- **Dynamic Fee Structure**: Adaptive fees based on volatility\n- **MEV Protection**: Built-in protection against frontrunning\n\n#### Initial Trading Pairs\n1. **CLAYER/ETH** - Primary bridge pair\n2. **CLAYER/USDC** - Stable trading pair\n3. **CLAYER/BTC** - Bitcoin bridge pair\n4. **CLAYER/USDT** - Additional stable pair\n\n#### Liquidity Mining Program\n- **Bootstrap Incentives**: High early rewards for liquidity providers\n- **Sustainable Tokenomics**: Long-term sustainability model\n- **Community Governance**: LPs vote on fee distribution\n- **Cross-chain Rewards**: Incentives for bridge users\n\n### DEX Advanced Features\n- **Limit Orders**: Advanced order types\n- **Multi-hop Routing**: Optimal execution paths\n- **Flash Loans**: Capital-efficient DeFi composability\n- **Analytics Dashboard**: Real-time trading insights\n\n## 📱 Native Wallet Development\n\n### Mobile-First Approach\n\n#### iOS Application\n- **App Store Ready**: Full iOS 16+ compatibility\n- **Native Design**: SwiftUI implementation\n- **Advanced Security**: Biometric authentication, secure enclave\n- **DeFi Integration**: Built-in DEX and bridge access\n\n#### Android Application\n- **Play Store Ready**: Android 12+ compatibility\n- **Material Design**: Native Android experience\n- **Hardware Security**: TEE integration where available\n- **Seamless UX**: One-tap DeFi interactions\n\n#### Cross-Platform Features\n- **Multi-chain Support**: Manage multiple blockchain assets\n- **DeFi Dashboard**: Portfolio tracking and yield farming\n- **Social Features**: Easy wallet-to-wallet transfers\n- **Educational Content**: Built-in learning resources\n\n### Wallet Security Features\n- **Multi-layer Encryption**: Multiple security layers\n- **Backup & Recovery**: Social recovery options\n- **Transaction Simulation**: Preview transaction outcomes\n- **Risk Assessment**: AI-powered security warnings\n\n## 🛡️ Advanced Security Layer (Monad-Inspired)\n\n### Agentic Smart Contract Security\n\n#### Pre-deployment AI Auditing\n**Learning from Sui Ecosystem Incidents**\n\nCode example:\ngraph TD\n    A[Contract Submission] --> B[AI Security Scan]\n    B --> C{Vulnerabilities Found?}\n    C -->|Yes| D[Block Deployment]\n    C -->|No| E[Secondary Analysis]\n    E --> F[Pattern Recognition]\n    F --> G[Risk Assessment]\n    G --> H[Deployment Decision]\n    D --> I[Developer Notification]\n    I --> J[Fix Recommendations]\n\n#### AI Security Components\n\n**1. Vulnerability Detection Engine**\n- **Known Exploit Patterns**: Database of 10,000+ known vulnerabilities\n- **Zero-day Detection**: Machine learning for novel attack vectors\n- **Economic Attack Analysis**: MEV and flash loan attack detection\n- **Cross-contract Risk**: Multi-contract interaction analysis\n\n**2. Real-time Monitoring System**\n- **Transaction Analysis**: Live transaction pattern recognition\n- **Anomaly Detection**: Statistical analysis of unusual behavior\n- **Risk Scoring**: Real-time risk assessment for all transactions\n- **Automatic Response**: Circuit breakers for suspicious activity\n\n**3. Community Protection Features**\n- **Honeypot Detection**: Automatic identification of malicious contracts\n- **Rug Pull Prevention**: Early warning system for suspicious project behavior\n- **Social Engineering Protection**: Warnings for common scam patterns\n- **Educational Alerts**: Real-time security education for users\n\n### Security Implementation Timeline\n\n#### Phase 2.1: Foundation\n- ✅ Core AI model training\n- 🔄 Basic vulnerability scanning\n- 🔄 Pattern recognition engine\n- 🔄 Developer integration tools\n\n#### Phase 2.2: Advanced Protection\n- 🔄 Real-time monitoring system\n- 🔄 Automated response mechanisms\n- 🔄 Cross-contract analysis\n- 🔄 Community alert system\n\n#### Phase 2.3: Ecosystem Integration\n- 🔄 DEX integration protection\n- 🔄 Bridge security monitoring\n- 🔄 Wallet security features\n- 🔄 Comprehensive testing\n\n## 🚀 Startup & Community Ecosystem\n\n### Developer Onboarding Program\n\n#### Startup Support Initiative\n- **Grant Programs**: $10M+ in developer grants\n- **Technical Mentorship**: 1-on-1 support from core team\n- **Infrastructure Credits**: Free infrastructure for qualifying projects\n- **Go-to-market Support**: Marketing and community support\n\n#### Hackathon Strategy\n- **Major Hackathon Participation**: ETHGlobal, Solana Breakpoint, etc.\n- **Circle Layer Hackathons**: Quarterly ecosystem hackathons\n- **Prize Pools**: $1M+ in total prize distribution\n- **Continued Support**: Post-hackathon project incubation\n\n#### Developer Resources\n- **Comprehensive Documentation**: Complete API and SDK docs\n- **Video Tutorials**: Step-by-step development guides\n- **Sample Applications**: Full-stack example projects\n- **24/7 Support**: Developer Telegram with core team presence\n\n### Community Building\n- **Ambassador Program**: Global community leaders\n- **Educational Content**: Technical workshops and webinars\n- **Conference Presence**: Major blockchain conferences\n- **Partnership Program**: Strategic technology partnerships\n\n## 📊 Performance Optimization (Monad-Inspired)\n\n### Parallel Execution Engine\n**Target: 50,000 TPS Before Mainnet**\n\n#### Technical Approach\nFollowing Monad's innovative approach to blockchain performance:\n\n**1. Parallel Transaction Processing**\n\nCode example:\n// Pseudo-code for parallel execution\nstruct ParallelExecutor {\n    thread_pool: ThreadPool,\n    state_manager: StateManager,\n    dependency_graph: DependencyGraph,\n}\n\nimpl ParallelExecutor {\n    fn execute_block(&self, transactions: Vec) -> BlockResult {\n        let dependencies = self.analyze_dependencies(&transactions);\n        let execution_groups = self.create_execution_groups(dependencies);\n\n        // Execute independent transaction groups in parallel\n        let results = execution_groups\n            .par_iter()\n            .map(|group| self.execute_group(group))\n            .collect();\n            \n        self.merge_results(results)\n    }\n}\n\n**2. Optimistic Execution with Rollback**\n- **Speculative Execution**: Execute transactions optimistically\n- **Conflict Detection**: Identify state conflicts post-execution\n- **Efficient Rollback**: Quick recovery from conflicts\n- **State Caching**: Optimized state management\n\n**3. Advanced State Management**\n- **Memory Optimization**: Efficient state tree structures\n- **Parallel State Access**: Lock-free state reading\n- **Predictive Loading**: AI-powered state prefetching\n- **Garbage Collection**: Optimized memory management\n\n#### Performance Testing Strategy\n- **Stress Testing**: Continuous high-load testing\n- **Real Application Load**: Testing with actual DeFi applications\n- **Network Simulation**: Multi-geography network testing\n- **Performance Monitoring**: Real-time performance analytics\n\n### Scaling Milestones\n- **Early Phase**: 10,000 TPS sustained performance\n- **Mid Phase**: 25,000 TPS with full ecosystem\n- **Late Phase**: 50,000 TPS production-ready\n\n## Success Criteria & KPIs\n\n### Technical Achievements\n- [ ] 50,000 TPS sustained performance\n- [ ] < 1 second transaction finality\n- [ ] 99.99% network uptime\n- [ ] Zero critical security incidents\n- [ ] Complete ecosystem development\n\n### Ecosystem Metrics\n- [ ] 100+ active projects built on testnet\n- [ ] $100M+ TVL on testnet DEX\n- [ ] 10,000+ active wallet users\n- [ ] 1,000+ developers in community\n- [ ] 50+ startup partnerships\n\n### Security Validation\n- [ ] 1,000+ contracts audited by AI system\n- [ ] Zero successful exploits on protected contracts\n- [ ] 99.9% vulnerability detection accuracy\n- [ ] Community security program active\n- [ ] Multiple independent security audits completed\n\n## Risk Mitigation\n\n### Learning from Other Ecosystems\n**Sui Ecosystem Analysis**: Recent incidents in the Sui ecosystem highlight the importance of:\n- Comprehensive pre-mainnet testing\n- Robust security infrastructure\n- Community education and awareness\n- Incident response capabilities\n\n### Our Mitigation Strategy\n1. **Extended Testnet Phase**: 12+ months of ecosystem testing\n2. **Security-First Development**: AI security layer before mainnet\n3. **Community Protection**: Education and real-time warnings\n4. **Incident Preparedness**: Comprehensive response protocols\n\n## Community Involvement\n\n### Beta Testing Program\n- **Early Access**: Limited beta for ecosystem components\n- **Feedback Integration**: Direct input into development process\n- **Bug Bounty Program**: Rewards for security discoveries\n- **Community Governance**: Input on ecosystem priorities\n\n### Developer Community\n- **Technical Working Groups**: Specialized development teams\n- **Open Source Contributions**: Core infrastructure contributions\n- **Documentation Improvements**: Community-driven docs\n- **Educational Content**: Community-created tutorials\n\n---\n\n*Phase 2 represents our commitment to building a comprehensive, secure, and production-ready blockchain ecosystem. By investing significant time in testnet ecosystem development, we ensure a superior experience for users, developers, and enterprises when we launch mainnet.*",
    "frontmatter": {
      "id": "phase-2-ecosystem",
      "title": "Phase 2 - Ecosystem Expansion & Security Layer",
      "sidebar_label": "Phase 2 - Ecosystem",
      "sidebar_position": 2
    },
    "filePath": "roadmap/phase-2-ecosystem.md",
    "category": "roadmap",
    "url": "/roadmap/phase-2-ecosystem"
  },
  "roadmap-phase-3-mainnet": {
    "id": "roadmap-phase-3-mainnet",
    "title": "Phase 3 - Mainnet Launch",
    "content": "# Phase 3 - Mainnet Launch\n\n## Overview\n\nPhase 3 marks the culmination of Circle Layer's comprehensive development strategy with the launch of a production-ready, fully-featured blockchain network. After extensive testnet ecosystem development and security validation, we launch with a complete DeFi infrastructure and proven 50,000 TPS performance.\n\n:::info Launch Philosophy\nWe launch only when our ecosystem is battle-tested, secure, and ready for global adoption. Quality and security take precedence over speed to market.\n:::\n\n## Pre-Launch Criteria\n\n### ✅ **Technical Readiness Checklist**\n\n#### Performance Validation\n- [ ] **50,000 TPS sustained** on testnet for months\n- [ ] **Sub-second finality** consistently achieved\n- [ ] **99.99% network uptime** demonstrated\n- [ ] **Zero critical bugs** in 6-month period\n- [ ] **Load testing** with 1M+ transactions/day\n\n#### Security Validation\n- [ ] **AI security layer** protecting 1,000+ contracts\n- [ ] **Zero successful exploits** on protected testnet contracts\n- [ ] **Multiple independent audits** completed (Trail of Bits, Consensys, etc.)\n- [ ] **Bug bounty program** running for 6+ months with no critical findings\n- [ ] **Incident response procedures** tested and verified\n\n#### Ecosystem Readiness\n- [ ] **Native DEX** with $100M+ TVL on testnet\n- [ ] **Cross-chain bridge** operational with 4 trading pairs\n- [ ] **Mobile wallets** live on App Store and Play Store\n- [ ] **100+ active projects** built and tested\n- [ ] **1,000+ developers** in community\n\n#### Economic Model\n- [ ] **Tokenomics validated** through testnet operations\n- [ ] **Gas fee optimization** tested under various loads\n- [ ] **Validator economics** proven sustainable\n- [ ] **Treasury management** systems operational\n- [ ] **Governance framework** tested and refined\n\n#### Community & Token Migration\n- [ ] **ERC20 token community** established with strong developer engagement\n- [ ] **Token migration infrastructure** ready and tested\n- [ ] **Community value preservation** mechanisms in place\n- [ ] **Migration bonus system** for long-term holders\n- [ ] **Seamless transition** protocols validated\n\n## Token Migration Strategy\n\n### ERC20 to Native Chain Migration\n\n**🔄 Seamless Transition Process**\n- **1:1 Migration Ratio**: Every ERC20 CLAYER becomes 1 native CLAYER\n- **Automatic Eligibility**: All ERC20 holders automatically qualified\n- **Value Preservation**: All community-built value and momentum maintained\n- **Migration Window**: Extended period for convenient migration\n- **Technical Support**: 24/7 assistance during migration period\n\n**💎 Long-Term Holder Bonuses**\n- **6+ Month Holders**: 5% bonus native tokens\n- **12+ Month Holders**: 10% bonus native tokens\n- **18+ Month Holders**: 15% bonus native tokens\n- **Community Leaders**: Additional governance token allocation\n- **Early Supporters**: Special recognition and benefits\n\n**📈 Post-Migration Benefits**\n- **Enhanced Utility**: Full access to native chain features\n- **Staking Rewards**: Participate in network validation\n- **Governance Rights**: Vote on protocol upgrades\n- **DeFi Integration**: Access to native DEX and bridge\n- **Continued Growth**: Benefit from mainnet adoption and scaling\n\n## Mainnet Launch Phases\n\n### Phase 3.1: Genesis Launch\n\n#### Core Network Activation\n**Duration**: 2 weeks\n\n**Validator Network Bootstrap**\n- **Genesis Validators**: 21 pre-approved validators\n- **Minimum Stake**: 100,000 CLAYER per validator\n- **Maximum Validators**: 10,000 (mainnet capacity)\n- **Geographic Distribution**: Global validator set\n- **Security**: Multi-sig genesis ceremony\n\n**Initial Features**\n- ✅ Core blockchain functionality\n- ✅ Basic token transfers\n- ✅ Smart contract deployment\n- ✅ Web3 API endpoints\n- 🔄 Conservative performance limits (10,000 TPS initially)\n\n**Launch Monitoring**\n- **24/7 Network Monitoring**: Core team + community\n- **Performance Metrics**: Real-time dashboards\n- **Security Monitoring**: AI layer + manual oversight\n- **Incident Response**: Immediate response team\n\n### Phase 3.2: DeFi Infrastructure Activation (4 weeks post-genesis)\n\n#### Native DEX Launch\n**Prerequisites**: 2 weeks of stable network operation\n\n**DEX Features**\n- ✅ 4 primary trading pairs (CLAYER/ETH, USDC, BTC, USDT)\n- ✅ Automated Market Maker functionality\n- ✅ Liquidity mining rewards\n- ✅ Advanced order types\n- ✅ MEV protection\n\n**Liquidity Bootstrap**\n- **Initial Liquidity**: $50M+ from treasury and partners\n- **Incentive Programs**: High APY for early LPs\n- **Community Rewards**: Trading competitions\n- **Cross-chain Migration**: Bridge activation\n\n#### Cross-Chain Bridge Activation\n**Security**: Time-locked multi-sig with 48-hour delays\n\n**Supported Chains**\n- **Ethereum**: Primary bridge pair\n- **BSC**: High-volume trading\n- **Polygon**: Low-cost transactions  \n- **Arbitrum**: L2 integration\n\n**Bridge Security**\n- **Multi-sig Validation**: 7-of-10 validator consensus\n- **Time Delays**: 24-48 hours for large transfers\n- **Circuit Breakers**: Automatic pause mechanisms\n- **Insurance Fund**: Bridge security insurance\n\n### Phase 3.3: Full Ecosystem Activation (8 weeks post-genesis)\n\n#### Performance Scaling\n**Target**: Gradual scaling to 50,000 TPS\n\n**Scaling Schedule**\n- **Week 1-2**: 10,000 TPS (safe launch)\n- **Week 3-4**: 20,000 TPS (initial scaling)\n- **Week 5-6**: 35,000 TPS (advanced testing)\n- **Week 7-8**: 50,000 TPS (full performance)\n\n#### Mobile Wallet Launch\n**App Store Deployment**\n- ✅ iOS wallet with DeFi integration\n- ✅ Android wallet with full features\n- ✅ Social recovery mechanisms\n- ✅ Built-in DEX access\n- ✅ Cross-chain portfolio management\n\n#### Advanced Features\n- **Governance**: On-chain voting and proposals\n- **Staking**: Automated staking contracts\n- **Oracle Network**: Decentralized price feeds\n- **Advanced Security**: Full AI protection suite\n\n## Launch Success Metrics\n\n### Network Health KPIs\n\n#### Performance Metrics\n- **TPS Achievement**: 50,000 TPS within 8 weeks\n- **Finality**: Less than 1 second average\n- **Uptime**: 99.99% in first 3 months\n- **Gas Efficiency**: Less than $0.01 average transaction cost\n\n#### Security Metrics\n- **Zero Critical Incidents**: No successful attacks\n- **AI Protection**: 100% of new contracts scanned\n- **Response Time**: Less than 5 minutes for critical alerts\n- **Community Reports**: Active bug bounty participation\n\n#### Adoption Metrics\n- **TVL Growth**: $500M+ within 6 months\n- **Active Addresses**: 100,000+ unique users\n- **Transaction Volume**: 1M+ transactions/day\n- **Developer Activity**: 500+ active developers\n\n### Economic Indicators\n\n#### Token Metrics\n- **Price Stability**: Healthy price discovery through utility-driven demand\n- **Network Position**: Top 50 blockchain by technical innovation and adoption\n- **Trading Volume**: $100M+ daily volume through genuine ecosystem usage\n- **Distribution**: Healthy token distribution across stakeholders\n\n#### Ecosystem Growth\n- **Projects Launched**: 200+ live projects\n- **Enterprise Adoption**: 10+ enterprise clients\n- **Geographic Distribution**: Global user base\n- **Partnership Growth**: 50+ strategic partnerships\n\n## Risk Management & Contingency\n\n### Launch Risks\n\n#### Technical Risks\n- **Performance Degradation**: Gradual scaling approach\n- **Security Vulnerabilities**: Multiple audit layers\n- **Network Congestion**: Dynamic fee adjustment\n- **Validator Issues**: Redundant validator set\n\n#### Market Risks\n- **Low Adoption**: Aggressive incentive programs\n- **Competitive Pressure**: Unique value proposition focus\n- **Regulatory Changes**: Compliance-first approach\n- **Economic Downturn**: Conservative treasury management\n\n### Contingency Plans\n\n#### Emergency Procedures\n- **Network Halt**: Validator consensus mechanism\n- **Security Incident**: Immediate response protocols\n- **Performance Issues**: Automatic scaling adjustments\n- **Economic Attack**: Treasury intervention capabilities\n\n#### Recovery Mechanisms\n- **State Rollback**: Tested rollback procedures\n- **Validator Replacement**: Quick validator onboarding\n- **Liquidity Support**: Treasury market making\n- **Community Communication**: Transparent incident reporting\n\n## Post-Launch Operations\n\n### Month 1-3: Stabilization\n- **Performance Optimization**: Real-world tuning\n- **Security Monitoring**: Enhanced threat detection\n- **Community Support**: 24/7 developer assistance\n- **Feature Refinement**: Based on user feedback\n\n### Month 4-6: Growth Acceleration\n- **Marketing Campaigns**: Global awareness building\n- **Partnership Expansion**: Strategic alliances\n- **Feature Development**: Community-requested features\n- **Ecosystem Grants**: Continued developer support\n\n### Month 7-12: Market Leadership\n- **Innovation Leadership**: First-to-market features\n- **Global Expansion**: International market entry\n- **Enterprise Solutions**: B2B product development\n- **Research & Development**: Next-generation features\n\n## Community & Governance\n\n### Launch Community\n- **Global Events**: Mainnet launch celebrations\n- **Developer Conferences**: Technical presentations\n- **Educational Content**: Comprehensive tutorials\n- **Ambassador Program**: Community leaders\n\n### Governance Activation\n- **DAO Formation**: Decentralized governance structure\n- **Proposal System**: Community-driven development\n- **Treasury Management**: Transparent fund allocation\n- **Voting Mechanisms**: Stake-weighted governance\n\n## Long-term Vision\n\n### Year 1 Goals\n- **Industry Recognition**: Top 20 blockchain by adoption\n- **Technical Leadership**: Performance and security benchmark\n- **Ecosystem Maturity**: Self-sustaining developer ecosystem\n- **Global Presence**: Worldwide user and developer base\n\n### Strategic Positioning\n- **DeFi Hub**: Premier destination for DeFi applications\n- **Enterprise Blockchain**: Preferred choice for business applications\n- **Innovation Platform**: Leading edge of blockchain technology\n- **Community-Driven**: Decentralized and community-governed\n\n---\n\n*Phase 3 represents the culmination of our methodical approach to blockchain development. By launching with a proven ecosystem, validated security, and demonstrated performance, we set the foundation for sustained success and industry leadership.*",
    "frontmatter": {
      "id": "phase-3-mainnet",
      "title": "Phase 3 - Mainnet Launch",
      "sidebar_label": "Phase 3 - Mainnet",
      "sidebar_position": 3
    },
    "filePath": "roadmap/phase-3-mainnet.md",
    "category": "roadmap",
    "url": "/roadmap/phase-3-mainnet"
  },
  "roadmap-phase-4-expansion": {
    "id": "roadmap-phase-4-expansion",
    "title": "Phase 4 - Global Expansion & Innovation",
    "content": "# Phase 4 - Global Expansion & Innovation\n\n## Overview\n\nPhase 4 focuses on establishing Circle Layer as a global leader in blockchain technology through comprehensive ecosystem expansion, institutional adoption, and breakthrough innovations. With a proven mainnet and thriving ecosystem, we scale to serve millions of users and become the infrastructure backbone for the next generation of decentralized applications.\n\n:::info Global Vision\nPhase 4 transforms Circle Layer from a successful blockchain to a global infrastructure platform that powers the decentralized economy at scale.\n:::\n\n## Strategic Objectives\n\n### 🌍 **Global Market Leadership**\n- Achieve top 10 blockchain by technical innovation and ecosystem adoption\n- Establish presence in all major global markets\n- Become the preferred platform for enterprise blockchain solutions\n- Lead innovation in blockchain technology and DeFi\n\n### 🏢 **Enterprise & Institutional Adoption**\n- Onboard major corporations and financial institutions\n- Develop enterprise-grade blockchain solutions\n- Establish regulatory compliance frameworks\n- Create institutional-grade security and reliability\n\n### 🚀 **Next-Generation Innovation**\n- Pioneer breakthrough blockchain technologies\n- Advance AI-blockchain integration\n- Lead cross-chain interoperability standards\n- Develop quantum-resistant security measures\n\n## Phase 4 Development Areas\n\n## 🌐 Global Market Expansion\n\n### Regional Infrastructure\n\n#### Geographic Expansion\n- **North America**: Major city presence (NYC, SF, Toronto)\n- **Europe**: EU compliance hub (Berlin, Amsterdam, Zurich)\n- **Asia-Pacific**: Regional headquarters (Singapore, Tokyo, Seoul)\n- **Latin America**: Growth markets (São Paulo, Mexico City)\n- **Middle East/Africa**: Emerging markets (Dubai, Cape Town)\n\n#### Regional Partnerships\n- **Payment Processors**: Visa, Mastercard, local payment networks\n- **Banking Partners**: Major banks in each region\n- **Regulatory Bodies**: Proactive compliance in all jurisdictions\n- **Technology Partners**: Cloud providers, telecom companies\n\n#### Localization Strategy\n- **Multi-language Support**: 15+ languages for wallets and docs\n- **Local Compliance**: Meet regulatory requirements in each market\n- **Cultural Adaptation**: Region-specific features and partnerships\n- **Local Community**: Native developer and user communities\n\n### Mass Market Adoption\n**Target**: 10M+ active users by end of Phase 4\n\n#### Consumer Applications\n- **Social DeFi**: Social media with integrated DeFi features\n- **Gaming Integration**: Blockchain gaming platform\n- **Digital Identity**: Decentralized identity solutions\n- **Supply Chain**: Transparent supply chain tracking\n\n#### User Experience Innovation\n- **Zero-Knowledge Onboarding**: Privacy-preserving user registration\n- **Gasless Transactions**: Meta-transactions for seamless UX\n- **Social Recovery 2.0**: Advanced account recovery mechanisms\n- **AI Personal Assistant**: Blockchain interaction assistant\n\n## 🏢 Enterprise & Institutional Solutions\n\n### Enterprise Blockchain Platform\n\n#### B2B Product Suite\n- **Enterprise DEX**: Institutional-grade trading platform\n- **Corporate Treasury**: Blockchain-based treasury management\n- **Supply Chain Solutions**: End-to-end supply chain transparency\n- **Digital Asset Management**: Institutional asset custody and management\n\n#### Institutional Infrastructure\n- **Custody Solutions**: Bank-grade asset custody\n- **Compliance Tools**: Automated regulatory reporting\n- **Risk Management**: Real-time risk assessment and monitoring\n- **Integration APIs**: Seamless integration with existing systems\n\n#### Financial Services Integration\n- **Central Bank Digital Currencies (CBDCs)**: Infrastructure for digital currencies\n- **Traditional Finance Bridge**: Integration with legacy financial systems\n- **Institutional Trading**: High-frequency trading infrastructure\n- **Regulatory Reporting**: Automated compliance and reporting tools\n\n### Enterprise Adoption Program\n**Target**: 1,000+ enterprise clients\n\n#### Onboarding Support\n- **Dedicated Account Management**: White-glove service for enterprises\n- **Custom Development**: Tailored blockchain solutions\n- **Training Programs**: Comprehensive staff training\n- **Migration Assistance**: Seamless transition from legacy systems\n\n#### Success Metrics\n- **Enterprise Revenue**: $100M+ annual enterprise revenue\n- **Fortune 500 Adoption**: 50+ Fortune 500 companies\n- **Government Contracts**: 20+ government implementations\n- **Banking Partners**: 100+ financial institution integrations\n\n## 🔬 Next-Generation Technology Innovation\n\n### Advanced Performance Optimization\n**Target**: 100,000+ TPS with global distribution\n\n#### Breakthrough Performance\n- **Parallel Sharding**: Advanced state sharding implementation\n- **Edge Computing**: Distributed processing at network edge\n- **Quantum-Resistant Security**: Post-quantum cryptography\n- **AI-Optimized Consensus**: Machine learning enhanced consensus\n\n#### Global Network Architecture\n- **Multi-Region Deployment**: Globally distributed infrastructure\n- **Edge Nodes**: Localized processing for reduced latency\n- **Content Delivery**: Blockchain-based CDN\n- **Disaster Recovery**: Multi-region backup and failover\n\n### AI-Blockchain Integration 2.0\n\n#### Advanced AI Features\n- **Predictive Analytics**: AI-powered market and behavior prediction\n- **Automated Optimization**: Self-optimizing network parameters\n- **Intelligent Routing**: AI-based transaction routing\n- **Smart Contract AI**: AI-enhanced smart contract capabilities\n\n#### AI Security Evolution\n- **Behavioral Analysis**: Advanced user behavior monitoring\n- **Threat Prediction**: Predictive security threat modeling\n- **Automated Response**: Sophisticated incident response automation\n- **Zero-Day Protection**: AI detection of unknown vulnerabilities\n\n### Cross-Chain Leadership\n**Vision**: Become the premier cross-chain hub\n\n#### Interoperability Innovation\n- **Universal Bridge Protocol**: Connect to 50+ blockchains\n- **Cross-Chain Smart Contracts**: Multi-chain contract execution\n- **Unified Liquidity**: Aggregated liquidity across chains\n- **Cross-Chain Governance**: Multi-blockchain governance systems\n\n#### Standards Development\n- **Industry Standards**: Lead development of interoperability standards\n- **Open Source Protocols**: Contribute to cross-chain open source\n- **Research & Development**: Advance interoperability research\n- **Community Building**: Foster cross-chain developer community\n\n## 📊 Ecosystem Super-Growth\n\n### Developer Ecosystem Expansion\n**Target**: 10,000+ active developers\n\n#### Advanced Developer Tools\n- **No-Code Platform**: Visual smart contract development\n- **AI Development Assistant**: AI-powered coding assistance\n- **Advanced Testing Suite**: Comprehensive testing and simulation\n- **Performance Analytics**: Deep performance insights and optimization\n\n#### Developer Incentives 2.0\n- **Advanced Grant Program**: $100M+ developer fund\n- **Revenue Sharing**: Developers earn from their applications\n- **Accelerator Program**: Circle Layer startup accelerator\n- **Global Hackathons**: Worldwide hackathon series with $10M+ prizes\n\n### DeFi 3.0 Innovation\n**Vision**: Pioneer next-generation DeFi\n\n#### Advanced DeFi Features\n- **AI-Powered Trading**: Intelligent automated trading strategies\n- **Dynamic Yield Optimization**: AI-optimized yield farming\n- **Risk-Adjusted Lending**: Sophisticated risk assessment\n- **Synthetic Assets**: Comprehensive synthetic asset platform\n\n#### Financial Innovation\n- **Prediction Markets**: Decentralized prediction and betting\n- **Insurance Protocols**: Blockchain-based insurance products\n- **Real-World Assets**: Tokenization of physical assets\n- **Algorithmic Central Bank**: Decentralized monetary policy\n\n### Gaming & Metaverse Integration\n\n#### Gaming Platform\n- **High-Performance Gaming**: 100,000+ TPS gaming infrastructure\n- **NFT Marketplace**: Advanced NFT trading and gaming\n- **Virtual Worlds**: Metaverse development platform\n- **Play-to-Earn Economy**: Sophisticated gaming economics\n\n#### Metaverse Infrastructure\n- **Virtual Land**: Decentralized virtual real estate\n- **Digital Identity**: Avatar and identity systems\n- **Virtual Commerce**: E-commerce in virtual environments\n- **Social Features**: Social networking in the metaverse\n\n## 🎯 Success Metrics & KPIs\n\n### Network Performance\n- **100,000+ TPS**: Peak performance capability\n- **Less than 100ms Latency**: Global average transaction confirmation\n- **99.999% Uptime**: Five-nines reliability\n- **$0.001 Transactions**: Ultra-low transaction costs\n\n### Adoption Metrics\n- **10M+ Active Users**: Monthly active users globally\n- **$100B+ TVL**: Total value locked in ecosystem\n- **1,000+ Enterprise Clients**: Business adoption\n- **10,000+ Active Developers**: Developer ecosystem\n\n### Market Position\n- **Top 5 Blockchain**: By technical innovation and ecosystem adoption\n- **50+ Country Presence**: Global regulatory compliance\n- **1,000+ Partnerships**: Strategic alliances worldwide\n- **Network Valuation**: Sustained value through utility and innovation\n\n### Innovation Leadership\n- **50+ Patents**: Blockchain technology patents\n- **100+ Research Papers**: Academic and technical publications\n- **20+ Industry Awards**: Recognition for innovation\n- **Global Tech Leader**: Acknowledged technology leadership\n\n## 🛡️ Advanced Security & Compliance\n\n### Global Regulatory Compliance\n\n#### Regulatory Framework\n- **Multi-Jurisdiction Compliance**: Meet requirements globally\n- **Proactive Engagement**: Work with regulators worldwide\n- **Standards Development**: Help create industry standards\n- **Transparency Reports**: Regular public compliance reporting\n\n#### Institutional Security\n- **SOC 2 Type II**: Enterprise security certification\n- **ISO 27001**: International security standards\n- **Bank-Grade Security**: Financial institution level security\n- **Government Compliance**: Meet government security requirements\n\n### Advanced Threat Protection\n**Vision**: Most secure blockchain platform globally\n\n#### Security Innovation\n- **Quantum-Resistant**: Preparation for quantum computing\n- **Zero-Knowledge Security**: Privacy-preserving security\n- **Formal Verification**: Mathematical security proofs\n- **Real-Time Monitoring**: Advanced threat detection\n\n## 🌟 Community & Governance Evolution\n\n### Decentralized Governance 2.0\n\n#### Advanced DAO Structure\n- **Multi-Layer Governance**: Specialized governance councils\n- **Liquid Democracy**: Flexible voting delegation\n- **Global Representation**: Worldwide governance participation\n- **Expert Councils**: Technical and economic advisory bodies\n\n#### Community Empowerment\n- **Community Treasury**: $1B+ community-controlled fund\n- **Proposal System**: Advanced proposal and voting mechanisms\n- **Transparency**: Full transparency in all governance activities\n- **Community Rewards**: Incentives for governance participation\n\n### Global Community Program\n**Target**: 1M+ community members\n\n#### Ambassador Network\n- **Global Ambassadors**: 1,000+ ambassadors worldwide\n- **Regional Leaders**: Community leaders in each major market\n- **Educational Program**: Comprehensive blockchain education\n- **Cultural Events**: Local meetups and conferences\n\n## 🔮 Future Vision & Research\n\n### Emerging Technology Research\n\n#### Research Areas\n- **Quantum Computing**: Quantum-resistant and quantum-enhanced blockchain\n- **Space Technology**: Satellite-based blockchain infrastructure\n- **IoT Integration**: Blockchain for Internet of Things\n- **Biotech Integration**: Blockchain applications in biotechnology\n\n#### Academic Partnerships\n- **University Collaboration**: Research partnerships with top universities\n- **Research Grants**: Fund blockchain research globally\n- **Academic Publications**: Contribute to academic knowledge\n- **Student Programs**: Internships and educational programs\n\n### Sustainability & Social Impact\n**Vision**: Carbon-negative blockchain with positive social impact\n\n#### Environmental Leadership\n- **Carbon Negative**: Offset more carbon than we produce\n- **Green Energy**: 100% renewable energy for operations\n- **Sustainability Reporting**: Transparent environmental impact\n- **Green Innovation**: Blockchain solutions for environmental challenges\n\n#### Social Impact\n- **Financial Inclusion**: Banking the unbanked globally\n- **Education Access**: Blockchain education for underserved communities\n- **Healthcare Innovation**: Blockchain solutions for global health\n- **Poverty Reduction**: Economic empowerment through blockchain\n\n---\n\n*Phase 4 establishes Circle Layer as the global leader in blockchain technology, serving millions of users and pioneering the future of decentralized systems. Through global scale, breakthrough innovation, and positive global impact, we fulfill our vision of powering the decentralized economy of tomorrow.*",
    "frontmatter": {
      "id": "phase-4-expansion",
      "title": "Phase 4 - Global Expansion & Innovation",
      "sidebar_label": "Phase 4 - Expansion",
      "sidebar_position": 4
    },
    "filePath": "roadmap/phase-4-expansion.md",
    "category": "roadmap",
    "url": "/roadmap/phase-4-expansion"
  },
  "security-risk-warnings": {
    "id": "security-risk-warnings",
    "title": "Risk Warnings & Security",
    "content": "# Risk Warnings & Security\n\n## Overview\n\nCircle Layer Blockchain is committed to providing a secure development and testing environment. Users and developers must be aware of important security considerations and risks when participating in our ecosystem.\n\n## General Risk Warnings\n\n### Free Participation Environment\n- **No Charges**: All users and developers can participate in the current test environment and subsequent development stages completely **FREE OF CHARGE**\n- **No Payment Required**: There are **NO CHARGING SCENARIOS** in the test environment\n- **Scam Alert**: Be extremely cautious of anyone requesting payment for testnet access or features\n\n### Test Environment vs Mainnet\n\n#### Critical Distinctions\nUsers **MUST** understand and distinguish between different network environments:\n\n| Environment | Purpose | Asset Value | Risk Level |\n|------------|---------|-------------|------------|\n| **Testnet** | Development & Testing | **NO VALUE** | Low |\n| **Mainnet** | Production | **REAL VALUE** | High |\n\n#### Testnet Warnings\n- **No Asset Value**: Assets generated in the test environment have **NO ECONOMIC VALUE**\n- **Testing Only**: Testnet tokens are for development and testing purposes only\n- **No Trading Value**: Testnet CLAYER tokens cannot be traded or exchanged for real value\n- **Reset Possibility**: Testnet data may be reset during development\n\n#### Mainnet Precautions\n- **Real Assets**: Mainnet will involve real economic value and risk\n- **Irreversible Transactions**: Mainnet transactions cannot be reversed\n- **Security Critical**: Proper security practices are essential\n- **Financial Risk**: Real financial loss is possible on mainnet\n\n## Fraud Prevention\n\n### Counterfeit Currency Fraud\n**⚠️ CRITICAL WARNING**: Protect yourself from counterfeit currency scams:\n\n- **Testnet Tokens Have No Value**: Any attempt to sell or trade testnet CLAYER is fraudulent\n- **Fake Token Sales**: Beware of scammers selling \"early access\" or \"pre-sale\" tokens\n- **Impersonation Scams**: Scammers may impersonate team members or create fake platforms\n- **Verify Authenticity**: Only use official Circle Layer platforms and communication channels\n\n### Official Channel Verification\nCircle Layer **ONLY** announces official information through verified channels:\n\n#### Official Communication Channels\n- **Official Website**: [circlelayer.com](https://circlelayer.com)\n- **Official Documentation**: This documentation site\n- **Official Social Media**: Verified accounts only\n- **Official Email**: @circlelayer.com domain only\n\n#### Red Flags - Unofficial/Fraudulent\n- **Unofficial Websites**: Similar-looking but different domain names\n- **Unverified Social Media**: Accounts without official verification\n- **Email Scams**: Emails from non-@circlelayer.com addresses\n- **Social Media Scams**: Unverified community channels and impersonators\n\n### Website Security\n\n#### Official Website Protection\n- **Correct Domain**: Always verify you're on **circlelayer.com**\n- **HTTPS Security**: Ensure connection is secure (https://)\n- **Bookmark Official Site**: Avoid typing URLs manually\n- **Double-Check URLs**: Be vigilant about similar-looking domains\n\n#### Common Phishing Tactics\n- **Domain Spoofing**: circlelayer.io, circle-layer.com, circlelayer.net\n- **Subdomain Attacks**: fake.circlelayer.com-scam.com\n- **URL Shorteners**: Links that hide the real destination\n- **Urgent Messages**: Fake urgent security warnings or deadlines\n\n## Private Key Security\n\n### Private Key Protection\n**🔐 NEVER SHARE YOUR PRIVATE KEYS**\n\n- **Never Share**: Private keys should NEVER be shared with anyone\n- **Team Never Asks**: Circle Layer team will NEVER ask for private keys\n- **Secure Storage**: Use hardware wallets or secure storage solutions\n- **Backup Safely**: Keep secure, offline backups of your keys\n\n### Phishing Protection\nCommon private key phishing attempts:\n\n- **Fake Support**: Impersonators claiming to provide \"support\"\n- **Urgent Warnings**: Fake security alerts requesting key verification\n- **Prize Scams**: Claims you've won something requiring key access\n- **Migration Scams**: Fake token migration or upgrade processes\n\n### Wallet Security Best Practices\n- **Official Wallets Only**: Use only verified wallet applications\n- **Secure Networks**: Never enter keys on public WiFi\n- **Screen Recording**: Be aware of screen recording malware\n- **Browser Security**: Use secure, updated browsers\n\n## Investment & Financial Warnings\n\n### No Investment Advice\n- **Not Financial Advice**: Circle Layer documentation provides technical information only\n- **DYOR**: Always do your own research before any financial decisions\n- **Regulatory Compliance**: Ensure compliance with local regulations\n- **Risk Assessment**: Understand and assess your personal risk tolerance\n\n### Development Stage Risks\n- **Early Development**: Circle Layer is in active development\n- **Technical Risks**: Software bugs and vulnerabilities possible\n- **Network Changes**: Protocol may change during development\n- **No Guarantees**: No guarantees about future performance or value\n\n## Compliance & Reporting\n\n### Integrity Standards\nCircle Layer maintains the highest standards of business conduct:\n\n- **Fair Practices**: Open, transparent, and fair resource allocation\n- **Evaluation Criteria**: All support policies have clear, public criteria\n- **On-chain Transparency**: Open and transparent on-chain data\n- **Community-First**: Developer and community interests prioritized\n\n### Reporting Security Issues\nIf you encounter suspicious activity or security concerns:\n\n#### Report To\n- **Security Issues**: compliance@circlelayer.com\n- **Provide Details**: Include as much detail as possible\n- **Contact Information**: Provide your contact details for follow-up\n- **Confidentiality**: All reports handled with strict confidentiality\n\n#### What To Report\n- **Questionable Behavior**: Suspicious or unethical conduct\n- **Security Vulnerabilities**: Technical security issues\n- **Fraud Attempts**: Scams or fraudulent activity\n- **Impersonation**: Fake accounts or websites\n\n### Response Process\n- **High Priority**: All valid reports receive immediate attention\n- **Investigation**: Thorough investigation following applicable laws\n- **Privacy Protection**: Reporter privacy protection within legal limits\n- **Top Management**: Direct reporting to senior leadership\n- **Legal Action**: Circle Layer reserves right to pursue legal action against fraud\n\n## Development Safety Guidelines\n\n### Safe Development Practices\n- **Testnet First**: Always test on testnet before mainnet\n- **Code Reviews**: Implement thorough code review processes\n- **Security Audits**: Conduct security audits for production code\n- **Incremental Deployment**: Deploy features incrementally\n\n### Smart Contract Security\n- **Audit Requirements**: Require audits for mainnet contracts\n- **Testing Coverage**: Implement comprehensive test coverage\n- **Upgrade Mechanisms**: Plan for secure contract upgrades\n- **Emergency Procedures**: Implement emergency pause mechanisms\n\n## Community Guidelines\n\n### Communication Ethics\n- **Respectful Interaction**: Maintain respectful community discourse\n- **Accurate Information**: Share only verified, accurate information\n- **No Financial Advice**: Avoid providing financial advice to others\n- **Report Suspicious Activity**: Help protect the community by reporting issues\n\n### Educational Responsibility\n- **Stay Informed**: Keep up with official announcements and updates\n- **Verify Information**: Cross-check information with official sources\n- **Share Knowledge**: Help educate other community members safely\n- **Continuous Learning**: Stay updated on security best practices\n\n## Legal Disclaimers\n\n### Limitation of Liability\n- **Use at Own Risk**: Users participate at their own risk\n- **No Warranties**: No guarantees about software performance\n- **Loss Prevention**: Users responsible for their own asset security\n- **Legal Compliance**: Users must comply with applicable laws\n\n### Regulatory Considerations\n- **Local Laws**: Comply with local cryptocurrency regulations\n- **Tax Obligations**: Understand and fulfill tax obligations\n- **AML/KYC**: Comply with anti-money laundering requirements where applicable\n- **Legal Advice**: Consult legal professionals for complex questions\n\n---\n\n**Remember**: When in doubt, always verify through official channels and prioritize security over convenience. The Circle Layer team will never ask for private keys, passwords, or request payment for testnet access.",
    "frontmatter": {
      "sidebar_position": 1
    },
    "filePath": "security/risk-warnings.md",
    "category": "security",
    "url": "/security/risk-warnings"
  }
} as const;

export const DOCS_METADATA = {
  generatedAt: '2025-07-03T10:28:41.956Z',
  totalDocs: 37,
  categories: ["ai-security","apis-sdks","architecture","community","comparison","development","faqs","getting-started","governance","general","introduction","nodes-validation","roadmap","security"]
} as const;
