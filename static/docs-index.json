[
  {
    "title": "AI Security Benefits",
    "body": "# AI Security Benefits\n\n:::info Phase 2 Development\n🚧 **Coming in Phase 2**: AI Security features are currently in development and will be available in Phase 2 of our roadmap.\n:::\n\n## Overview\n\nCircle Layer's planned AI-powered security features will provide several key benefits for developers and users:\n\n## Key Benefits\n\n### 1. Enhanced Threat Detection\n- Real-time monitoring of smart contract interactions\n- Pattern recognition for suspicious activities\n- Automated threat response system\n\n### 2. Reduced Risk\n- Proactive vulnerability scanning\n- Automated security audits\n- Risk assessment and scoring\n\n### 3. Cost Efficiency\n- Lower security audit costs\n- Reduced insurance premiums\n- Minimized downtime due to security incidents\n\n### 4. Developer Support\n- Automated security recommendations\n- Code quality analysis\n- Best practices enforcement\n\n## Implementation\n\nOur AI security system is built on advanced machine learning models that continuously learn from:\n- Network activity patterns\n- Known attack vectors\n- Security audit results\n- Community feedback\n\n## Getting Started\n\nTo enable AI security features in your project:\n\n1. Enable AI security in your project settings\n2. Configure security parameters\n3. Monitor security dashboard\n4. Review automated recommendations",
    "url": "/ai-security/benefits"
  },
  {
    "title": "How AI Security Works",
    "body": ":::info Phase 2 Development\n🚧 **Coming in Phase 2**: AI Security features are currently in development and will be available in Phase 2 of our roadmap. The documentation below shows the planned capabilities.\n:::\n\n  🤖 AI-Powered Protection\n  How AI Security Works\n  \n    CLayer's planned AI security system will provide real-time protection against threats, vulnerabilities, and attacks through intelligent monitoring and automated response.\n  \n  \n  \n    \n      99.7%\n      Detection Rate\n    \n    \n      &lt;100ms\n      Response Time\n    \n    \n      24/7\n      Protection\n    \n  \n\n  \n    \n  \n\n## 🏗️ System Architecture\n\nCode example:\ngraph TD\n    A[📊 Data Collection Layer] --> B[🧠 AI Analysis Engine]\n    B --> C[⚡ Response System]\n    \n    A1[Transaction Monitor] --> A\n    A2[Contract Tracker] --> A\n    A3[Network Analysis] --> A\n    A4[Behavior Patterns] --> A\n    \n    B1[ML Models] --> B\n    B2[Pattern Recognition] --> B\n    B3[Anomaly Detection] --> B\n    B4[Risk Assessment] --> B\n    \n    C1[Automated Alerts] --> C\n    C2[Threat Mitigation] --> C\n    C3[Security Recommendations] --> C\n    C4[Incident Response] --> C\n\n### 🎯 Core Components\n\n  \n    📊\n    Data Collection Layer\n    \n      \n        Transactions/sec\n        50,000+\n      \n      \n        Data Points\n        1M+\n      \n      \n        Real-time\n        24/7\n      \n    \n    \n      🔍 Transaction monitoring\n      📝 Contract interaction tracking\n      🌐 Network state analysis\n      👤 User behavior patterns\n    \n  \n\n  \n    🧠\n    AI Analysis Engine\n    \n      \n        ML Models\n        12+\n      \n      \n        Accuracy\n        99.7%\n      \n      \n        Response\n        &lt;100ms\n      \n    \n    \n      🤖 Machine learning models\n      🔎 Pattern recognition\n      ⚠️ Anomaly detection\n      📊 Risk assessment algorithms\n    \n  \n\n  \n    ⚡\n    Response System\n    \n      \n        Response Time\n        &lt;1s\n      \n      \n        Threat Block\n        99.9%\n      \n      \n        Uptime\n        99.99%\n      \n    \n    \n      🚨 Automated alerts\n      🛡️ Threat mitigation\n      💡 Security recommendations\n      🔧 Incident response\n    \n  \n\n## 🔒 Security Features Dashboard\n\n  \n    \n      Live Security Monitoring\n      \n      \n        \n          🟢\n          \n            2,847\n            Active Monitors\n          \n        \n        \n          🛡️\n          \n            99.9%\n            Threat Detection\n          \n        \n        \n          ⚡\n          \n            47ms\n            Avg Response\n          \n        \n      \n\n      \n        \n          📈\n          \n            Continuous Transaction Analysis\n            Every transaction is analyzed in real-time using advanced ML algorithms\n            ✅ Active\n          \n        \n        \n          🔗\n          \n            Smart Contract Interaction Tracking\n            Monitor all contract calls and detect suspicious patterns\n            ✅ Active\n          \n        \n        \n          🌐\n          \n            Network State Monitoring\n            Track network health and identify potential attack vectors\n            ✅ Active\n          \n        \n        \n          👥\n          \n            User Behavior Analysis\n            Detect unusual user patterns that may indicate compromised accounts\n            ✅ Active\n          \n        \n      \n    \n  \n\n  \n    \n      AI-Powered Threat Detection\n      \n      \n        \n          \n            🔴 High Risk\n            0 Active\n          \n          \n            🦠 Smart contract exploits\n            💰 Large fund movements\n            🎭 Flash loan attacks\n            🔓 Governance attacks\n          \n        \n        \n        \n          \n            🟡 Medium Risk\n            3 Monitoring\n          \n          \n            📊 Unusual trading patterns\n            🔄 Repetitive transactions\n            🎯 MEV attacks\n            📈 Price manipulation\n          \n        \n        \n        \n          \n            🟢 Low Risk\n            12 Normal\n          \n          \n            ⚠️ Minor anomalies\n            🔍 Pattern variations\n            📋 Compliance checks\n            🛡️ Preventive monitoring\n          \n        \n      \n\n      \n        🧠 Detection Algorithms\n        \n          \n            Pattern Recognition\n            99.8% Accuracy\n          \n          \n            Anomaly Detection\n            99.5% Accuracy\n          \n          \n            Risk Scoring\n            99.7% Accuracy\n          \n          \n            Vulnerability Assessment\n            99.3% Accuracy\n          \n        \n      \n    \n  \n\n  \n    \n      Intelligent Response System\n      \n      \n        \n          1\n          \n            🔍 Threat Detection\n            AI identifies potential security threat\n            &lt; 100ms\n          \n        \n        →\n        \n          2\n          \n            📊 Risk Assessment\n            Calculate threat severity and impact\n            &lt; 200ms\n          \n        \n        →\n        \n          3\n          \n            ⚡ Automated Action\n            Execute appropriate response\n            &lt; 500ms\n          \n        \n        →\n        \n          4\n          \n            📢 Alert & Report\n            Notify stakeholders and log incident\n            &lt; 1s\n          \n        \n      \n\n      \n        🛠️ Response Actions\n        \n          \n            🤖 Automatic Actions\n            \n              🚫 Block suspicious transactions\n              🔒 Pause affected contracts\n              📢 Send immediate alerts\n              🛡️ Enable protection mode\n            \n          \n          \n            👤 Manual Review\n            \n              📋 Generate detailed reports\n              🔍 Request human verification\n              📊 Provide recommendation options\n              🔧 Suggest mitigation strategies\n            \n          \n        \n      \n    \n  \n\n## 🔧 Integration Guide\n\n  \n    👩‍💻\n    For Developers\n    \n      \n        Step 1\n        Enable AI Security\n        Add security module to your project configuration\n        \n\nCode example:\n// Enable AI security\naiSecurity.enable({\n  level: 'advanced',\n  monitoring: true\n})\n\n      \n      \n        Step 2\n        Configure Parameters\n        Set security thresholds and response preferences\n        \n          🎚️ Risk tolerance\n          ⚡ Response speed\n          📊 Monitoring depth\n        \n      \n      \n        Step 3\n        Monitor Dashboard\n        Track security metrics and threats in real-time\n        \n          🛡️ 99.9% Protected\n          🔍 0 Threats\n          ⚡ 45ms Response\n        \n      \n      \n        Step 4\n        Review Insights\n        Get AI-powered security recommendations\n        \n          💡 Code optimization suggestions\n          🔒 Security best practices\n          📈 Performance improvements\n        \n      \n    \n  \n\n  \n    👤\n    For Users\n    \n      \n        🔐 Wallet Protection\n        Enable advanced security features in your wallet\n        \n          \n            🛡️ Transaction monitoring\n            ON\n          \n          \n            ⚠️ Risk alerts\n            ON\n          \n          \n            🔍 Contract verification\n            ON\n          \n        \n      \n      \n        ⚙️ Security Preferences\n        Customize your security settings\n        \n          \n            🎚️ Risk tolerance\n            \n              \n            \n            Conservative\n          \n          \n            📢 Alert frequency\n            \n              \n            \n            High\n          \n        \n      \n      \n        📊 Security Monitoring\n        View your personal security dashboard\n        \n          \n            847\n            Transactions Protected\n          \n          \n            0\n            Threats Blocked\n          \n          \n            A+\n            Security Score\n          \n        \n      \n    \n  \n\n  \n    🏆 Security Guarantee\n    CLayer's AI security system provides enterprise-grade protection with a 99.9% threat detection rate and sub-second response times. Your assets and smart contracts are protected by the most advanced blockchain security technology available.\n    \n      \n        99.9%\n        Threat Detection\n      \n      \n        &lt;1s\n        Response Time\n      \n      \n        24/7\n        Monitoring\n      \n      \n        $0\n        Lost to Attacks",
    "url": "/ai-security/how-it-works"
  },
  {
    "title": "APIs & SDKs Overview",
    "body": "# APIs & SDKs Overview\n\nCircle Layer provides comprehensive APIs and SDKs for seamless blockchain integration. This section covers all the endpoints, libraries, and tools you need for development.\n\n## 🔧 Available APIs\n\n### JSON-RPC API\n- **Endpoint**: `https://testnet-rpc.clayer.io`\n- **Compatibility**: Full Ethereum JSON-RPC compatibility\n- **Use Cases**: Transaction submission, contract deployment, balance queries, block data\n\n### WebSocket API\n- **Endpoint**: `wss://testnet-rpc.clayer.io`\n- **Purpose**: Real-time blockchain events and subscriptions\n- **Features**: Block subscriptions, transaction notifications, contract events\n- **Use Cases**: Live updates, event monitoring, real-time dApp features\n\n### GraphQL API\n- **Endpoint**: `https://testnet.clayer.io/graphiql`\n- **Purpose**: Flexible, efficient data queries with filtering capabilities\n- **Status**: Available for testing with enhanced querying and indexing\n\n## 📚 Supported Web3 Libraries\n\nCircle Layer works seamlessly with all popular Ethereum libraries:\n\n### Web3.js\n\nCode example:\nconst Web3 = require('web3');\nconst web3 = new Web3('https://testnet-rpc.clayer.io');\n\n// Standard Ethereum methods work identically\nconst balance = await web3.eth.getBalance(address);\nconst gasPrice = await web3.eth.getGasPrice();\n\n### Ethers.js\n\nCode example:\nconst { ethers } = require('ethers');\nconst provider = new ethers.providers.JsonRpcProvider('https://testnet-rpc.clayer.io');\n\n// Same patterns as Ethereum development\nconst wallet = new ethers.Wallet(privateKey, provider);\nconst contract = new ethers.Contract(address, abi, wallet);\n\n### Viem\n\nCode example:\n\nconst client = createPublicClient({\n  transport: http('https://testnet-rpc.clayer.io')\n});\n\n// Modern TypeScript-first Web3 library support\n\n## 🛠️ Development Environment Integration\n\n### Smart Contract Development\n- **Hardhat**: Full development environment with CLayer network configuration\n- **Truffle**: Complete framework support with CLAYER gas configuration  \n- **Remix**: Browser-based IDE with injected provider support\n- **Foundry**: Rust-based toolkit for advanced smart contract development\n\n### Frontend Frameworks\n- **React**: Complete integration examples with Web3 hooks\n- **Vue.js**: Component libraries and reactive Web3 integration\n- **Angular**: Service-based Web3 integration patterns\n- **Next.js**: Server-side rendering with Web3 provider handling\n\n## 📖 API Reference Categories\n\n1. **[RPC Endpoints](./rpc-endpoints)** - Complete JSON-RPC API documentation\n2. **[Web3 Libraries](./web3-libraries)** - Integration examples and configurations\n3. **[Smart Contract Development](../development/writing-smart-contracts)** - Contract deployment guides\n4. **[Web3 Integration](../development/web3-integration)** - Frontend integration patterns\n\n## 📊 API Status & Availability\n\n| Service | Status | Documentation | Rate Limits |\n|---------|--------|---------------|-------------|\n| JSON-RPC API | 🟢 Live | Complete | Standard Ethereum limits |\n| WebSocket API | 🟢 Live | Complete | 100 connections/IP |\n| Block Explorer API | 🟢 Live | Available | 1000 requests/hour |\n| GraphQL API | 🟢 Live | Available | 1000 requests/hour |\n\n## 🔒 API Security & Best Practices\n\n### Rate Limiting\n- **JSON-RPC**: Standard Ethereum rate limits apply\n- **WebSocket**: Maximum 100 concurrent connections per IP\n- **Public Endpoints**: Fair usage policy enforced\n\n### Error Handling\n\nCode example:\n// Proper error handling example\ntry {\n  const result = await web3.eth.sendTransaction(txParams);\n  console.log('Transaction sent:', result.transactionHash);\n} catch (error) {\n  if (error.code === -32603) {\n    console.error('Internal error:', error.message);\n  } else if (error.code === -32000) {\n    console.error('Transaction failed:', error.message);\n  }\n}\n\n### Network Resilience\n\nCode example:\n// Multiple endpoint configuration for redundancy\nconst providers = [\n  'https://testnet-rpc.clayer.io',\n  // Additional endpoints can be added for failover\n];\n\nconst provider = new ethers.providers.FallbackProvider(\n  providers.map(url => new ethers.providers.JsonRpcProvider(url))\n);\n\n## 🚀 Getting Started Quick Guide\n\n### 1. Basic Setup\n\nCode example:\n# Install required dependencies\nnpm install web3 ethers\n# or\nnpm install @wagmi/core viem\n\n### 2. Network Configuration\n\nCode example:\n// Basic provider setup\nconst provider = new ethers.providers.JsonRpcProvider('https://testnet-rpc.clayer.io');\n\n// Or with Web3.js\nconst web3 = new Web3('https://testnet-rpc.clayer.io');\n\n### 3. Contract Interaction\n\nCode example:\n// Deploy or interact with contracts\nconst contract = new ethers.Contract(contractAddress, abi, provider);\nconst result = await contract.someMethod();\n\n## 🆘 Developer Support\n\n### Documentation Resources\n- 📖 Complete API reference documentation\n- 💬 Community support via [Telegram](https://t.me/clayer_io)\n- 🐛 Issue tracking on [GitHub](https://github.com/clayer/docs)\n- 📧 Direct developer support available\n\n### Integration Examples\n- **React dApp**: [Complete React integration example](../development/web3-integration)\n- **Smart Contracts**: [Contract development guide](../development/writing-smart-contracts)\n- **Wallet Connection**: [MetaMask and WalletConnect setup](../development/wallet-connect-integration)\n\n## Next Steps\n\nReady to start building? Check out our development guides:\n\n- [RPC API Documentation](./rpc-endpoints) - Complete endpoint reference\n- [Web3 Integration Examples](./web3-libraries) - Library-specific guides  \n- [Smart Contract Development](../development/writing-smart-contracts) - Contract deployment\n- [Frontend Integration](../development/web3-integration) - dApp development patterns",
    "url": "/apis-sdks/index"
  },
  {
    "title": "RPC Endpoints",
    "body": "# RPC Endpoints\n\n## Overview\n\nCircle Layer provides multiple RPC endpoints for interacting with the network:\n\n## Public Endpoints\n\n### Testnet\n\nCode example:\n# HTTP RPC\nhttps://testnet-rpc.clayer.io\n\n# WebSocket\nwss://testnet-rpc.clayer.io\n\n# Block Explorer\nhttps://explorer-testnet.clayer.io\n\n# Faucet\nhttps://faucet.clayer.io\n\n# Faucet API\nhttps://faucet-api.clayer.io\n\n## Network Configuration\n\n- **Chain ID**: 28525\n- **Network Name**: CLayer Testnet\n- **Currency Symbol**: CLAYER\n- **Currency Decimals**: 18\n- **Block Time**: 3 seconds\n- **Transaction Finality**: 1-3 seconds\n\n## Authentication\n\nAPI endpoints use standard authentication methods. For detailed authentication methods, refer to the API documentation.\n\n## Rate Limits\n\nRate limiting information is not currently specified. Please check the API documentation for current limits.\n\n## Smart Contract Examples\n\n### Deployed Example Contract\n- **Contract Address**: [0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB)\n- **Source Code**: [View on Explorer](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract)\n- **ABI**: [Contract ABI](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract_abi)\n- **Deployment**: Manual Deploy\n\n## Methods\n\n### Standard Ethereum Methods\n- eth_getBalance\n- eth_sendTransaction\n- eth_getTransactionReceipt\n- eth_blockNumber\n\n### CLayer Specific Methods\n\n#### Validator & Staking Methods\n- `clayer_getValidatorInfo(validatorAddress)` - Get validator details and performance metrics\n- `clayer_getStakingRewards(delegatorAddress)` - Get staking rewards for a delegator\n- `clayer_getNetworkStats()` - Get current network statistics and performance\n- `clayer_getValidatorList(status)` - Get list of validators by status (active/jailed/unbonding)\n- `clayer_getDelegationInfo(delegatorAddress, validatorAddress)` - Get delegation details\n- `clayer_getSlashingInfo(validatorAddress)` - Get validator slashing history and status\n\n#### Network Governance Methods\n- `clayer_getGovernanceProposals(status)` - Get governance proposals by status\n- `clayer_getVotingPower(address)` - Get voting power for governance\n- `clayer_getParameterInfo(parameter)` - Get current network parameter values\n- `clayer_getUpgradeInfo()` - Get planned network upgrade information\n\n#### DeFi & Bridge Methods\n- `clayer_getBridgeStatus(chainId)` - Get cross-chain bridge status\n- `clayer_getTokenInfo(tokenAddress)` - Get token details for bridged assets\n- `clayer_getLiquidityPools()` - Get available liquidity pools on native DEX\n- `clayer_getPriceFeeds(pair)` - Get price feed data from oracles\n\n#### Security & Compliance Methods\n- `clayer_reportSuspiciousActivity(evidence)` - Report suspicious network activity\n- `clayer_getIntegrityReport(blockRange)` - Get network integrity report for block range\n- `clayer_getComplianceStatus(address)` - Check compliance status of an address\n- `clayer_getAuditLog(address, timeRange)` - Get audit log for address activity\n\n#### Performance & Analytics Methods\n- `clayer_getNetworkMetrics(timeRange)` - Get detailed network performance metrics\n- `clayer_getTxPoolStats()` - Get transaction pool statistics\n- `clayer_getValidatorPerformance(address, timeRange)` - Get validator performance history\n- `clayer_getGasEstimation(txData)` - Get gas estimation for transaction\n\n## Examples\n\n### Basic Ethereum Methods\n\n#### Get Balance\n\nCode example:\nconst response = await fetch('https://testnet-rpc.clayer.io', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'eth_getBalance',\n    params: ['0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8', 'latest'],\n    id: 1,\n  }),\n});\n\nconst result = await response.json();\nconsole.log('Balance in wei:', result.result);\n\n#### Get Transaction Receipt\n\nCode example:\nconst response = await fetch('https://testnet-rpc.clayer.io', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'eth_getTransactionReceipt',\n    params: ['0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238'],\n    id: 1,\n  }),\n});\n\nconst receipt = await response.json();\nconsole.log('Transaction status:', receipt.result.status);\n\n### CLayer Specific Methods\n\n#### Get Validator Information\n\nCode example:\nasync function getValidatorInfo(validatorAddress) {\n  const response = await fetch('https://testnet-rpc.clayer.io', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'clayer_getValidatorInfo',\n      params: [validatorAddress],\n      id: 1,\n    }),\n  });\n  \n  const result = await response.json();\n  return result.result;\n}\n\n// Example usage\nconst validatorInfo = await getValidatorInfo('0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8');\nconsole.log('Validator status:', validatorInfo.status);\nconsole.log('Total stake:', validatorInfo.totalStake);\nconsole.log('Commission rate:', validatorInfo.commissionRate);\nconsole.log('Uptime:', validatorInfo.uptime);\n\n#### Get Staking Rewards\n\nCode example:\nasync function getStakingRewards(delegatorAddress) {\n  const response = await fetch('https://testnet-rpc.clayer.io', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'clayer_getStakingRewards',\n      params: [delegatorAddress],\n      id: 1,\n    }),\n  });\n  \n  const result = await response.json();\n  return result.result;\n}\n\n// Example usage\nconst rewards = await getStakingRewards('0x123...');\nconsole.log('Pending rewards:', rewards.pendingRewards);\nconsole.log('Total earned:', rewards.totalEarned);\nconsole.log('Validators:', rewards.validatorRewards);\n\n#### Get Network Statistics\n\nCode example:\nasync function getNetworkStats() {\n  const response = await fetch('https://testnet-rpc.clayer.io', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'clayer_getNetworkStats',\n      params: [],\n      id: 1,\n    }),\n  });\n  \n  const result = await response.json();\n  return result.result;\n}\n\n// Example usage\nconst stats = await getNetworkStats();\nconsole.log('Current TPS:', stats.currentTPS);\nconsole.log('Active validators:', stats.activeValidators);\nconsole.log('Total staked:', stats.totalStaked);\nconsole.log('Network uptime:', stats.uptime);\n\n### Integrity & Compliance Methods\n\n#### Report Suspicious Activity\n\nCode example:\nasync function reportSuspiciousActivity(evidence) {\n  const response = await fetch('https://testnet-rpc.clayer.io', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer YOUR_API_KEY', // Required for security methods\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'clayer_reportSuspiciousActivity',\n      params: [evidence],\n      id: 1,\n    }),\n  });\n  \n  const result = await response.json();\n  return result.result;\n}\n\n// Example usage\nconst evidence = {\n  type: 'double_signing',\n  validatorAddress: '0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8',\n  blockHeight: 1234567,\n  evidence: 'encoded_proof_data',\n  reporterAddress: '0x123...'\n};\n\nconst reportId = await reportSuspiciousActivity(evidence);\nconsole.log('Report submitted with ID:', reportId);\n\n#### Get Integrity Report\n\nCode example:\nasync function getIntegrityReport(startBlock, endBlock) {\n  const response = await fetch('https://testnet-rpc.clayer.io', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'clayer_getIntegrityReport',\n      params: [{ start: startBlock, end: endBlock }],\n      id: 1,\n    }),\n  });\n  \n  const result = await response.json();\n  return result.result;\n}\n\n// Example usage\nconst report = await getIntegrityReport(1234500, 1234600);\nconsole.log('Blocks analyzed:', report.blocksAnalyzed);\nconsole.log('Issues found:', report.issuesFound);\nconsole.log('Security score:', report.securityScore);\nconsole.log('Anomalies:', report.anomalies);\n\n#### Check Compliance Status\n\nCode example:\nasync function getComplianceStatus(address) {\n  const response = await fetch('https://testnet-rpc.clayer.io', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'clayer_getComplianceStatus',\n      params: [address],\n      id: 1,\n    }),\n  });\n  \n  const result = await response.json();\n  return result.result;\n}\n\n// Example usage\nconst status = await getComplianceStatus('0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8');\nconsole.log('Compliance level:', status.level);\nconsole.log('Risk score:', status.riskScore);\nconsole.log('Flags:', status.flags);\nconsole.log('Last updated:', status.lastUpdated);\n\n## SDK Examples\n\n### CLayer JavaScript SDK\n\n#### Installation\n\nCode example:\nnpm install @clayer/sdk\n\n#### Basic Setup\n\nCode example:\n\n// Initialize SDK\nconst clayer = new CircleLayerSDK({\n  network: 'testnet', // or 'mainnet'\n  rpcUrl: 'https://testnet-rpc.clayer.io',\n  apiKey: 'your-api-key' // Optional for enhanced features\n});\n\n// Connect to network\nawait clayer.connect();\n\n#### Validator Operations\n\nCode example:\n// Get all validators\nconst validators = await clayer.validators.getAll();\n\n// Get specific validator\nconst validator = await clayer.validators.getById('0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8');\n\n// Check validator performance\nconst performance = await clayer.validators.getPerformance(\n  '0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8',\n  { days: 30 }\n);\n\n// Delegate to validator\nconst tx = await clayer.staking.delegate(\n  '0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8', // validator address\n  '1000000000000000000000' // 1000 CLAYER in wei\n);\n\n#### Staking Operations\n\nCode example:\n// Get staking portfolio\nconst portfolio = await clayer.staking.getPortfolio('0x123...');\n\n// Calculate potential rewards\nconst rewards = await clayer.staking.calculateRewards(\n  '0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8', // validator\n  '1000000000000000000000', // amount in wei\n  { days: 365 } // time period\n);\n\n// Claim rewards\nconst claimTx = await clayer.staking.claimRewards('0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8');\n\n// Undelegate\nconst undelegateTx = await clayer.staking.undelegate(\n  '0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8',\n  '500000000000000000000' // 500 CLAYER in wei\n);\n\n#### Bridge Operations\n\nCode example:\n// Check bridge status\nconst bridgeStatus = await clayer.bridge.getStatus('ethereum');\n\n// Get bridge fees\nconst fees = await clayer.bridge.getFees('ethereum', 'USDC');\n\n// Initiate bridge transfer\nconst bridgeTx = await clayer.bridge.transfer({\n  fromChain: 'ethereum',\n  toChain: 'clayer',\n  token: 'USDC',\n  amount: '1000000000', // 1000 USDC\n  recipient: '0x123...'\n});\n\n// Track bridge transfer\nconst status = await clayer.bridge.getTransferStatus(bridgeTx.hash);\n\n#### Governance Operations\n\nCode example:\n// Get active proposals\nconst proposals = await clayer.governance.getProposals('active');\n\n// Get voting power\nconst votingPower = await clayer.governance.getVotingPower('0x123...');\n\n// Vote on proposal\nconst voteTx = await clayer.governance.vote(\n  'proposal-123',\n  'yes', // vote option\n  '1000000000000000000000' // voting power to use\n);\n\n// Create proposal (requires minimum voting power)\nconst proposalTx = await clayer.governance.createProposal({\n  title: 'Increase Block Gas Limit',\n  description: 'Proposal to increase block gas limit to improve throughput',\n  changes: [\n    {\n      parameter: 'blockGasLimit',\n      newValue: '15000000000000'\n    }\n  ]\n});\n\n### Python SDK\n\n#### Installation\n\nCode example:\npip install clayer-sdk\n\n#### Basic Usage\n\nCode example:\nfrom clayer import CircleLayerSDK\n\n# Initialize SDK\nclayer = CircleLayerSDK(\n    network='testnet',\n    rpc_url='https://testnet-rpc.clayer.io',\n    api_key='your-api-key'\n)\n\n# Get network stats\nstats = clayer.network.get_stats()\nprint(f\"Current TPS: {stats['currentTPS']}\")\nprint(f\"Active validators: {stats['activeValidators']}\")\n\n# Get validator info\nvalidator = clayer.validators.get_info('0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8')\nprint(f\"Validator status: {validator['status']}\")\nprint(f\"Total stake: {validator['totalStake']}\")\n\n# Check staking rewards\nrewards = clayer.staking.get_rewards('0x123...')\nprint(f\"Pending rewards: {rewards['pendingRewards']}\")\n\n### WebSocket Subscriptions\n\n#### Subscribe to New Blocks\n\nCode example:\nconst ws = new WebSocket('wss://testnet-rpc.clayer.io');\n\nws.onopen = () => {\n  // Subscribe to new block headers\n  ws.send(JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'eth_subscribe',\n    params: ['newHeads'],\n    id: 1\n  }));\n};\n\nws.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  if (data.params) {\n    console.log('New block:', data.params.result.number);\n    console.log('Block hash:', data.params.result.hash);\n  }\n};\n\n#### Subscribe to Validator Events\n\nCode example:\nconst ws = new WebSocket('wss://testnet-rpc.clayer.io');\n\nws.onopen = () => {\n  // Subscribe to validator status changes\n  ws.send(JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'clayer_subscribe',\n    params: ['validatorEvents', {\n      events: ['jailed', 'unjailed', 'slashed', 'commission_changed']\n    }],\n    id: 1\n  }));\n};\n\nws.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  if (data.params && data.params.subscription === 'validatorEvents') {\n    const event = data.params.result;\n    console.log('Validator event:', event.type);\n    console.log('Validator:', event.validatorAddress);\n    console.log('Details:', event.data);\n  }\n};\n\n#### Subscribe to Staking Events\n\nCode example:\nconst ws = new WebSocket('wss://testnet-rpc.clayer.io');\n\nws.onopen = () => {\n  // Subscribe to staking events for specific address\n  ws.send(JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'clayer_subscribe',\n    params: ['stakingEvents', {\n      address: '0x123...',\n      events: ['delegation', 'undelegation', 'rewards_claimed']\n    }],\n    id: 1\n  }));\n};\n\nws.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  if (data.params && data.params.subscription === 'stakingEvents') {\n    const stakingEvent = data.params.result;\n    console.log('Staking event:', stakingEvent.type);\n    console.log('Amount:', stakingEvent.amount);\n    console.log('Validator:', stakingEvent.validator);\n  }\n};\n\n## Advanced Features\n\n### Batch Requests\n\nCode example:\n// Execute multiple RPC calls in a single request\nconst batchRequest = [\n  {\n    jsonrpc: '2.0',\n    method: 'eth_getBalance',\n    params: ['0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8', 'latest'],\n    id: 1\n  },\n  {\n    jsonrpc: '2.0',\n    method: 'clayer_getValidatorInfo',\n    params: ['0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8'],\n    id: 2\n  },\n  {\n    jsonrpc: '2.0',\n    method: 'clayer_getNetworkStats',\n    params: [],\n    id: 3\n  }\n];\n\nconst response = await fetch('https://testnet-rpc.clayer.io', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(batchRequest),\n});\n\nconst results = await response.json();\n// results is an array with responses for each request\n\n### Error Handling\n\nCode example:\nasync function makeRPCCall(method, params) {\n  try {\n    const response = await fetch('https://testnet-rpc.clayer.io', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        method: method,\n        params: params,\n        id: Date.now()\n      }),\n    });\n\n    const result = await response.json();\n    \n    if (result.error) {\n      throw new Error(`RPC Error ${result.error.code}: ${result.error.message}`);\n    }\n    \n    return result.result;\n  } catch (error) {\n    console.error('RPC call failed:', error);\n    throw error;\n  }\n}\n\n// Example usage with error handling\ntry {\n  const balance = await makeRPCCall('eth_getBalance', ['0x123...', 'latest']);\n  console.log('Balance:', balance);\n} catch (error) {\n  console.error('Failed to get balance:', error.message);\n}\n\n### Rate Limiting & Best Practices\n\nCode example:\nclass CircleLayerRPCClient {\n  constructor(rpcUrl, options = {}) {\n    this.rpcUrl = rpcUrl;\n    this.maxRetries = options.maxRetries || 3;\n    this.retryDelay = options.retryDelay || 1000;\n    this.timeout = options.timeout || 30000;\n  }\n\n  async call(method, params, retryCount = 0) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n      const response = await fetch(this.rpcUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: method,\n          params: params,\n          id: Date.now() + Math.random()\n        }),\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      \n      if (result.error) {\n        // Handle rate limiting\n        if (result.error.code === -32005) { // Rate limit exceeded\n          if (retryCount  setTimeout(resolve, this.retryDelay * (retryCount + 1)));\n            return this.call(method, params, retryCount + 1);\n          }\n        }\n        throw new Error(`RPC Error ${result.error.code}: ${result.error.message}`);\n      }\n      \n      return result.result;\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        throw new Error('Request timeout');\n      }\n      \n      if (retryCount  setTimeout(resolve, this.retryDelay * (retryCount + 1)));\n        return this.call(method, params, retryCount + 1);\n      }\n      \n      throw error;\n    }\n  }\n\n  isRetriableError(error) {\n    // Retry on network errors, timeouts, and server errors\n    return error.message.includes('fetch') || \n           error.message.includes('timeout') || \n           error.message.includes('5');\n  }\n}\n\n// Usage\nconst client = new CircleLayerRPCClient('https://testnet-rpc.clayer.io', {\n  maxRetries: 5,\n  retryDelay: 2000,\n  timeout: 30000\n});\n\nconst balance = await client.call('eth_getBalance', ['0x123...', 'latest']);\n\n## Security & Authentication\n\n### API Key Authentication\n\nCode example:\n// For enhanced features that require authentication\nconst response = await fetch('https://testnet-rpc.clayer.io', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_API_KEY',\n    'X-Client-Version': '1.0.0'\n  },\n  body: JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'clayer_getComplianceStatus',\n    params: ['0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8'],\n    id: 1,\n  }),\n});\n\n### Signed Requests (for sensitive operations)\n\nCode example:\n\nasync function makeSignedRequest(method, params, privateKey) {\n  const timestamp = Date.now();\n  const nonce = Math.random().toString(36).substring(7);\n  \n  // Create message to sign\n  const message = JSON.stringify({\n    method,\n    params,\n    timestamp,\n    nonce\n  });\n  \n  // Sign the message\n  const wallet = new ethers.Wallet(privateKey);\n  const signature = await wallet.signMessage(message);\n  \n  const response = await fetch('https://testnet-rpc.clayer.io', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Signature': signature,\n      'X-Timestamp': timestamp.toString(),\n      'X-Nonce': nonce,\n      'X-Address': wallet.address\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: method,\n      params: params,\n      id: 1,\n    }),\n  });\n  \n  return response.json();\n}\n\n// Example: Report suspicious activity with signed request\nconst evidence = {\n  type: 'double_signing',\n  validatorAddress: '0x742d35Cc6634C0532925a3b8D1b9C07dDE00e6E8',\n  blockHeight: 1234567,\n  evidence: 'encoded_proof_data'\n};\n\nconst result = await makeSignedRequest(\n  'clayer_reportSuspiciousActivity',\n  [evidence],\n  'your-private-key'\n);\n\n## Resources\n\n### Official Documentation\n- **API Reference**: https://explorer-testnet.clayer.io/api-docs\n- **SDK Documentation**: https://docs.clayer.io/sdk\n- **WebSocket API**: https://docs.clayer.io/websocket\n\n### Development Tools\n- **GraphQL Endpoint**: https://explorer-testnet.clayer.io/graphiql\n- **API Testing**: Use Postman collection or curl examples\n\n### Community & Support\n- **X (Twitter)**: https://x.com/clayer_io\n- **Telegram**: https://t.me/clayer_io\n- **GitHub Issues**: https://github.com/clayer/rpc-issues\n\n### Rate Limits & Performance\n- **Rate Limit**: 100 requests/minute for free tier\n- **Enhanced Tier**: 1000 requests/minute with API key\n- **WebSocket Connections**: 10 concurrent connections per IP\n- **Batch Requests**: Maximum 10 requests per batch\n\nCode example:\nconst ws = new WebSocket('wss://testnet-rpc.clayer.io');\nws.send(JSON.stringify({\n  jsonrpc: '2.0',\n  method: 'eth_subscribe',\n  params: ['newHeads'],\n  id: 1,\n}));\n\n### Interact with Example Contract\n\nCode example:\n// Using the deployed example contract\nconst contractAddress = '0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB';\n\n// Get contract interaction examples\nconst response = await fetch('https://testnet-rpc.clayer.io', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'eth_call',\n    params: [{\n      to: contractAddress,\n      data: '0x...' // Method call data\n    }, 'latest'],\n    id: 1,\n  }),\n});",
    "url": "/apis-sdks/rpc-endpoints"
  },
  {
    "title": "Web3 Libraries",
    "body": "# Web3 Libraries\n\n## Overview\n\nCircle Layer supports various Web3 libraries for interacting with the testnet. All standard Ethereum Web3 libraries work with CLayer using the same patterns.\n\n`CLayer Blockchain` is compatible with `Ethereum`'s ecosystem，support all `Ethereum`'s `RPC` API and SDK.\n\n### RPC Compatibility\n[RPC Method List](https://ethereum.org/en/developers/docs/apis/json-rpc/)\n\nExample:\n\nCode example:\ncurl -s -H 'content-type:application/json' -d '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":67}' https://testnet-rpc.clayer.io\n\n## Network Configuration\n\n### CLayer Testnet\n- **RPC URL**: https://testnet-rpc.clayer.io\n- **WebSocket**: wss://testnet-rpc.clayer.io\n- **Chain ID**: 28525\n- **Currency**: CLAYER\n\n## Supported Libraries\n\n### 1. ethers.js\n\nCode example:\n\n// HTTP Provider\nconst provider = new ethers.providers.JsonRpcProvider('https://testnet-rpc.clayer.io');\n\n// WebSocket Provider\nconst wsProvider = new ethers.providers.WebSocketProvider('wss://testnet-rpc.clayer.io');\n\n// Wallet setup\nconst wallet = new ethers.Wallet(privateKey, provider);\n\n// Check CLAYER balance\nconst balance = await wallet.getBalance();\nconsole.log('Balance:', ethers.utils.formatEther(balance), 'CLAYER');\n\n### 2. web3.js\n\nCode example:\nconst Web3 = require('web3')\n\n// HTTP Provider\nconst web3 = new Web3('https://testnet-rpc.clayer.io');\n\n// WebSocket Provider\nconst webSocketWeb3 = new Web3('wss://testnet-rpc.clayer.io');\n\n// Get chain info\nasync function getChainId() {\n    const web3 = new Web3('https://testnet-rpc.clayer.io')\n    let chainId = await web3.eth.getChainId()\n    console.log(`chain id: ${chainId}`)\n    return chainId\n}\n\n// Generate account\nfunction generateAccount() {\n    const Web3Accounts = require('web3-eth-accounts')\n    \n    let account = new Web3Accounts().create()\n    //do not do this on prd env\n    console.log(`account generated. address: ${account.address}, private key: ${account.privateKey}`)\n    return account\n}\n\n// Build transaction\nasync function transfer(fromAccount, to, value){\n    const web3 = new Web3('https://testnet-rpc.clayer.io')\n    let chainId = await web3.eth.getChainId()\n    let nonce = await web3.eth.getTransactionCount(fromAccount.address)\n    let gasPrice = await web3.eth.getGasPrice()\n\n    let unsigned = {\n        from: fromAccount.address,\n        to,\n        value: web3.utils.numberToHex(web3.utils.toWei(value, 'ether')),\n        gasPrice,\n        nonce,\n        chainId,\n    }\n\n    unsigned.gas = await web3.eth.estimateGas(unsigned)\n\n    let signed = await fromAccount.signTransaction(unsigned)\n    return signed\n}\n\n// Check CLAYER balance\nconst balance = await web3.eth.getBalance(account.address);\nconsole.log('Balance:', web3.utils.fromWei(balance, 'ether'), 'CLAYER');\n\n### 3. Web3.py\n\nCode example:\nfrom web3 import Web3\n\n# HTTP Provider\nw3 = Web3(Web3.HTTPProvider('https://testnet-rpc.clayer.io'))\n\n# Account setup\naccount = w3.eth.account.from_key(private_key)\n\n# Check CLAYER balance\nbalance = w3.eth.get_balance(account.address)\nprint(f'Balance: {w3.from_wei(balance, \"ether\")} CLAYER')\n\n## CLayer Specific Features\n\n### Network Information\n\nCode example:\n// Get network information\nconst network = await provider.getNetwork();\nconsole.log('Chain ID:', network.chainId); // 28525\nconsole.log('Name:', network.name);\n\n// Current gas price (in CLAYER)\nconst gasPrice = await provider.getGasPrice();\nconsole.log('Gas Price:', ethers.utils.formatUnits(gasPrice, 'gwei'), 'Gwei');\n\n### Transaction with CLAYER\n\nCode example:\n// Send CLAYER transaction\nconst transaction = {\n  to: '0x...',\n  value: ethers.utils.parseEther('1'), // 1 CLAYER\n  gasPrice: ethers.utils.parseUnits('21', 'gwei'), // 0.000021 CLAYER\n  gasLimit: 21000\n};\n\nconst tx = await wallet.sendTransaction(transaction);\nconst receipt = await tx.wait();\nconsole.log('Transaction confirmed:', receipt.transactionHash);\n\n### Smart Contract Interaction\n\nCode example:\n// Example contract interaction\nconst contractAddress = '0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB';\nconst contract = new ethers.Contract(contractAddress, abi, wallet);\n\n// Call contract method\nconst result = await contract.someMethod();\n\n// Send transaction to contract (using CLAYER for gas)\nconst tx = await contract.someWriteMethod(params, {\n  gasPrice: ethers.utils.parseUnits('21', 'gwei'), // CLAYER gas price\n  gasLimit: 100000\n});\n\n## Best Practices\n\n### 1. Network Configuration\n\nCode example:\n// Always verify network\nconst network = await provider.getNetwork();\nif (network.chainId !== 28525) {\n  throw new Error('Please connect to CLayer Testnet');\n}\n\n### 2. Gas Management\n\nCode example:\n// Use appropriate gas settings for CLayer\nconst gasPrice = ethers.utils.parseUnits('21', 'gwei'); // 0.000021 CLAYER\nconst gasLimit = await contract.estimateGas.methodName(params);\n\n### 3. Error Handling\n\nCode example:\ntry {\n  const tx = await contract.someMethod(params);\n  const receipt = await tx.wait();\n} catch (error) {\n  if (error.code === 'INSUFFICIENT_FUNDS') {\n    console.error('Insufficient CLAYER balance');\n  } else {\n    console.error('Transaction failed:', error.message);\n  }\n}\n\n### 4. Environment Setup\n\nCode example:\n// Use environment variables\nconst provider = new ethers.providers.JsonRpcProvider(\n  process.env.CIRCLE_LAYER_RPC || 'https://testnet-rpc.clayer.io'\n);\n\n## Integration Examples\n\n### React Integration\n\nCode example:\n\nfunction useCircleLayer() {\n  const [provider, setProvider] = useState(null);\n  const [balance, setBalance] = useState('0');\n\n  useEffect(() => {\n    const initProvider = async () => {\n      if (window.ethereum) {\n        const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(web3Provider);\n        \n        // Add CLayer Testnet to MetaMask if needed\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: '0x6F75', // 28525 in hex\n            chainName: 'CLayer Testnet',\n            nativeCurrency: {\n              name: 'CLAYER',\n              symbol: 'CLAYER',\n              decimals: 18\n            },\n            rpcUrls: ['https://testnet-rpc.clayer.io'],\n            blockExplorerUrls: ['https://explorer-testnet.clayer.io/']\n          }]\n        });\n      }\n    };\n    \n    initProvider();\n  }, []);\n\n  return { provider, balance };\n}\n\n### Node.js Backend\n\nCode example:\nconst { ethers } = require('ethers');\n\nclass CircleLayerService {\n  constructor() {\n    this.provider = new ethers.providers.JsonRpcProvider('https://testnet-rpc.clayer.io');\n    this.wallet = new ethers.Wallet(process.env.PRIVATE_KEY, this.provider);\n  }\n\n  async sendCLAYER(to, amount) {\n    const tx = await this.wallet.sendTransaction({\n      to,\n      value: ethers.utils.parseEther(amount),\n      gasPrice: ethers.utils.parseUnits('21', 'gwei')\n    });\n    \n    return await tx.wait();\n  }\n}\n\n## Resources\n\n### Example Contract\n- **Address**: [0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB)\n- **Explorer**: [View Contract](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract)\n- **ABI**: [Contract ABI](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract_abi)\n\n### Additional Guides\n- [Web3 Integration Guide](/development/web3-integration)\n- [Contract Deployment](/development/deploying-contracts)\n- [Network Setup](/getting-started/connect-testnet)",
    "url": "/apis-sdks/web3-libraries"
  },
  {
    "title": "EVM Compatibility",
    "body": "# EVM Compatibility\n\nTechnical details on CLayer's Ethereum Virtual Machine compatibility, migration strategies, and implementation considerations for developers.\n\n## Technical Implementation\n\n### Bytecode & Execution Compatibility\n- **100% Bytecode Compatibility**: Identical instruction set and execution environment as Ethereum\n- **Gas Model**: Standard Ethereum gas calculation (gas price × gas amount)  \n- **State Management**: Compatible state tree and account structure\n- **Smart Contract ABI**: Full Application Binary Interface compatibility\n\n### Network Integration\nCircle Layer testnet provides full EVM compatibility with:\n- **Chain ID**: 28525 for testnet distinction\n- **JSON-RPC API**: Complete Ethereum RPC method support\n- **WebSocket Events**: Real-time blockchain event streaming\n- **Block Structure**: Ethereum-compatible block and transaction format\n\n## Migration Strategies\n\n### From Ethereum Mainnet\n**Zero-Code Migration Process:**\n1. **Deploy Existing Contracts**: Use same bytecode and deployment scripts\n2. **Update Network Configuration**: Change RPC endpoint and chain ID\n3. **Configure Gas Token**: Use CLAYER instead of ETH for gas fees\n4. **Test Integration**: Verify functionality on CLayer testnet\n\n**Network Configuration Update:**\n\nCode example:\n// Hardhat configuration example\nmodule.exports = {\n  networks: {\n    circleLayerTestnet: {\n      url: \"https://testnet-rpc.clayer.io\",\n      chainId: 28525,\n      accounts: [process.env.PRIVATE_KEY],\n      gasPrice: 21000000000, // 0.000021 CLAYER\n    }\n  }\n};\n\n### From Other EVM Chains (Polygon, BSC, Avalanche)\nMigration from other EVM-compatible chains follows identical patterns:\n- **Contract Deployment**: Same deployment tools and processes\n- **Library Integration**: Existing Web3 libraries work without modification\n- **Wallet Connection**: Standard MetaMask/WalletConnect integration\n- **Gas Management**: Only difference is CLAYER token for gas fees\n\n## Development Environment Setup\n\n### Library Integration Examples\n\n**Web3.js Implementation:**\n\nCode example:\nconst Web3 = require('web3');\nconst web3 = new Web3('https://testnet-rpc.clayer.io');\n\n// Standard Ethereum API usage\nconst balance = await web3.eth.getBalance(address);\nconst gasPrice = await web3.eth.getGasPrice();\nconst blockNumber = await web3.eth.getBlockNumber();\n\n**Ethers.js Integration:**\n\nCode example:\nconst { ethers } = require('ethers');\nconst provider = new ethers.providers.JsonRpcProvider('https://testnet-rpc.clayer.io');\n\n// Same patterns as Ethereum development\nconst signer = new ethers.Wallet(privateKey, provider);\nconst contract = new ethers.Contract(address, abi, signer);\n\n**Viem Integration:**\n\nCode example:\n\nconst circleLayer = defineChain({\n  id: 28525,\n  name: 'CLayer Testnet',\n  network: 'clayer-testnet',\n  nativeCurrency: { name: 'CLAYER', symbol: 'CLAYER', decimals: 18 },\n  rpcUrls: {\n    default: { http: ['https://testnet-rpc.clayer.io'] }\n  }\n});\n\nconst client = createPublicClient({\n  chain: circleLayer,\n  transport: http()\n});\n\n## Wallet Integration\n\n### MetaMask Configuration\n\nCode example:\n// Programmatic network addition\nawait window.ethereum.request({\n  method: 'wallet_addEthereumChain',\n  params: [{\n    chainId: '0x6F75', // 28525 in hex\n    chainName: 'CLayer Testnet',\n    nativeCurrency: {\n      name: 'CLAYER',\n      symbol: 'CLAYER',\n      decimals: 18\n    },\n    rpcUrls: ['https://testnet-rpc.clayer.io'],\n    blockExplorerUrls: ['https://explorer-testnet.clayer.io/']\n  }]\n});\n\n### WalletConnect Integration\n\nCode example:\n// Standard WalletConnect setup works with CLayer\n\nconst connector = new WalletConnect({\n  bridge: \"https://bridge.walletconnect.org\",\n  qrcodeModal: QRCodeModal,\n});\n\n// Network switching handled through standard EIP-3326\nawait connector.request({\n  method: 'wallet_switchEthereumChain',\n  params: [{ chainId: '0x6F75' }]\n});\n\n## Performance Advantages\n\n### CLayer Benefits over Ethereum\n- **3s Block Time**: vs Ethereum's 12s average\n- **1-3s Finality**: vs Ethereum's 6-10 minute finality  \n- **Predictable Gas**: Stable CLAYER pricing vs volatile ETH gas\n- **99.95% Uptime**: Consistent network availability\n- **Energy Efficiency**: 99.9% less energy consumption\n\n### Development Experience Improvements\n- **Faster Testing**: 3-second blocks for rapid iteration\n- **Cost-Effective**: Free testnet tokens via faucet\n- **Reliable Performance**: Consistent block times and gas prices\n- **Standard Tooling**: No learning curve for Ethereum developers\n\n## Testing & Verification\n\n### Contract Verification Process\n1. **Deploy to Testnet**: Use standard deployment tools\n2. **Verify Source Code**: Submit to CLayer block explorer\n3. **Test Interactions**: Validate all contract functions\n4. **Performance Testing**: Measure gas usage and execution time\n\n### Integration Testing Checklist\n- ✅ Contract deployment successful\n- ✅ Web3 library connectivity verified  \n- ✅ Wallet interactions functioning\n- ✅ Event listening operational\n- ✅ Gas estimation accurate\n- ✅ Transaction confirmations reliable\n\n## Reference Implementation\n\n**Example Contract Address**: `0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB`\n- [View on Explorer](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract)\n- [Contract ABI](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract_abi)\n- [Source Code](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract)\n\n## Best Practices\n\n### Gas Optimization for CLAYER\n- **Estimate Gas Carefully**: Use `eth_estimateGas` for accurate calculations\n- **Batch Operations**: Combine multiple calls to reduce gas overhead\n- **Storage Optimization**: Minimize state changes for cost efficiency\n- **Test Gas Usage**: Verify gas consumption on testnet before mainnet\n\n### Security Considerations\n- **Same Security Model**: Standard EVM security practices apply\n- **Testnet Testing**: Thorough testing recommended before mainnet deployment\n- **Audit Compatibility**: Existing Ethereum audit reports remain valid\n- **Network Effects**: Consider CLayer's DPoS consensus in security design\n\n## Next Steps\n\nFor detailed implementation guidance:\n- [Smart Contract Development](/development/writing-smart-contracts) - Contract deployment guide\n- [Web3 Integration](/development/web3-integration) - Frontend integration patterns\n- [Wallet Setup](/getting-started/set-up-wallet) - User wallet configuration\n- [Network Configuration](/getting-started/connect-testnet) - Complete setup guide",
    "url": "/architecture/evm-compatibility"
  },
  {
    "title": "Genesis Configuration",
    "body": "# Genesis Configuration\n\nThe Genesis file defines the initial state of the CLayer Blockchain, including network parameters, initial validators, system contracts, and pre-allocated accounts. Both mainnet and testnet genesis information is hardcoded in the blockchain for verification purposes.\n\n## What is a Genesis File?\n\nThe genesis file is a JSON configuration that contains:\n- **Network Parameters**: Chain ID, hard fork configurations, consensus settings\n- **Initial State**: Pre-allocated accounts, system contracts, and initial validators\n- **Block Configuration**: Genesis block parameters like timestamp, gas limit, and difficulty\n\n## Genesis Parameters Glossary\n\n### Network Configuration\n\n| Parameter | Description |\n|-----------|-------------|\n| `chainId` | The unique identification of the chain (28525 for CLayer testnet) |\n| `homesteadBlock` | Hard fork height for Homestead protocol changes |\n| `eip150Block` | Hard fork height for EIP-150 (Gas cost changes) |\n| `eip155Block` | Hard fork height for EIP-155 (Simple replay attack protection) |\n| `eip158Block` | Hard fork height for EIP-158 (State clearing) |\n| `byzantiumBlock` | Hard fork height for Byzantium protocol changes |\n| `constantinopleBlock` | Hard fork height for Constantinople protocol changes |\n| `petersburgBlock` | Hard fork height for Petersburg protocol changes |\n| `istanbulBlock` | Hard fork height for Istanbul protocol changes |\n| `muirGlacierBlock` | Hard fork height for Muir Glacier protocol changes |\n| `berlinBlock` | Hard fork height for Berlin protocol changes |\n| `londonBlock` | Hard fork height for London protocol changes |\n\n### Consensus Parameters\n\n| Parameter | Description |\n|-----------|-------------|\n| `congress.period` | Time interval between blocks (3 seconds for CLayer) |\n| `congress.epoch` | Number of blocks in an epoch for validator adjustments (100 blocks) |\n\n### Block Parameters\n\n| Parameter | Description |\n|-----------|-------------|\n| `number` | Genesis block number (always 0x0) |\n| `gasUsed` | Gas used in genesis block (0x0) |\n| `parentHash` | Hash of parent block (0x0 for genesis) |\n| `nonce` | Block nonce for proof of work |\n| `timestamp` | Genesis block timestamp |\n| `extraData` | Additional data containing initial validator information |\n| `gasLimit` | Maximum gas allowed per block |\n| `difficulty` | Mining difficulty (0x1 for PoS networks) |\n| `mixHash` | Used in proof of work consensus |\n| `coinbase` | Block reward recipient address |\n\n## System Contracts\n\nCircle Layer uses several pre-deployed system contracts for network operations:\n\n  \n    🏛️ Validators Contract\n    0x000000000000000000000000000000000000f000\n    Manages validator registration, staking, and consensus operations\n  \n\n  \n    ⚖️ Punish Contract\n    0x000000000000000000000000000000000000f001\n    Handles validator penalties and slashing mechanisms\n  \n\n  \n    📋 Proposal Contract\n    0x000000000000000000000000000000000000f002\n    Manages governance proposals and voting mechanisms\n  \n\n:::info System Contracts Repository\nThe complete source code for CLayer system contracts is available at: **CLayer Blockchain-System-Contracts**\n:::\n\n## Account Allocations\n\n### Genesis Account\n- **Address**: `0xbf21B092c3A31BC476878F6D2D011Ea4ac6A9C68`\n- **Purpose**: Genesis account designated to receive minted coins\n- **Balance**: Pre-allocated for network initialization\n\n## Network Configurations\n\n  \n\n### CLayer Testnet Genesis\n\n```json title=\"Testnet Genesis Configuration\"\n{\n  \"config\": {\n    \"chainId\": 28525, \n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip150Hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"muirGlacierBlock\": 0,\n    \"berlinBlock\": 0,\n    \"londonBlock\": 0, \n    \"congress\": { \n      \"period\": 3,  \n      \"epoch\": 100\n    }\n  },\n  \"nonce\": \"0x0\",\n  \"timestamp\": \"0x683698D4\",\n  \"extraData\": \"0x00000000000000000000000000000000000000000000000000000000000000006e64a7f2Fa5EDca82672fB7916D5313a6Ca553410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"gasLimit\": \"0xffffffffffffffff\",\n  \"difficulty\": \"0x1\",\n  \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"coinbase\": \"0x6e64a7f2Fa5EDca82672fB7916D5313a6Ca55341\",\n  \"number\": \"0x0\",\n  \"gasUsed\": \"0x0\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"alloc\": {\n    \"6e64a7f2Fa5EDca82672fB7916D5313a6Ca55341\": {\n      \"balance\": \"0x204FCE5E3E25026110000000\"\n    },\n    \"000000000000000000000000000000000000F000\": {\n      \"balance\":\"0x0\",\n      \"code\": \"\"\n    },\n    \"000000000000000000000000000000000000F001\": {\n      \"balance\": \"0x0\",\n      \"code\": \"0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063966ff650116100c3578063d93d2cb91161007c578063d93d2cb914610286578063db78dd2814610299578063e0d8ea53146102bb578063ea7221a1146102c3578063f62af26c146102d6578063fca737c0146102e957600080fd5b8063966ff650146102335780639d7714ce1461023c578063be64569214610245578063c967f90f1461024e578063cb1ea72514610274578063cd779d211461027d57600080fd5b80633a061bd3116101155780633a061bd3146101f257806342127ee7146101fb57806344c1aa99146102045780636233be5d1461020d57806363e1d451146102165780638129fc1c1461022957600080fd5b80630976c65d1461015d578063158ef93e146101795780631b5e358c146101965780632897183d146101b757806332f3c17f146101c057806337dbc8cc146101e9575b600080fd5b61016660025481565b6040519081526020015b60405180910390f35b6000546101869060ff1681565b6040519015158152602001610170565b61019f61f00181565b6040516001600160a01b039091168152602001610170565b610166600b5481565b6101666101ce366004610b58565b6001600160a01b03166000908152600d602052604090205490565b61016660055481565b61019f61f00081565b61016660045481565b610166600a5481565b61019f61f00281565b610186610224366004610b58565b6102f2565b61023161051e565b005b61016660085481565b61016660075481565b61016660015481565b60005461026190610100900461ffff1681565b60405161ffff9091168152602001610170565b61016660095481565b61016660035481565b610231610294366004610b88565b610599565b6102a261708081565b60405167ffffffffffffffff9091168152602001610170565b600e54610166565b6102316102d1366004610b58565b61082e565b61019f6102e4366004610b88565b610b2e565b61016660065481565b6000805460ff1661031e5760405162461bcd60e51b815260040161031590610ba1565b60405180910390fd5b3361f0001461036f5760405162461bcd60e51b815260206004820152601860248201527f56616c696461746f727320636f6e7472616374206f6e6c7900000000000000006044820152606401610315565b6001600160a01b0382166000908152600d6020526040902054156103a7576001600160a01b0382166000908152600d60205260408120555b6001600160a01b0382166000908152600d602052604090206002015460ff1680156103d35750600e5415155b1561051657600e546103e790600190610bdd565b6001600160a01b0383166000908152600d6020526040902060010154146104b757600e80546000919061041c90600190610bdd565b8154811061042c5761042c610bf6565b60009182526020808320909101546001600160a01b038681168452600d909252604090922060010154600e8054929093169350839291811061047057610470610bf6565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790558583168252600d90526040808220600190810154949093168252902001555b600e8054806104c8576104c8610c0c565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0384168252600d9052604081206001810191909155600201805460ff191690555b506001919050565b60005460ff16156105675760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610315565b600c80546001600160a01b03191661f000179055603060098190556060600a55600b556000805460ff19166001179055565b3341146105d55760405162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b6044820152606401610315565b4360009081526010602052604090205460ff16156106295760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e48191958dc99585cd959607a1b6044820152606401610315565b60005460ff1661064b5760405162461bcd60e51b815260040161031590610ba1565b806106568143610c38565b156106965760405162461bcd60e51b815260206004820152601060248201526f426c6f636b2065706f6368206f6e6c7960801b6044820152606401610315565b436000908152601060205260409020805460ff19166001179055600e541561082a5760005b600e548110156107ff57600b54600a546106d59190610c4c565b600d6000600e84815481106106ec576106ec610bf6565b60009182526020808320909101546001600160a01b0316835282019290925260400190205411156107ae57600b54600a546107279190610c4c565b600d6000600e848154811061073e5761073e610bf6565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461076d9190610bdd565b600d6000600e848154811061078457610784610bf6565b60009182526020808320909101546001600160a01b031683528201929092526040019020556107ed565b6000600d6000600e84815481106107c7576107c7610bf6565b60009182526020808320909101546001600160a01b031683528201929092526040019020555b806107f781610c60565b9150506106bb565b506040517f181d51be54e8e8eaca6eae0eab32d4162099236bd519e7238d015d0870db464190600090a15b5050565b33411461086a5760405162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b6044820152606401610315565b60005460ff1661088c5760405162461bcd60e51b815260040161031590610ba1565b436000908152600f602052604090205460ff16156108df5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c1d5b9a5cda195960821b6044820152606401610315565b436000908152600f60209081526040808320805460ff191660011790556001600160a01b0384168352600d90915290206002015460ff1661098857600e80546001600160a01b0383166000818152600d6020526040812060018082018590558085019095557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd90930180546001600160a01b0319168317905552600201805460ff191690911790555b6001600160a01b0381166000908152600d602052604081208054916109ac83610c60565b9091555050600a546001600160a01b0382166000908152600d60205260409020546109d79190610c38565b600003610a5b57600c546040516340a141ff60e01b81526001600160a01b038381166004830152909116906340a141ff90602401600060405180830381600087803b158015610a2557600080fd5b505af1158015610a39573d6000803e3d6000fd5b5050506001600160a01b0382166000908152600d602052604081205550610ae8565b6009546001600160a01b0382166000908152600d6020526040902054610a819190610c38565b600003610ae857600c546040516305dd095960e41b81526001600160a01b03838116600483015290911690635dd0959090602401600060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505050505b806001600160a01b03167f770e0cca42c35d00240986ce8d3ed438be04663c91dac6576b79537d7c180f1e42604051610b2391815260200190565b60405180910390a250565b600e8181548110610b3e57600080fd5b6000918252602090912001546001600160a01b0316905081565b600060208284031215610b6a57600080fd5b81356001600160a01b0381168114610b8157600080fd5b9392505050565b600060208284031215610b9a57600080fd5b5035919050565b6020808252600c908201526b139bdd081a5b9a5d081e595d60a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610bf057610bf0610bc7565b92915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082610c4757610c47610c22565b500690565b600082610c5b57610c5b610c22565b500490565b600060018201610c7257610c72610bc7565b506001019056fea26469706673582212204c57e0973db1183a0e59c736997f53c66245e3d092bf062126708020dad7fca664736f6c63430008110033\"\n    },\n    \"000000000000000000000000000000000000F002\": {\n      \"balance\": \"0x0\",\n      \"code\": \"0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063966ff650116100c3578063c967f90f1161007c578063c967f90f14610322578063cd779d2114610348578063da35c66414610351578063db78dd281461035a578063e823c8141461037c578063fca737c01461038557600080fd5b8063966ff650146102715780639d7714ce1461027a5780639f2524ee14610283578063a224cee7146102f1578063bcfb9b6114610306578063be6456921461031957600080fd5b806337dbc8cc1161011557806337dbc8cc146102075780633a061bd31461021057806342127ee7146102195780636233be5d146102225780636e0e16cf1461022b57806382c4b3b21461024e57600080fd5b8063013cf08b1461015d5780630976c65d1461018c578063158ef93e146101a357806315ea2781146101c05780631b5e358c146101d35780631f4f7d29146101f4575b600080fd5b61017061016b366004610fdd565b61038e565b6040516101839796959493929190610ff6565b60405180910390f35b61019560025481565b604051908152602001610183565b6000546101b09060ff1681565b6040519015158152602001610183565b6101b06101ce3660046110a8565b61046c565b6101dc61f00181565b6040516001600160a01b039091168152602001610183565b6101b06102023660046110cc565b610533565b61019560055481565b6101dc61f00081565b61019560045481565b6101dc61f00281565b6101b06102393660046110a8565b600b6020526000908152604090205460ff1681565b6101b061025c3660046110a8565b600a6020526000908152604090205460ff1681565b61019560085481565b61019560075481565b6102ca610291366004611151565b600e6020908152600092835260408084209091529082529020805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b0390941684526020840192909252151590820152606001610183565b6103046102ff36600461117d565b6107fc565b005b6101b0610314366004611200565b610963565b61019560015481565b60005461033590610100900461ffff1681565b60405161ffff9091168152602001610183565b61019560035481565b610195600c5481565b61036361708081565b60405167ffffffffffffffff9091168152602001610183565b61019560095481565b61019560065481565b600d602052600090815260409020805460018201546002830180546001600160a01b039384169492909316926103c390611230565b80601f01602080910402602001604051908101604052809291908181526020018280546103ef90611230565b801561043c5780601f106104115761010080835404028352916020019161043c565b820191906000526020600020905b81548152906001019060200180831161041f57829003601f168201915b50505050600383015460049093015491929161ffff80821692506201000082041690640100000000900460ff1687565b60003361f000146104c45760405162461bcd60e51b815260206004820152601860248201527f56616c696461746f727320636f6e7472616374206f6e6c79000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166000818152600a60209081526040808320805460ff19908116909155600b835292819020805490931690925590514281527f4e0b191f7f5c32b1b5e3704b68874b1a3980147cae00be8ece271bfb5b92c07a910160405180910390a25060015b919050565b6001600160a01b0383166000908152600b602052604081205460ff161561059c5760405162461bcd60e51b815260206004820152601760248201527f416c7265616479206163746976652070726f706f73616c00000000000000000060448201526064016104bb565b600c54610bb88311156105e45760405162461bcd60e51b815260206004820152601060248201526f44657461696c7320746f6f206c6f6e6760801b60448201526064016104bb565b6000818152600d6020526040902060030154156106435760405162461bcd60e51b815260206004820152601760248201527f50726f706f73616c20616c72656164792065786973747300000000000000000060448201526064016104bb565b6040805160e081018252606081830181905260009082018190526080820181905260a0820181905260c08201523381526001600160a01b0387166020808301919091528251601f87018290048202810182019093528583529091908690869081908401838280828437600092018290525060408087019586524260608801526001600160a01b03808d168352600b6020908152828420805460ff191660019081179091558a8552600d825292909320885181549083166001600160a01b031991821617825593890151928101805493909216929093169190911790559351859493506002840192506107369150826112cf565b506060820151600382015560808201516004909101805460a084015160c09094015115156401000000000264ff000000001961ffff958616620100000263ffffffff19909316959094169490941717919091169190911790556040516001600160a01b03871690339084907f83215a16027e8ce9a2151bd2769637d930303c5452124c21e3eec07ebbc678d5906107d09042815260200190565b60405180910390a46001600c60008282546107eb91906113a5565b909155506001979650505050505050565b60005460ff16156108455760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016104bb565b62093a80600955600f80546001600160a01b03191661f00017905560005b8181101561095157600083838381811061087f5761087f6113b8565b905060200201602081019061089491906110a8565b6001600160a01b0316036108ea5760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642076616c696461746f7220616464726573730000000000000060448201526064016104bb565b6001600a6000858585818110610902576109026113b8565b905060200201602081019061091791906110a8565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610949816113ce565b915050610863565b50506000805460ff1916600117905550565b600f54604051631015428760e21b81523360048201526000916001600160a01b0316906340550a1c90602401602060405180830381865afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d091906113e7565b610a0d5760405162461bcd60e51b815260206004820152600e60248201526d56616c696461746f72206f6e6c7960901b60448201526064016104bb565b6000838152600d60205260408120600301549003610a625760405162461bcd60e51b8152602060048201526012602482015271141c9bdc1bdcd85b081b9bdd08195e1a5cdd60721b60448201526064016104bb565b336000908152600e6020908152604080832086845290915290206001015415610ad95760405162461bcd60e51b815260206004820152602360248201527f596f752063616e277420766f746520666f7220612070726f706f73616c20747760448201526269636560e81b60648201526084016104bb565b6009546000848152600d6020526040902060030154610af891906113a5565b4210610b395760405162461bcd60e51b815260206004820152601060248201526f141c9bdc1bdcd85b08195e1c1a5c995960821b60448201526064016104bb565b336000818152600e60209081526040808320878452825291829020426001820181905581546001600160a01b031916851782556002909101805460ff191687151590811790915583519081529182015285917f974e8310941c2fc01bbd827ebb30c7aabbb5a43a6273b22f9135b5dee7ccc935910160405180910390a38115610c07576000838152600d6020526040902060040154610bdd9061ffff166001611404565b6000848152600d60205260409020600401805461ffff191661ffff92909216919091179055610c5d565b6000838152600d6020526040902060040154610c2e9062010000900461ffff166001611404565b6000848152600d60205260409020600401805461ffff92909216620100000263ffff0000199092169190911790555b6000838152600d60209081526040808320600101546001600160a01b03168352600b90915290205460ff161580610cad57506000838152600d6020526040902060040154640100000000900460ff165b15610cba57506001610fd7565b600f54604080516313bce04b60e31b815290516002926001600160a01b031691639de702589160048083019260009291908290030181865afa158015610d04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d2c9190810190611431565b51610d3791906114ea565b610d429060016113a5565b6000848152600d602052604090206004015461ffff1610610e98576000838152600d60208181526040808420600180820180546001600160a01b039081168852600a8652848820805460ff191690931790925595899052939092526004918201805464ff000000001916640100000000179055600f549354905163415e9ec960e11b8152908316918101919091529116906382bd3d92906024016020604051808303816000875af1158015610dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1f91906113e7565b506000838152600d6020818152604080842060010180546001600160a01b039081168652600b8452828620805460ff191690559488905292825291548251428152925193169286927f14e3d76a04a11da29be99c4285ea644e3989f96e96f7699686593b40220ea80292908290030190a3506001610fd7565b600f54604080516313bce04b60e31b815290516002926001600160a01b031691639de702589160048083019260009291908290030181865afa158015610ee2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f0a9190810190611431565b51610f1591906114ea565b610f209060016113a5565b6000848152600d602052604090206004015462010000900461ffff1610610fd3576000838152600d6020818152604080842060048101805464ff00000000191664010000000017905560010180546001600160a01b039081168652600b8452828620805460ff1916905594889052929091529054905191169084907f7132a60e4a157d9a09cdeab65d502a88eb200ddf3f7806eaee511566429ad3c990610fca9042815260200190565b60405180910390a35b5060015b92915050565b600060208284031215610fef57600080fd5b5035919050565b600060018060a01b03808a1683526020818a168185015260e06040850152885191508160e085015260005b8281101561103e5789810182015185820161010001528101611021565b5050610100600081838601015280601f19601f84011685010192505050856060830152611071608083018661ffff169052565b61ffff841660a083015282151560c08301525b98975050505050505050565b6001600160a01b03811681146110a557600080fd5b50565b6000602082840312156110ba57600080fd5b81356110c581611090565b9392505050565b6000806000604084860312156110e157600080fd5b83356110ec81611090565b9250602084013567ffffffffffffffff8082111561110957600080fd5b818601915086601f83011261111d57600080fd5b81358181111561112c57600080fd5b87602082850101111561113e57600080fd5b6020830194508093505050509250925092565b6000806040838503121561116457600080fd5b823561116f81611090565b946020939093013593505050565b6000806020838503121561119057600080fd5b823567ffffffffffffffff808211156111a857600080fd5b818501915085601f8301126111bc57600080fd5b8135818111156111cb57600080fd5b8660208260051b85010111156111e057600080fd5b60209290920196919550909350505050565b80151581146110a557600080fd5b6000806040838503121561121357600080fd5b823591506020830135611225816111f2565b809150509250929050565b600181811c9082168061124457607f821691505b60208210810361126457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f8211156112ca57600081815260208120601f850160051c810160208610156112a75750805b601f850160051c820191505b818110156112c6578281556001016112b3565b5050505b505050565b815167ffffffffffffffff8111156112e9576112e961126a565b6112fd816112f78454611230565b84611280565b602080601f831160018114611332576000841561131a5750858301515b600019600386901b1c1916600185901b1785556112c6565b600085815260208120601f198616915b8281101561136157888601518255948401946001909101908401611342565b508582101561137f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b80820180821115610fd757610fd761138f565b634e487b7160e01b600052603260045260246000fd5b6000600182016113e0576113e061138f565b5060010190565b6000602082840312156113f957600080fd5b81516110c5816111f2565b61ffff81811683821601908082111561141f5761141f61138f565b5092915050565b805161052e81611090565b6000602080838503121561144457600080fd5b825167ffffffffffffffff8082111561145c57600080fd5b818501915085601f83011261147057600080fd5b8151818111156114825761148261126a565b8060051b604051601f19603f830116810181811085821117156114a7576114a761126a565b6040529182528482019250838101850191888311156114c557600080fd5b938501935b82851015611084576114db85611426565b845293850193928501926114ca565b60008261150757634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212208b56b07374378e295240a511ebe999ad875a018a07ffb19876952d692728ab1764736f6c63430008110033\"\n    }\n  },\n  \"number\": \"0x0\",\n  \"gasUsed\": \"0x0\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}\n\n### Testnet Key Features\n\n  \n    Chain ID: 28525\n  \n  \n    Block Time: 3 seconds\n  \n  \n    Epoch Length: 100 blocks\n  \n  \n    Gas Limit: Unlimited (0xffffffffffffffff)\n  \n\n  \n  \n  \n\n### CLayer Mainnet Genesis\n\n  \n    🚧 Coming Soon\n  \n  Mainnet genesis configuration will be released during Phase 3 of the roadmap.\n\n### Expected Mainnet Features\n\n- **Enhanced Security**: Finalized validator set with proven track record\n- **Optimized Parameters**: Fine-tuned block time and epoch configurations\n- **Production Contracts**: Audited and battle-tested system contracts\n- **Token Migration**: Native $CLAYER token allocation from ERC-20 bridge\n\n:::note Mainnet Timeline\nThe mainnet genesis file will be published before the mainnet launch in **Phase 3** of the CLayer roadmap. Stay tuned for updates!\n:::\n\n  \n\n## Technical Implementation\n\n### Hard Fork Compatibility\n\nCircle Layer implements all major Ethereum hard forks from genesis (block 0), ensuring:\n\n- ✅ **Full EVM Compatibility**: All Ethereum opcodes and features supported\n- ✅ **Smart Contract Migration**: Seamless deployment from other EVM chains\n- ✅ **Tool Compatibility**: Works with Remix, Hardhat, Truffle, and other tools\n- ✅ **Library Support**: Compatible with Web3.js, Ethers.js, and similar libraries\n\n### Consensus Configuration\n\nThe `congress` section defines the Delegated Proof of Stake (DPoS) consensus parameters:\n\nCode example:\n\"congress\": { \n  \"period\": 3,    // 3-second block time\n  \"epoch\": 100    // Validator set updates every 100 blocks\n}\n\n### Initial Validator Setup\n\nThe `extraData` field contains the initial validator configuration:\n- Validator addresses are encoded in the extra data\n- Initial validator set is established at genesis\n- Additional validators can join through the validator contract\n\n## Verification\n\nBoth genesis configurations are hardcoded in the CLayer blockchain client for verification purposes. This ensures:\n\n1. **Network Integrity**: All nodes start with identical initial state\n2. **Fork Prevention**: Prevents accidental network splits\n3. **Transparency**: Genesis parameters are publicly auditable\n4. **Consistency**: Guarantees deterministic network initialization\n\n## Development Usage\n\n### Connecting to Testnet\n\nUse these parameters when configuring your development environment:\n\nCode example:\n// Web3.js configuration\nconst web3 = new Web3('https://testnet-rpc.clayer.io');\n\n// Network configuration\nconst networkConfig = {\n  chainId: 28525,\n  name: 'CLayer Testnet',\n  rpcUrl: 'https://testnet-rpc.clayer.io',\n  blockExplorer: 'https://explorer-testnet.clayer.io'\n};\n\n### MetaMask Configuration\n\nAdd CLayer Testnet to MetaMask:\n\n1. **Network Name**: CLayer Testnet\n2. **RPC URL**: `https://testnet-rpc.clayer.io`\n3. **Chain ID**: `28525`\n4. **Currency Symbol**: `CL`\n5. **Block Explorer**: `https://explorer-testnet.clayer.io`\n\n---\n\n  \n    📚 Next Steps: Learn about PoS Consensus or explore Smart Contract Deployment",
    "url": "/architecture/genesis"
  },
  {
    "title": "Performance Architecture",
    "body": "# Performance Architecture\n\nDeep dive into the technical architecture and design decisions that enable CLayer's high-performance transaction processing.\n\n## Architecture Design Principles\n\n### DPoS Consensus Optimization\nCircle Layer's performance stems from architectural optimizations in our Delegated Proof of Stake implementation:\n\n- **Validator Selection**: Top 21 validators by stake for optimal network performance\n- **Block Production**: Consistent 3-second intervals with deterministic ordering\n- **Byzantine Fault Tolerance**: Fast finality through enhanced consensus mechanism\n- **Resource Efficiency**: Modest hardware requirements enable broader participation\n\n### Network Infrastructure Design\n- **Multiple RPC Endpoints**: Distributed access via ports 32668, 32669, 8545, 6060\n- **Geographic Distribution**: Support for multiple regional endpoints\n- **WebSocket Integration**: Real-time event streaming via wss://testnet-rpc.clayer.io\n- **Optimized Propagation**: Efficient block and transaction distribution\n\n## Performance Implementation\n\n### Transaction Processing Pipeline\n```mermaid\nflowchart LR\n    A[Transaction Submitted] --> B[Validation Pool]\n    B --> C[Consensus Verification]\n    C --> D[Block Assembly]\n    D --> E[Network Propagation]\n    E --> F[Finalization]\n    \n    subgraph \"Performance Metrics\"\n        G[\n  \n    Performance Benchmarks\n  \n  \n  \n    \n      Current Testnet\n      Live Performance\n    \n    \n      \n        Block Time\n        3s consistent\n      \n      \n        Finality\n        1-3s average\n      \n      \n        Uptime\n        99.95% (30d)\n      \n      \n        Energy\n        99.9% less\n      \n    \n  \n  \n  \n    \n      Mainnet Target\n      In Development\n    \n    \n      \n        Block Time\n        Optimized\n      \n      \n        Finality\n        Enhanced\n      \n      \n        Uptime\n        99.99%\n      \n      \n        Energy\n        Maintained\n      \n    \n  \n\n## Developer Performance Benefits\n\n### Development Cycle Acceleration\n- **Fast Iteration**: 3-second block confirmation for rapid testing\n- **Predictable Costs**: Stable CLAYER gas pricing for budget planning\n- **Real-time Feedback**: Immediate transaction results and error handling\n- **Load Testing**: Consistent performance under development workloads\n\n### Production Readiness Indicators\n- **Proven Stability**: Months of consistent testnet operation\n- **Validator Reliability**: Distributed consensus with multiple active nodes\n- **Performance Consistency**: Stable metrics across different load conditions\n- **Integration Success**: Multiple projects successfully deployed and tested\n\n## Technical Implementation Details\n\n### Consensus Engine Performance\n- **Vote Processing**: Optimized validator signature verification\n- **Block Assembly**: Efficient transaction batching and ordering\n- **State Transitions**: Fast execution with minimal computational overhead\n- **Finality Confirmation**: Quick consensus achievement through DPoS design\n\n### Infrastructure Scaling\n- **Horizontal Scaling**: Validator network growth support\n- **Vertical Optimization**: Per-node performance improvements\n- **Network Resilience**: Fault tolerance and recovery mechanisms\n- **Monitoring Integration**: Comprehensive performance tracking and alerting\n\n## Next Steps for Performance\n\nFor implementation and monitoring:\n- [Validator Setup Guide](/nodes-validation/becoming-validator) - Hardware and performance requirements\n- [Node Monitoring](/nodes-validation/node-monitoring) - Performance tracking tools  \n- [Development Setup](/development/deploying-contracts) - Optimized configuration\n- [Network Configuration](/getting-started/connect-testnet) - Connection optimization",
    "url": "/architecture/high-tps"
  },
  {
    "title": "DPoS Consensus Mechanism",
    "body": "🌱 Energy Efficient\n  Delegated Proof of Stake Consensus Mechanism\n  \n    CLayer implements a cutting-edge Delegated Proof of Stake (DPoS) consensus mechanism that ensures network security, energy efficiency, and fast finality while maintaining true decentralization.\n  \n  \n  \n    \n      99.9%\n      Less Energy\n    \n    \n      1-3s\n      Finality\n    \n    \n      21\n      Max Validators\n      32\n      Min Stake (Testnet)\n    \n  \n\n  \n    \n  \n\n## 🌐 Consensus Overview\n\nCircle Layer adopts **Delegated Proof of Stake (DPoS)** consensus mechanism with low transaction cost, low transaction latency, high transaction concurrency, and supports up to **21 validators**.\n\nDPoS allows anyone to become a validator by staking specified coins. It also allows delegators to stake small amounts and to participate in network security. Any address can stake to an address that qualifies to become a validator, and after the validator's staking volume ranks in the top 21, it will become an active validator in the next epoch.\n\nCode example:\ngraph TB\n    A[🗳️ Validator Selection] --> B[📦 Block Production]\n    B --> C[✅ Consensus Process]\n    C --> D[🎁 Reward Distribution]\n    D --> A\n    \n    E[👥 Stakers] --> A\n    F[💰 Stake Pool] --> A\n    G[🔄 Epoch Timer] --> A\n    \n    B --> H[📋 Transaction Validation]\n    B --> I[🔗 Block Assembly]\n    \n    C --> J[🔐 Byzantine Fault Tolerance]\n    C --> K[⚡ Fast Finality]\n    \n    D --> L[💎 Validator Rewards]\n    D --> M[🏆 Delegator Rewards]\n\n### 🔥 Key Benefits\n\n  \n    🌱\n    Energy Efficiency\n    \n      99.9%\n      Less Energy\n    \n    Consumes 99.9% less energy compared to Proof of Work consensus mechanisms\n    \n      \n        PoW\n        \n        100 TWh/year\n      \n      \n        PoS\n        \n        0.1 TWh/year\n      \n    \n  \n\n  \n    🛡️\n    Enhanced Security\n    \n      67%+\n      Attack Threshold\n    \n    Economic security through stake-based validation and punishment mechanisms\n     \n      🔒 Cryptographic Signatures\n      ⚔️ punishment mechanisms\n      🎯 Stake Requirements\n\n    \n  \n\n  \n    ⚡\n    Faster Finality\n    \n      1-3s\n      Finality Time\n    \n    Achieve transaction finality in seconds, not minutes or hours\n          \n        \n          CLayer\n          1-3s\n        \n      \n        Ethereum\n        12-19s\n      \n      \n        Bitcoin\n        60min+\n      \n    \n  \n\n  \n    🌐\n    True Decentralization\n    \n      1000+\n      Validators\n    \n    Low barriers to entry reduce centralization risks and promote participation\n    \n      \n        100,000 CLAYER\n        Min Stake\n      \n      \n        24/7\n        Uptime Req.\n      \n      \n        5%\n        Hardware Cost\n      \n    \n  \n\n## 🔄 How Consensus Works\n\n  \n    \n      Validator Selection Process\n      \n      \n        \n          💰\n          \n            Stake Requirement\n            Validators must stake a minimum of 32 CLAYER tokens (testnet) or 100,000 CLAYER tokens (mainnet) to participate in consensus\n            \n              \n                Testnet Min Stake:\n                32 CLAYER\n              \n              \n                Mainnet Min Stake:\n                100,000 CLAYER\n              \n              \n                Lock Period:\n                7 days\n              \n            \n          \n        \n\n        \n          🏆\n          \n            Top 21 Selection\n            Validators are selected based on their staking amount. The top 21 validators by stake become active validators in the next epoch.\n          \n        \n\n        \n          ⏰\n          \n            Epoch-Based Rotation\n            Validator sets are updated at the end of each epoch (200 blocks). This ensures dynamic participation based on current stake rankings.\n            \n              \n                Epoch Duration:\n                200 blocks\n              \n              \n                Block Time:\n                3 seconds\n              \n            \n          \n        \n      \n    \n  \n\n  \n    \n      Block Production Process\n      \n      \n        \n          🔄\n          \n            Round-Robin Block Production\n            All active validators are ordered according to predefined rules and take turns to produce blocks.\n          \n        \n\n        \n          ⚠️\n          \n            Fallback Mechanism\n            If a validator fails to produce a block in time during its turn, active validators who have not been involved in the past n/2 blocks will randomly perform block production.\n          \n        \n\n        \n          🛡️\n          \n            Network Security\n            At least n/2+1 active validators must work properly to ensure the proper operation of the blockchain.\n          \n        \n      \n    \n  \n\n  \n    \n      Reward Distribution System\n      \n      \n        \n          Gas Fee Distribution\n          All transaction fees paid in CLAYER are collected and distributed to validators based on their stake proportion.\n        \n\n          \n            \n              🤝 Delegators\n              45%\n            \n            \n              \n            \n            \n              Shared with token delegators\n            \n          \n\n        \n          Block Rewards\n          At the end of each block, the Validators contract is called and fees for all transactions in the block are distributed to active validators.\n        \n      \n    \n  \n\n## 🛡️ Security Features\n\n  \n    \n      ⚔️\n      Slashing Conditions\n    \n    \n      Validators face economic penalties for malicious behavior\n      \n        \n          Double Signing\n          5% Stake\n        \n        \n          Nothing at Stake\n          2% Stake\n        \n        \n          Long Range Attack\n          100% Stake\n        \n        \n          Extended Downtime\n          1% Stake\n        \n        \n          Invalid Proposals\n          0.5% Stake\n        \n      \n    \n  \n\n  \n    \n      🔄\n      Validator Rotation\n    \n    \n      Regular rotation prevents centralization and censorship\n      \n        \n          Rotation Period\n          24 hours\n        \n        \n          Selection Method\n          VRF + Stake\n        \n        \n          Max Consecutive\n          3 blocks\n        \n      \n    \n  \n\n  \n    \n      🎯\n      Stake Delegation\n    \n    \n      Token holders can delegate stake without giving up custody\n      \n        ✅ Non-custodial\n        ✅ Liquid staking\n        ✅ Governance rights\n        ✅ Flexible unbonding\n      \n    \n  \n\n  \n    \n      🎁\n      Participation Incentives\n    \n    \n      Rewards encourage honest participation and network growth\n      \n        \n          Block Rewards\n          2 CLAYER/block\n        \n        \n          Transaction Fees\n          Variable\n        \n        \n          Uptime Bonus\n          +20%\n        \n      \n    \n  \n\n## 🛡️ DPoS Punishment System\n\n### Comprehensive Slashing Conditions\n\nCircle Layer implements a sophisticated punishment system to maintain network integrity and security:\n\n  \n    💀 Critical Violations (Severe Penalties)\n    \n      \n        \n          Double Signing Attack\n          5% Stake Slashed\n        \n        \n          Validator signs two conflicting blocks at the same height\n          \n            ⏱️ Detection: Immediate\n            🔒 Jail Time: 30 days\n            💰 Recovery: Requires re-staking\n          \n        \n      \n\n      \n        \n          Long Range Attack\n          100% Stake Slashed\n        \n        \n          Attempting to reorganize the blockchain from an old state\n          \n            ⏱️ Detection: 24-48 hours\n            🔒 Jail Time: Permanent\n            💰 Recovery: Not possible\n          \n        \n      \n\n      \n        \n          Nothing at Stake\n          2% Stake Slashed\n        \n        \n          Validator participates in multiple competing chains simultaneously\n          \n            ⏱️ Detection: 6-12 hours\n            🔒 Jail Time: 14 days\n            💰 Recovery: Partial re-staking\n          \n        \n      \n    \n  \n\n  \n    ⚠️ Performance Violations (Moderate Penalties)\n    \n      \n        \n          Extended Downtime\n          1% Stake Slashed\n        \n        \n          Validator offline for more than 12 consecutive hours\n          \n            ⏱️ Detection: 12 hours\n            🔒 Jail Time: 7 days\n            💰 Recovery: Automatic after jail\n          \n        \n      \n\n      \n        \n          Invalid Block Proposals\n          0.5% Stake Slashed\n        \n        \n          Proposing blocks with invalid transactions or format\n          \n            ⏱️ Detection: Immediate\n            🔒 Jail Time: 3 days\n            💰 Recovery: Automatic after jail\n          \n        \n      \n\n      \n        \n          Repeated Missed Proposals\n          0.1% per incident\n        \n        \n          Missing 5+ consecutive block proposal opportunities\n          \n            ⏱️ Detection: 15 minutes\n            🔒 Jail Time: 24 hours\n            💰 Recovery: Warning system\n          \n        \n      \n    \n  \n\n### System Contracts for Validator Management\n\nCircle Layer uses a comprehensive system of smart contracts to manage validator operations:\n\n  \n    🏛️ Core Validator Contracts\n    \n    \n      \n        ValidatorRegistry Contract\n        Active\n      \n      \n        \n          Registration Functions\n          \n            registerValidator() - Register new validator with minimum stake\n            updateValidatorInfo() - Update validator metadata and commission\n            deactivateValidator() - Voluntarily exit from validator set\n          \n        \n        \n          Status Management\n          \n            getValidatorStatus() - Query current validator state\n            isValidatorActive() - Check if validator is in active set\n            getValidatorMetrics() - Performance and uptime data\n          \n        \n      \n    \n\n    \n      \n        StakingManager Contract\n        Active\n      \n      \n        \n          Staking Operations\n          \n            stakeTokens(validatorAddress, amount) - Delegate stake to validator\n            unstakeTokens(validatorAddress, amount) - Initiate unstaking process\n            restakeRewards(validatorAddress) - Compound staking rewards\n          \n        \n        \n          Reward Distribution\n          \n            claimRewards(validatorAddress) - Claim accumulated rewards\n            distributeRewards() - Automated reward distribution\n            calculateRewards(address) - Preview pending rewards\n          \n        \n      \n    \n\n    \n      \n        SlashingManager Contract\n        Active\n      \n      \n        \n          Slashing Operations\n          \n            slashValidator(validator, evidence, penalty) - Execute slashing\n            jailValidator(validator, duration) - Jail validator temporarily\n            submitEvidence(evidence) - Submit slashing evidence\n          \n        \n        \n          Recovery Functions\n          \n            unjailValidator(validator) - Release from jail after term\n            appealSlashing(validator, appeal) - Appeal slashing decision\n            getSlashingHistory(validator) - Query slashing record\n          \n        \n      \n    \n  \n\n  \n    ⚖️ Governance & Dispute Contracts\n    \n    \n      \n        DisputeResolution Contract\n        Development\n      \n      \n        Handles appeals and disputes related to validator slashing and punishment decisions.\n        \n          📋 Evidence submission\n          🗳️ Community voting\n          ⚖️ Arbitration system\n          💰 Appeal bonds\n        \n      \n    \n\n    \n      \n        ParameterGovernance Contract\n        Development\n      \n      \n        Manages changes to staking parameters, slashing conditions, and network settings.\n        \n          🎛️ Parameter updates\n          ⏰ Time-locked changes\n          🔐 Multi-sig approval\n          📊 Impact analysis\n        \n      \n    \n  \n\n### Detailed Staking & Unstaking Mechanics\n\n  \n    🔐 Staking Process\n    \n    \n      \n        1\n        \n          Stake Preparation\n          \n            Minimum stake: 32 CLAYER (testnet) / 100,000 CLAYER (mainnet)\n            Wallet balance verification\n            Gas fee preparation (≈0.01 CLAYER for staking transaction)\n            Validator selection and due diligence\n          \n          ⏱️ Duration: Immediate\n        \n      \n\n      \n        2\n        \n          Transaction Execution\n          \n            Call stakeTokens(validatorAddress, amount)\n            Tokens transferred to staking contract\n            Staking record created with timestamp\n            Validator delegation pool updated\n          \n          ⏱️ Duration: 3-9 seconds (1-3 blocks)\n        \n      \n\n      \n        3\n        \n          Activation Period\n          \n            Staking amount enters \"pending\" state\n            Becomes active in next epoch (≈24 hours)\n            Starts earning rewards after activation\n            Delegation shows in validator's total stake\n          \n          ⏱️ Duration: Up to 24 hours\n        \n      \n\n      \n        4\n        \n          Active Staking\n          \n            Rewards accrue automatically per block\n            Can claim rewards without unstaking\n            Voting power proportional to stake\n            Subject to slashing if validator misbehaves\n          \n          ⏱️ Duration: Ongoing\n        \n      \n    \n  \n\n  \n    🔓 Unstaking Process\n    \n    \n      \n        1\n        \n          Unstaking Initiation\n          \n            Call unstakeTokens(validatorAddress, amount)\n            Specify amount to unstake (minimum 1 CLAYER)\n            Tokens enter \"unbonding\" state immediately\n            Stop earning rewards from this block\n          \n          ⏱️ Duration: 3-9 seconds (1-3 blocks)\n        \n      \n\n      \n        2\n        \n          Unbonding Period\n          \n            Mandatory waiting period: 21 days\n            Tokens locked and cannot be transferred\n            Still subject to slashing if validator misbehaves\n            No rewards earned during unbonding\n          \n          ⏱️ Duration: 21 days (518,400 blocks)\n        \n      \n\n      \n        3\n        \n          Release & Withdrawal\n          \n            Automatic release after 21 days\n            Tokens become transferable\n            Can be withdrawn to wallet or re-staked\n            No longer subject to slashing\n          \n          ⏱️ Duration: Immediate after unbonding\n        \n      \n    \n  \n\n  \n    ⚡ Emergency Mechanisms\n    \n    \n      \n        🚨 Emergency Unstaking\n        Available during severe validator misconduct or network emergencies\n        \n          ⏱️ Reduced unbonding: 7 days\n          💰 Emergency fee: 0.5% of stake\n          🔒 Governance approval required\n        \n      \n\n      \n        🛡️ Validator Jailing Protection\n        Automatic unstaking triggered when validator is jailed for critical violations\n        \n          ⏱️ Automatic trigger: During jailing\n          💰 No additional fees\n          🔒 Normal 21-day unbonding\n        \n      \n\n      \n        🔄 Validator Migration\n        Transfer stake between validators without unbonding period\n        \n          ⏱️ Instant transfer\n          💰 Migration fee: 0.1% of stake\n          🔒 Once per month limit\n        \n      \n    \n  \n\n### Advanced Slashing Protections\n\n  🛡️ Delegator Protections\n  \n  \n    \n      📊 Graduated Slashing\n      Slashing penalties applied gradually to minimize delegator impact:\n      \n        First offense: 50% of total penalty\n        Second offense: 75% of total penalty\n        Third offense: 100% of total penalty\n        Grace period: 90 days between offense resets\n      \n    \n\n    \n      ⚠️ Early Warning System\n      Automated notifications for delegators when validators show concerning patterns:\n      \n        Uptime drops below 95%\n        Missed block proposals exceed threshold\n        Commission rate changes\n        Abnormal behavior detected\n      \n    \n\n    \n      🔄 Auto-Migration Options\n      Smart contract features to protect delegator interests:\n      \n        Auto-unstake on critical violations\n        Automatic re-delegation to backup validators\n        Insurance pool for slashing compensation\n        Community-governed protection mechanisms\n      \n    \n  \n\n  \n    🚀 Ready to Participate?\n    CLayer's advanced DPoS system with comprehensive punishment mechanisms ensures network security while protecting legitimate participants. Our detailed staking and slashing systems provide clear rules and fair protections for all network participants.\n    \n      Start Staking\n      Learn More\n      View Validators",
    "url": "/architecture/pos-consensus"
  },
  {
    "title": "Contribution Guidelines",
    "body": "# Contribution Guidelines\n\n## Overview\n\nWelcome to the CLayer community! This guide will help you contribute to our project.\n\n## How to Contribute\n\n### 1. Code Contributions\n- Fork the repository\n- Create a feature branch\n- Make your changes\n- Submit a pull request\n\n### 2. Documentation\n- Improve existing docs\n- Add new tutorials\n- Fix typos and errors\n- Update outdated information\n\n### 3. Bug Reports\n- Use the issue tracker\n- Provide detailed steps to reproduce\n- Include error messages\n- Specify your environment\n\n## Development Workflow\n\n1. **Setup**\n   \nCode example:\n   git clone https://github.com/clayer/testnet-clayer-blockchain.git\n   cd clayer\n   npm install\n\n2. **Testing**\n   \nbash\n   npm run test\n   npm run lint\n\n3. **Building**\n   ```bash\n   npm run build\n\n## Code Standards\n\n- Follow the style guide\n- Write unit tests\n- Document your code\n- Keep commits atomic\n\n## Review Process\n\n1. Submit PR\n2. Automated checks\n3. Code review\n4. Merge or request changes\n\n## Getting Help\n\n- Join our Telegram community\n- Check the FAQ\n- Read the documentation\n- Follow us on X for updates",
    "url": "/community/contribution-guidelines"
  },
  {
    "title": "Community and Social Media",
    "body": "# Community and Social Media\n\n## Community Channels\n\n### Social Media Platforms\n- [X (Twitter)](https://x.com/clayer_io)\n- [Telegram](https://t.me/clayer_io)\n\n## Community Guidelines\n\n### 1. Be Respectful\n- Treat others with respect\n- No harassment or discrimination\n- Keep discussions constructive\n\n### 2. Stay On Topic\n- Use appropriate channels\n- Follow platform guidelines\n- Avoid spam\n\n### 3. Share Knowledge\n- Help others learn\n- Share your experiences\n- Contribute to discussions\n\n## Getting Support\n\n### Technical Support\n- Ask questions on Telegram\n- Check documentation first\n- Provide necessary details\n- Tag your questions appropriately\n\n### General Questions\n- Use Telegram for community discussions\n- Search previous messages before asking\n- Be specific about your issue\n\n## Community Events\n\n### Regular Events\n- Weekly AMAs on X\n- Community updates on Telegram\n- Developer workshops and announcements\n\n### How to Participate\n1. Follow us on X and join our Telegram\n2. Enable notifications for announcements\n3. Register for events when announced\n4. Share feedback and questions\n\n## Stay Connected\n\nJoin our active community:\n- **X (Twitter)**: Get the latest updates, announcements, and industry insights\n- **Telegram**: Real-time community discussions, support, and direct communication with the team\n\nWe regularly share:\n- Development updates\n- Network status\n- Educational content\n- Community highlights\n- Event announcements",
    "url": "/community/social-media"
  },
  {
    "title": "Feature Comparison",
    "body": "# Feature Comparison\n\n## Overview\n\nCompare CLayer's current testnet features with other blockchain platforms:\n\n## Technical Features\n\n### Performance (Target vs Live Networks)\n| Feature | CLayer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| Block Time | 3s | 12s | 2s | 3s |\n| Finality | 1-3s | 6-10min | 2-3s | 3s |\n| Uptime | 99.95% | 99.95% | 99.9% | 99.9% |\n| Chain ID | 28525 | 1 | 137 | 56 |\n\n  \n    Performance Comparison\n  \n  \n  \n    \n      CLayer Testnet\n      Testnet\n    \n    \n      \n        Block Time\n        3s\n      \n      \n        Finality\n        1-3s\n      \n      \n        Uptime\n        99.95%\n      \n      \n        Chain ID\n        28525\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Block Time\n        12s\n      \n      \n        Finality\n        6-10min\n      \n      \n        Uptime\n        99.95%\n      \n      \n        Chain ID\n        1\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Block Time\n        2s\n      \n      \n        Finality\n        2-3s\n      \n      \n        Uptime\n        99.9%\n      \n      \n        Chain ID\n        137\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Block Time\n        3s\n      \n      \n        Finality\n        3s\n      \n      \n        Uptime\n        99.9%\n      \n      \n        Chain ID\n        56\n      \n    \n  \n\n### Network Configuration\n| Feature | CLayer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| Consensus | DPoS | PoW→PoS | PoS | PoA |\n| Currency | CLAYER | ETH | MATIC | BNB |\n| Min Gas Price | 0.000021 CLAYER | Variable | 30 Gwei | 5 Gwei |\n| EVM Compatible | Yes | Native | Yes | Yes |\n\n  \n    Network Configuration\n  \n  \n  \n    \n      CLayer Testnet\n      Testnet\n    \n    \n      \n        Consensus\n        DPoS\n      \n      \n        Currency\n        CLAYER\n      \n      \n        Min Gas Price\n        0.000021 CLAYER\n      \n      \n        EVM Compatible\n        Yes\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Consensus\n        PoW→PoS\n      \n      \n        Currency\n        ETH\n      \n      \n        Min Gas Price\n        Variable\n      \n      \n        EVM Compatible\n        Native\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Consensus\n        PoS\n      \n      \n        Currency\n        MATIC\n      \n      \n        Min Gas Price\n        30 Gwei\n      \n      \n        EVM Compatible\n        Yes\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Consensus\n        PoA\n      \n      \n        Currency\n        BNB\n      \n      \n        Min Gas Price\n        5 Gwei\n      \n      \n        EVM Compatible\n        Yes\n      \n    \n  \n\n### Validator Requirements\n| Feature | CLayer Testnet | CLayer Mainnet | Ethereum 2.0 | Polygon | BSC |\n|---------|---------------------|---------------------|---------------|---------|-----|\n| Min Stake | 32 CLAYER | 100,000 CLAYER | 32 ETH | 1 MATIC | N/A |\n| Min Validators | 5 active | 5 active | Various | 100+ | 21 |\n| Max Validators | 21 active | 10,000 active | Unlimited | Unlimited | 21 |\n| Staking Method | Manual | Smart Contract | Smart Contract | Smart Contract | N/A |\n\n  \n    Validator Requirements\n  \n  \n  \n    \n      CLayer Testnet\n      Testnet\n    \n    \n      \n        Min Stake\n        32 CLAYER\n      \n      \n        Min Validators\n        5 active\n      \n      \n        Max Validators\n        21 active\n      \n      \n        Staking Method\n        Manual\n      \n    \n  \n\n  \n    \n      CLayer Mainnet\n      Mainnet\n    \n    \n      \n        Min Stake\n        100,000 CLAYER\n      \n      \n        Min Validators\n        5 active\n      \n      \n        Max Validators\n        10,000 active\n      \n      \n        Staking Method\n        Smart Contract\n      \n    \n  \n  \n  \n    \n      Ethereum 2.0\n      Mainnet\n    \n    \n      \n        Min Stake\n        32 ETH\n      \n      \n        Min Validators\n        Various\n      \n      \n        Max Validators\n        Unlimited\n      \n      \n        Staking Method\n        Smart Contract\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Min Stake\n        1 MATIC\n      \n      \n        Min Validators\n        100+\n      \n      \n        Max Validators\n        Unlimited\n      \n      \n        Staking Method\n        Smart Contract\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Min Stake\n        N/A\n      \n      \n        Min Validators\n        21\n      \n      \n        Max Validators\n        21\n      \n      \n        Staking Method\n        N/A\n      \n    \n  \n\n## Security Features\n\n### Current Implementation\n| Feature | CLayer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| Security Model | Standard EVM + DPoS | PoW→PoS | PoS | PoA |\n| Burn Mechanism | 25% gas fees | EIP-1559 | No | No |\n| Slashing | DPoS standard | Yes | Yes | No |\n\n  \n    Security Features\n  \n  \n  \n    \n      CLayer Testnet\n      Testnet\n    \n    \n      \n        Security Model\n        Standard EVM + DPoS\n      \n      \n        Burn Mechanism\n        25% gas fees\n      \n      \n        Slashing\n        DPoS standard\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Security Model\n        PoW→PoS\n      \n      \n        Burn Mechanism\n        EIP-1559\n      \n      \n        Slashing\n        Yes\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Security Model\n        PoS\n      \n      \n        Burn Mechanism\n        No\n      \n      \n        Slashing\n        Yes\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Security Model\n        PoA\n      \n      \n        Burn Mechanism\n        No\n      \n      \n        Slashing\n        No\n      \n    \n  \n\n## Developer Experience\n\n### Development Tools\n| Feature | CLayer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| Hardhat Support | Yes | Yes | Yes | Yes |\n| Truffle Support | Yes | Yes | Yes | Yes |\n| Remix Support | Yes | Yes | Yes | Yes |\n| Web3.js/Ethers.js | Yes | Yes | Yes | Yes |\n\n  \n    Development Tools\n  \n  \n  \n    \n      CLayer Testnet\n      Testnet\n    \n    \n      \n        Hardhat Support\n        Yes\n      \n      \n        Truffle Support\n        Yes\n      \n      \n        Remix Support\n        Yes\n      \n      \n        Web3.js/Ethers.js\n        Yes\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Hardhat Support\n        Yes\n      \n      \n        Truffle Support\n        Yes\n      \n      \n        Remix Support\n        Yes\n      \n      \n        Web3.js/Ethers.js\n        Yes\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Hardhat Support\n        Yes\n      \n      \n        Truffle Support\n        Yes\n      \n      \n        Remix Support\n        Yes\n      \n      \n        Web3.js/Ethers.js\n        Yes\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Hardhat Support\n        Yes\n      \n      \n        Truffle Support\n        Yes\n      \n      \n        Remix Support\n        Yes\n      \n      \n        Web3.js/Ethers.js\n        Yes\n      \n    \n  \n\n### Network Resources\n| Feature | CLayer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| Block Explorer | explorer-testnet.clayer.io | etherscan.io | polygonscan.com | bscscan.com |\n| Faucet | 1 CLAYER/day | Various | Yes | Yes |\n| API Docs | explorer-testnet.clayer.io/api-docs | Various | docs.polygon.technology | docs.bnbchain.org |\n| GraphQL | Yes | Yes | Yes | Yes |\n\n  \n    Network Resources\n  \n  \n  \n    \n      CLayer Testnet\n      Testnet\n    \n    \n      \n        Block Explorer\n        explorer-testnet.clayer.io\n      \n      \n        Faucet\n        1 CLAYER/day\n      \n      \n        API Docs\n        explorer-testnet.clayer.io/api-docs\n      \n      \n        GraphQL\n        Yes\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Block Explorer\n        etherscan.io\n      \n      \n        Faucet\n        Various\n      \n      \n        API Docs\n        Various\n      \n      \n        GraphQL\n        Yes\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Block Explorer\n        polygonscan.com\n      \n      \n        Faucet\n        Yes\n      \n      \n        API Docs\n        docs.polygon.technology\n      \n      \n        GraphQL\n        Yes\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Block Explorer\n        bscscan.com\n      \n      \n        Faucet\n        Yes\n      \n      \n        API Docs\n        docs.bnbchain.org\n      \n      \n        GraphQL\n        Yes\n      \n    \n  \n\n## User Experience\n\n### Wallet Integration\n| Feature | CLayer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| MetaMask | Yes (testnet config) | Yes | Yes | Yes |\n| WalletConnect | Yes (register required) | Yes | Yes | Yes |\n| Mobile Wallets | Yes (EVM standard) | Yes | Yes | Yes |\n| Hardware Wallets | Limited (No Ledger) | Yes | Yes | Yes |\n\n  \n    Wallet Integration\n  \n  \n  \n    \n      CLayer Testnet\n      Testnet\n    \n    \n      \n        MetaMask\n        Yes (testnet config)\n      \n      \n        WalletConnect\n        Yes (register required)\n      \n      \n        Mobile Wallets\n        Yes (EVM standard)\n      \n      \n        Hardware Wallets\n        Limited (No Ledger)\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        MetaMask\n        Yes\n      \n      \n        WalletConnect\n        Yes\n      \n      \n        Mobile Wallets\n        Yes\n      \n      \n        Hardware Wallets\n        Yes\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        MetaMask\n        Yes\n      \n      \n        WalletConnect\n        Yes\n      \n      \n        Mobile Wallets\n        Yes\n      \n      \n        Hardware Wallets\n        Yes\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        MetaMask\n        Yes\n      \n      \n        WalletConnect\n        Yes\n      \n      \n        Mobile Wallets\n        Yes\n      \n      \n        Hardware Wallets\n        Yes\n      \n    \n  \n\n### Ecosystem Status\n| Feature | CLayer Testnet | Ethereum | Polygon | BSC |\n|---------|---------------------|----------|---------|-----|\n| Status | In Development | Mainnet | Mainnet | Mainnet |\n| DApps | Testing Phase | 3000+ | 1000+ | 500+ |\n| Example Contracts | 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB | Many | Many | Many |\n\n  \n    Ecosystem Status\n  \n  \n  \n    \n      CLayer Testnet\n      Development\n    \n    \n      \n        Status\n        In Development\n      \n      \n        DApps\n        Testing Phase\n      \n      \n        Example Contracts\n        0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB\n      \n    \n  \n  \n  \n    \n      Ethereum\n      Mainnet\n    \n    \n      \n        Status\n        Mainnet\n      \n      \n        DApps\n        3000+\n      \n      \n        Example Contracts\n        Many\n      \n    \n  \n  \n  \n    \n      Polygon\n      Mainnet\n    \n    \n      \n        Status\n        Mainnet\n      \n      \n        DApps\n        1000+\n      \n      \n        Example Contracts\n        Many\n      \n    \n  \n  \n  \n    \n      BSC\n      Mainnet\n    \n    \n      \n        Status\n        Mainnet\n      \n      \n        DApps\n        500+\n      \n      \n        Example Contracts\n        Many\n      \n    \n  \n\n## 🚧 Features in Development\n\n### Upcoming CLayer Features\n| Feature | Status | Comparable Networks |\n|---------|--------|-------------------|\n| Automated Staking | In Development | Ethereum 2.0, Polygon |\n| On-chain Governance | In Development | Compound, Uniswap |\n| Cross-chain Bridges | In Development | Polygon, Avalanche |\n| Oracle Integration | In Development | Chainlink, Band Protocol |\n| Status Dashboard | In Development | Ethereum Network Status |\n\n  \n    🚧 Features in Development\n  \n  \n  \n    \n      \n        Automated Staking\n      \n      \n        \n          CLayer\n          In Development\n        \n        \n          Comparable to\n          Ethereum 2.0, Polygon\n        \n      \n    \n    \n    \n      \n        On-chain Governance\n      \n      \n        \n          CLayer\n          In Development\n        \n        \n          Comparable to\n          Compound, Uniswap\n        \n      \n    \n    \n    \n      \n        Cross-chain Bridges\n      \n      \n        \n          CLayer\n          In Development\n        \n        \n          Comparable to\n          Polygon, Avalanche\n        \n      \n    \n    \n    \n      \n        Oracle Integration\n      \n      \n        \n          CLayer\n          In Development\n        \n        \n          Comparable to\n          Chainlink, Band Protocol\n        \n      \n    \n    \n    \n      \n        Status Dashboard\n      \n      \n        \n          CLayer\n          In Development\n        \n        \n          Comparable to\n          Ethereum Network Status\n        \n      \n    \n  \n\n## Integration Comparison\n\n### Development Similarity\n| Aspect | CLayer | Similarity to |\n|--------|-------------|---------------|\n| Smart Contracts | Solidity | Ethereum (100%) |\n| Web3 Libraries | Web3.js, Ethers.js | Ethereum (100%) |\n| Development Flow | Standard EVM | Ethereum, Polygon, BSC |\n| Wallet Setup | Standard EVM | All EVM chains |\n\n  \n    Development Similarity\n  \n  \n  \n    \n      \n        Smart Contracts\n      \n      \n        \n          CLayer\n          Solidity\n        \n        \n          Similarity to\n          Ethereum (100%)\n        \n      \n    \n    \n    \n      \n        Web3 Libraries\n      \n      \n        \n          CLayer\n          Web3.js, Ethers.js\n        \n        \n          Similarity to\n          Ethereum (100%)\n        \n      \n    \n    \n    \n      \n        Development Flow\n      \n      \n        \n          CLayer\n          Standard EVM\n        \n        \n          Similarity to\n          Ethereum, Polygon, BSC\n        \n      \n    \n    \n    \n      \n        Wallet Setup\n      \n      \n        \n          CLayer\n          Standard EVM\n        \n        \n          Similarity to\n          All EVM chains\n        \n      \n    \n  \n\n### Migration Effort\n- **From Ethereum**: Minimal (just change RPC endpoint)\n- **From Polygon**: Minimal (same EVM patterns)\n- **From BSC**: Minimal (same EVM patterns)\n- **From Solana**: Significant (different architecture)",
    "url": "/comparison/feature-comparison"
  },
  {
    "title": "Key Advantages",
    "body": "# Key Advantages\n\n## Overview\n\nCircle Layer offers several key advantages over other blockchain platforms:\n\n## Technical Advantages\n\n### 1. High Performance\n- 10,000+ TPS\n- 2-second block time\n- 4-second finality\n- Efficient consensus mechanism\n\n### 2. Advanced Security\n- AI-powered security system\n- Real-time threat detection\n- Automated vulnerability scanning\n- Formal verification support\n\n### 3. Scalability\n- Built-in sharding\n- Layer 2 solutions\n- Cross-chain compatibility\n- Optimized resource usage\n\n## Developer Advantages\n\n### 1. Developer Experience\n- EVM compatibility\n- Comprehensive tooling\n- Extensive documentation\n- Active community support\n\n### 2. Cost Efficiency\n- Lower gas fees\n- Optimized resource usage\n- Efficient contract execution\n- Cost-effective deployment\n\n### 3. Innovation\n- Latest blockchain features\n- Regular updates\n- Community-driven development\n- Open to new ideas\n\n## User Advantages\n\n### 1. User Experience\n- Fast transactions\n- Low fees\n- User-friendly interfaces\n- Multiple wallet support\n\n### 2. Security\n- Advanced protection\n- User-friendly security features\n- Regular security updates\n- Community-driven security\n\n### 3. Ecosystem\n- Growing DApp ecosystem\n- Active community\n- Regular events\n- Strong partnerships",
    "url": "/comparison/key-advantages"
  },
  {
    "title": "Cross-Chain Bridge",
    "body": "# Cross-Chain Bridge\n\n## Overview\n\nCircle Layer implements a comprehensive cross-chain bridge infrastructure that enables seamless asset transfer between CLayer Blockchain and other major blockchain networks. The bridge uses a secure lock-and-mint mechanism to ensure asset safety and maintain liquidity across chains.\n\n## Bridge Architecture\n\n### Asset Mapping System\nCircle Layer's cross-chain bridge supports mapping of major crypto assets to the CLayer ecosystem:\n\n- **ETH (Ethereum)**: Native Ethereum tokens\n- **BNB (Binance Smart Chain)**: BSC native and BEP-20 tokens  \n- **Stable Coins**: USDC, USDT, DAI, and other major stablecoins\n- **Wrapped Bitcoin**: wBTC and other Bitcoin representations\n- **Custom Tokens**: ERC-20 and compatible token standards\n\n### Lock-and-Mint Mechanism\nThe bridge operates using a secure lock-and-mint protocol:\n\n1. **Asset Locking**: Original tokens are locked in secure smart contracts on the source chain\n2. **Verification**: Multi-signature validation confirms the lock transaction\n3. **Minting**: Corresponding amount of tokens are minted on CLayer Blockchain\n4. **Redemption**: Users can burn CLayer tokens to unlock original assets\n\nCode example:\ngraph TD\n    A[User Deposits ETH] --> B[Lock in Bridge Contract]\n    B --> C[Multi-sig Validation]\n    C --> D[Mint Wrapped ETH on CLayer]\n    D --> E[User Receives clETH]\n    \n    F[User Burns clETH] --> G[Burn Verification]\n    G --> H[Multi-sig Release]\n    H --> I[Unlock Original ETH]\n    I --> J[User Receives ETH]\n\n## Supported Assets\n\n### Primary Bridge Pairs\n- **CLAYER/ETH**: Direct bridging between native tokens\n- **CLAYER/USDC**: Stable coin integration for DeFi\n- **CLAYER/BNB**: Binance Smart Chain connectivity\n- **CLAYER/USDT**: Additional stable coin support\n\n### Asset Categories\n\n#### 1. Native Tokens\n- **Ethereum (ETH)**: 1:1 mapping to clETH\n- **BNB**: 1:1 mapping to clBNB\n- **CLAYER**: Native CLayer token\n\n#### 2. Stable Coins\n- **USDC**: USD Coin bridging\n- **USDT**: Tether bridging  \n- **DAI**: MakerDAO stable coin\n- **BUSD**: Binance USD\n\n#### 3. Wrapped Assets\n- **wBTC**: Wrapped Bitcoin\n- **wETH**: Wrapped Ethereum\n- **Custom Wrapped Tokens**: Project-specific wrapped assets\n\n## Bridge Security\n\n### Multi-Signature Validation\n- **Validator Consensus**: 5-of-7 multi-signature requirement\n- **Time Delays**: 24-hour delay for large transfers (>$100,000)\n- **Emergency Pause**: Circuit breaker functionality for security incidents\n- **Audit Trail**: Complete transaction history and verification\n\n### Security Features\n- **Real-time Monitoring**: AI-powered anomaly detection\n- **Rate Limiting**: Protection against bulk transfer attacks\n- **Whitelist Support**: Optional whitelisting for institutional users\n- **Insurance Integration**: Coverage for bridge-related losses\n\n## Token-Peg Application Process\n\n### Application Requirements\nTo apply for token bridging support, projects must follow this process:\n\n1. **Initial Application**\n   - Contact: support@clayer.io\n   - Submit project details and technical specifications\n   - Provide tokenomics and security audit information\n\n2. **Technical Review**\n   - Smart contract audit verification\n   - Token economics analysis\n   - Security assessment\n   - Compliance check\n\n3. **Bridge Contract Deployment**\n   - Custom bridge contract development\n   - Multi-signature setup\n   - Security testing and validation\n   - Testnet deployment and testing\n\n4. **Production Launch**\n   - Mainnet bridge deployment\n   - Liquidity bootstrapping\n   - Community announcement\n   - Monitoring and support\n\n### Application Process Overview\n\nThe Crosschain Bridge lets users to exchange the assets from other blockchains to our blockchain.\n\n**The process is:**\n\n1. **Submit application**\n   - Email: support@clayer.io\n   \n2. **Deploy token contract**\n\n3. **Testing**\n\n4. **Online**\n\n### Application Timeline\n- **Initial Review**: 2-3 weeks\n- **Technical Development**: 4-6 weeks\n- **Testing Phase**: 2-3 weeks\n- **Production Deployment**: 1-2 weeks\n\n## Decentralized Cross-Chain Solutions\n\n### Community Development\nCircle Layer encourages the development of decentralized cross-chain solutions:\n\n- **Open Source Bridges**: Community-developed bridge protocols\n- **Decentralized Validators**: Permissionless validator participation\n- **Cross-Chain DAOs**: Governance across multiple chains\n- **Interoperability Standards**: Development of universal standards\n\n### Developer Incentives\n- **Grant Programs**: Funding for cross-chain development\n- **Technical Support**: Core team assistance for bridge projects\n- **Security Resources**: Audit support and security reviews\n- **Community Recognition**: Developer showcase and promotion\n\n## Bridge Usage\n\n### User Guide\n\n#### Bridging Assets to CLayer\n1. **Connect Wallet**: Connect MetaMask or compatible wallet\n2. **Select Asset**: Choose asset to bridge (ETH, BNB, USDC, etc.)\n3. **Enter Amount**: Specify amount to bridge\n4. **Confirm Transaction**: Sign the lock transaction\n5. **Wait for Minting**: Receive wrapped tokens on CLayer\n\n#### Bridging Assets from CLayer\n1. **Select Wrapped Asset**: Choose asset to bridge back\n2. **Enter Amount**: Specify amount to unlock\n3. **Initiate Burn**: Burn wrapped tokens on CLayer\n4. **Wait for Unlock**: Original tokens released on source chain\n\n### Integration Examples\n\n#### Web3.js Integration\n\nCode example:\nconst CircleLayerBridge = require('@clayer/bridge-sdk');\n\n// Initialize bridge\nconst bridge = new CircleLayerBridge({\n  rpcUrl: 'https://testnet-rpc.clayer.io',\n  contractAddress: '0x...' // Bridge contract address\n});\n\n// Bridge ETH to CLayer\nasync function bridgeETH(amount, userAddress) {\n  const tx = await bridge.lockETH({\n    amount: amount,\n    recipient: userAddress,\n    sourceChain: 'ethereum'\n  });\n  \n  return await tx.wait();\n}\n\n// Bridge back to Ethereum\nasync function bridgeBack(amount, userAddress) {\n  const tx = await bridge.burnWrappedETH({\n    amount: amount,\n    recipient: userAddress,\n    targetChain: 'ethereum'\n  });\n  \n  return await tx.wait();\n}\n\n#### React Integration\n\nCode example:\n\nfunction BridgeComponent() {\n  const { bridge, bridgeETH, getBalances } = useBridge();\n  const [amount, setAmount] = useState('');\n  \n  const handleBridge = async () => {\n    try {\n      const tx = await bridgeETH(amount);\n      console.log('Bridge transaction:', tx.hash);\n    } catch (error) {\n      console.error('Bridge failed:', error);\n    }\n  };\n  \n  return (\n    \n       setAmount(e.target.value)}\n        placeholder=\"Amount to bridge\"\n      />\n      \n        Bridge to CLayer\n      \n    \n  );\n}\n\n## Bridge Monitoring\n\n### Real-time Status\n- **Bridge Health**: Live status monitoring\n- **Transaction Queue**: Pending bridge transactions\n- **Liquidity Levels**: Available liquidity on both sides\n- **Performance Metrics**: Bridge speed and success rates\n\n### Analytics Dashboard\n- **Volume Statistics**: Daily/weekly/monthly bridge volume\n- **Asset Distribution**: Most bridged assets\n- **User Analytics**: Bridge adoption metrics\n- **Security Incidents**: Security event tracking\n\n## Future Development\n\n### Planned Enhancements\n- **Additional Chains**: Polygon, Arbitrum, Avalanche support\n- **Faster Finality**: Reduced bridge confirmation times\n- **Lower Fees**: Optimized gas costs for bridging\n- **Mobile Integration**: Native mobile wallet bridge support\n\n### Community Contributions\n- **Open Source**: Bridge contracts and SDK open sourced\n- **Developer Community**: Active developer engagement\n- **Security Bounties**: Ongoing security research incentives\n- **Protocol Improvements**: Community-driven enhancements\n\n## Resources\n\n### Documentation\n- **Technical Specs**: Bridge architecture documentation\n- **API Reference**: Complete SDK documentation\n- **Security Audits**: Published security audit reports\n- **Integration Guides**: Step-by-step integration tutorials\n\n### Support\n- **Developer Telegram**: Real-time developer support\n- **Technical Support**: support@clayer.io\n- **Security Issues**: admin@clayer.io\n- **Bug Reports**: GitHub issues and bug tracking",
    "url": "/development/cross-chain-bridge"
  },
  {
    "title": "Deploying Contracts",
    "body": "# Deploying Contracts\n\n## Overview\n\nLearn how to deploy smart contracts to CLayer testnet.\n\n## Network Configuration\n\n### CLayer Testnet\n- **RPC URL**: https://testnet-rpc.clayer.io\n- **Chain ID**: 28525\n- **Currency Symbol**: CLAYER\n- **Gas Price**: Minimum 0.000021 CLAYER (adjusts based on network consumption)\n- **Block Gas Limit**: 10,000,000,000,000 per block\n- **Block Explorer**: https://explorer-testnet.clayer.io/\n\n## Deployment Methods\n\n### 1. Using Hardhat\n\nCode example:\n// hardhat.config.js\nrequire('@nomiclabs/hardhat-ethers');\n\nmodule.exports = {\n  solidity: \"0.8.19\",\n  networks: {\n    circleLayerTestnet: {\n      url: \"https://testnet-rpc.clayer.io\",\n      chainId: 28525,\n      accounts: [process.env.PRIVATE_KEY],\n      gasPrice: 21000000000, // 0.000021 CLAYER in wei\n      gas: 10000000000000 // Block gas limit\n    }\n  }\n};\n\n// deploy.js\nasync function main() {\n  const [deployer] = await ethers.getSigners();\n  console.log(\"Deploying with account:\", deployer.address);\n  console.log(\"Account balance:\", (await deployer.getBalance()).toString());\n\n  const Contract = await ethers.getContractFactory(\"MyContract\");\n  const contract = await Contract.deploy({\n    gasPrice: ethers.utils.parseUnits('21', 'gwei'), // 0.000021 CLAYER\n  });\n  \n  await contract.deployed();\n  console.log(\"Contract deployed to:\", contract.address);\n  console.log(\"Transaction hash:\", contract.deployTransaction.hash);\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch(error => {\n    console.error(error);\n    process.exit(1);\n  });\n\n### 2. Using Truffle\n\nCode example:\n// truffle-config.js\nconst HDWalletProvider = require('@truffle/hdwallet-provider');\n\nmodule.exports = {\n  networks: {\n    circleLayerTestnet: {\n      provider: () => new HDWalletProvider(\n        process.env.PRIVATE_KEY,\n        'https://testnet-rpc.clayer.io'\n      ),\n      network_id: 28525,\n      gas: 10000000000000,\n      gasPrice: 21000000000, // 0.000021 CLAYER in wei\n      confirmations: 2,\n      timeoutBlocks: 200,\n      skipDryRun: true\n    }\n  },\n  compilers: {\n    solc: {\n      version: \"0.8.19\"\n    }\n  }\n};\n\n// migrations/1_deploy_contracts.js\nconst MyContract = artifacts.require(\"MyContract\");\nmodule.exports = function(deployer) {\n  deployer.deploy(MyContract);\n};\n\n### 3. Using Remix IDE\n1. Open [Remix IDE](https://remix.ethereum.org/)\n2. Connect to CLayer testnet:\n   - Environment: \"Injected Provider - MetaMask\"\n   - Ensure MetaMask is connected to CLayer Testnet\n3. Compile your contract\n4. Deploy with appropriate gas settings\n\n## Example Deployed Contract\n\nFor reference, here's an example contract deployed on CLayer testnet:\n- **Contract Address**: [0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB)\n- **Explorer**: [View Contract](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract)\n- **ABI**: [Contract ABI](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract_abi)\n\n## Deployment Checklist\n\n### 1. Pre-deployment\n- Test thoroughly on CLayer testnet\n- Get CLAYER from [faucet](https://faucet.clayer.io)\n- Check gas estimates with current network conditions\n- Verify constructor arguments\n\n### 2. During Deployment\n- Monitor transaction on [explorer](https://explorer-testnet.clayer.io/)\n- Use appropriate gas price (minimum 0.000021 CLAYER)\n- Verify deployment address\n- Save deployment info\n\n### 3. Post-deployment\n- Verify contract on block explorer\n- Test functionality with CLAYER\n- Update documentation\n- Monitor events\n\n## Gas Calculation\n\nCircle Layer follows Ethereum's standard gas calculation:\n\nCode example:\nTotal Fee = Gas Price × Gas Used\n\nWith current parameters:\n- **Minimum Gas Price**: 0.000021 CLAYER\n- **Block Gas Limit**: 10,000,000,000,000\n- **Average Block Time**: 3 seconds\n\n## Best Practices\n\n### 1. Security\n- Use secure private keys\n- Test on CLayer testnet first\n- Verify contract code on explorer\n- Monitor deployment transactions\n\n### 2. Cost Optimization\n- Optimize contract size for lower deployment costs\n- Use appropriate gas price based on network conditions\n- Consider gas efficiency in contract design\n- Monitor CLAYER token costs\n\n### 3. Integration\n- Same as EVM blockchain integration\n- Compatible with existing Ethereum development tools\n- Use standard Web3 libraries (Web3.js, Ethers.js)\n\n### 4. Maintenance\n- Keep deployment records\n- Monitor contract activity on explorer\n- Update documentation\n- Plan for upgrades",
    "url": "/development/deploying-contracts"
  },
  {
    "title": "ERC20 Token Development",
    "body": "# ERC20 Token Development\n\nCircle Layer Blockchain is fully compatible with the [ERC20](https://eips.ethereum.org/EIPS/eip-20) standard, allowing developers to create and deploy standard-compliant tokens seamlessly.\n\n## ERC20 Standard Interface\n\nCircle Layer supports the complete ERC20 interface with all standard functions and events:\n\nCode example:\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n## Implementation Example\n\n### Basic ERC20 Token Contract\n\nCode example:\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MyToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    \n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        uint256 _totalSupply\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply * 10**_decimals;\n        balanceOf[msg.sender] = totalSupply;\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n    \n    function transfer(address to, uint256 value) public returns (bool) {\n        require(balanceOf[msg.sender] >= value, \"Insufficient balance\");\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    function approve(address spender, uint256 value) public returns (bool) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(balanceOf[from] >= value, \"Insufficient balance\");\n        require(allowance[from][msg.sender] >= value, \"Allowance exceeded\");\n        \n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\n\n## Deployment Guide\n\n### Using Remix IDE\n\n1. **Open Remix**: Navigate to [remix.ethereum.org](https://remix.ethereum.org)\n2. **Create Contract**: Create a new file with your ERC20 contract\n3. **Compile**: Select Solidity compiler version 0.8.0 or higher\n4. **Deploy**: \n   - Select \"Injected Web3\" environment\n   - Ensure MetaMask is connected to CLayer testnet\n   - Set constructor parameters\n   - Click \"Deploy\"\n\n### Using Hardhat\n\n#### Project Setup\n\nCode example:\nnpm install --save-dev hardhat @nomiclabs/hardhat-ethers ethers\nnpx hardhat init\n\n#### Hardhat Configuration\n\nCode example:\n// hardhat.config.js\nrequire(\"@nomiclabs/hardhat-ethers\");\n\nmodule.exports = {\n  solidity: \"0.8.19\",\n  networks: {\n    clayer: {\n      url: \"https://testnet-rpc.clayer.io\",\n      chainId: 28525,\n      accounts: [process.env.PRIVATE_KEY]\n    }\n  }\n};\n\n#### Deployment Script\n\nCode example:\n// scripts/deploy.js\nasync function main() {\n  const [deployer] = await ethers.getSigners();\n  \n  console.log(\"Deploying with account:\", deployer.address);\n  console.log(\"Account balance:\", (await deployer.getBalance()).toString());\n  \n  const Token = await ethers.getContractFactory(\"MyToken\");\n  const token = await Token.deploy(\n    \"My Token\",      // name\n    \"MTK\",           // symbol\n    18,              // decimals\n    1000000          // total supply (1M tokens)\n  );\n  \n  await token.deployed();\n  console.log(\"Token deployed to:\", token.address);\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error);\n    process.exit(1);\n  });\n\n#### Deploy Command\n\nCode example:\nnpx hardhat run scripts/deploy.js --network clayer\n\n## Advanced Features\n\n### Mintable Tokens\n\nCode example:\ncontract MintableToken is ERC20Interface {\n    address public owner;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n    \n    function mint(address to, uint256 amount) public onlyOwner {\n        totalSupply += amount;\n        balanceOf[to] += amount;\n        emit Transfer(address(0), to, amount);\n    }\n}\n\n### Burnable Tokens\n\nCode example:\nfunction burn(uint256 amount) public {\n    require(balanceOf[msg.sender] >= amount, \"Insufficient balance\");\n    balanceOf[msg.sender] -= amount;\n    totalSupply -= amount;\n    emit Transfer(msg.sender, address(0), amount);\n}\n\n### Pausable Tokens\n\nCode example:\ncontract PausableToken is ERC20Interface {\n    bool public paused = false;\n    address public owner;\n    \n    modifier whenNotPaused() {\n        require(!paused, \"Token is paused\");\n        _;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n    \n    function pause() public onlyOwner {\n        paused = true;\n    }\n    \n    function unpause() public onlyOwner {\n        paused = false;\n    }\n    \n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        // transfer logic\n    }\n}\n\n## Token Verification\n\n### Contract Verification on Explorer\n\n1. Navigate to [explorer-testnet.clayer.io](https://explorer-testnet.clayer.io)\n2. Search for your contract address\n3. Click \"Verify Contract\"\n4. Submit source code and constructor parameters\n\n### Metadata Standards\n\nCode example:\ncontract MyToken {\n    // Standard metadata\n    string public name = \"My Token\";\n    string public symbol = \"MTK\";\n    uint8 public decimals = 18;\n    \n    // Optional metadata\n    string public website = \"https://mytoken.com\";\n    string public github = \"https://github.com/mytoken/token\";\n    \n    // Token logo (IPFS hash)\n    string public logoURI = \"ipfs://QmTokenLogo...\";\n}\n\n## Testing Your Token\n\n### Unit Tests with Hardhat\n\nCode example:\n// test/MyToken.test.js\nconst { expect } = require(\"chai\");\n\ndescribe(\"MyToken\", function () {\n  let token;\n  let owner;\n  let addr1;\n  let addr2;\n\n  beforeEach(async function () {\n    [owner, addr1, addr2] = await ethers.getSigners();\n    const Token = await ethers.getContractFactory(\"MyToken\");\n    token = await Token.deploy(\"Test Token\", \"TEST\", 18, 1000000);\n    await token.deployed();\n  });\n\n  it(\"Should have correct initial supply\", async function () {\n    expect(await token.totalSupply()).to.equal(ethers.utils.parseEther(\"1000000\"));\n    expect(await token.balanceOf(owner.address)).to.equal(ethers.utils.parseEther(\"1000000\"));\n  });\n\n  it(\"Should transfer tokens between accounts\", async function () {\n    await token.transfer(addr1.address, ethers.utils.parseEther(\"100\"));\n    expect(await token.balanceOf(addr1.address)).to.equal(ethers.utils.parseEther(\"100\"));\n  });\n\n  it(\"Should handle approvals correctly\", async function () {\n    await token.approve(addr1.address, ethers.utils.parseEther(\"100\"));\n    expect(await token.allowance(owner.address, addr1.address)).to.equal(ethers.utils.parseEther(\"100\"));\n  });\n});\n\n### Run Tests\n\nCode example:\nnpx hardhat test\n\n## Integration with DeFi\n\n### Adding Liquidity to DEX\n\nCode example:\n// Example: Adding token to CLayer DEX\nconst tokenContract = new ethers.Contract(tokenAddress, tokenABI, signer);\nconst dexRouter = new ethers.Contract(routerAddress, routerABI, signer);\n\n// Approve tokens for DEX\nawait tokenContract.approve(routerAddress, ethers.utils.parseEther(\"1000\"));\n\n// Add liquidity\nawait dexRouter.addLiquidityETH(\n  tokenAddress,\n  ethers.utils.parseEther(\"1000\"),  // token amount\n  0,                                // min token amount\n  0,                                // min ETH amount\n  owner.address,                    // to\n  Math.floor(Date.now() / 1000) + 3600  // deadline\n);\n\n## Best Practices\n\n### Security Considerations\n\n1. **Use OpenZeppelin**: Consider using [OpenZeppelin contracts](https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC20)\n2. **Audit Smart Contracts**: Have contracts audited before mainnet deployment\n3. **Test Thoroughly**: Comprehensive testing on testnet\n4. **Handle Edge Cases**: Check for integer overflow/underflow\n5. **Access Control**: Implement proper owner/admin controls\n\n### Gas Optimization\n\n1. **Efficient Storage**: Use appropriate data types\n2. **Batch Operations**: Combine multiple operations when possible\n3. **Event Optimization**: Use indexed parameters judiciously\n4. **Code Optimization**: Remove unnecessary computations\n\n### Token Economics\n\n1. **Supply Management**: Plan token distribution carefully\n2. **Inflation/Deflation**: Consider burn mechanisms\n3. **Utility**: Ensure tokens have clear use cases\n4. **Governance**: Plan for future governance needs\n\n## Common Issues & Solutions\n\n### Deployment Failures\n\n**Issue**: \"Gas estimation failed\"\n**Solution**: Increase gas limit or check for contract errors\n\n**Issue**: \"Nonce too low\"\n**Solution**: Reset MetaMask account or check pending transactions\n\n### Transfer Issues\n\n**Issue**: \"Insufficient balance\"\n**Solution**: Verify account balance and token amount\n\n**Issue**: \"Allowance exceeded\"\n**Solution**: Check and increase allowance if needed\n\n## References\n\n- **EIP-20 Standard**: [https://eips.ethereum.org/EIPS/eip-20](https://eips.ethereum.org/EIPS/eip-20)\n- **OpenZeppelin Contracts**: [https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC20](https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC20)\n- **CLayer Testnet Explorer**: [https://explorer-testnet.clayer.io](https://explorer-testnet.clayer.io)\n- **CLayer Faucet**: [https://faucet.clayer.io](https://faucet.clayer.io)\n\nERC20 token development on CLayer provides developers with a fast, low-cost environment for creating and deploying standard-compliant tokens with full Ethereum ecosystem compatibility.",
    "url": "/development/erc20-tokens"
  },
  {
    "title": "GraphQL Node Integration",
    "body": "# Graph Node\n\n## Project Info\n\n`Graph Node` is a protocol for building decentralized applications (dApps) quickly on Ethereum and IPFS using GraphQL.\n\n- [Official website](https://thegraph.com/)\n- [Github](https://github.com/graphprotocol/graph-node)\n\n## Usage\n\nWe recommend following the [Official documentation](https://thegraph.com/docs/) for deployment. The next operation is only intended as a simple setup tutorial for reference.\n\n### Set up graph-node\n\nFor convenience reasons, we use the official [docker compose](https://github.com/graphprotocol/graph-node/tree/master/docker) for node, database, and IPFS deployment.\n\nNote that the value of the `ethereum` field in `docker-compose.yml` is replaced with `CLayer Blockchain`'s node connection information.\n\nCode example:\ngraph-node:\n    image: graphprotocol/graph-node\n    ports:\n      - '8000:8000'\n      - '8001:8001'\n      - '8020:8020'\n      - '8030:8030'\n      - '8040:8040'\n    depends_on:\n      - ipfs\n      - postgres\n    environment:\n      postgres_host: postgres\n      postgres_user: graph-node\n      postgres_pass: let-me-in\n      postgres_db: graph-node\n      ipfs: 'ipfs:5001'\n      ethereum: 'mainnet:http://127.0.0.1:8545'  #replaced with CLayer Blockchain rpc info\n      RUST_LOG: info\n\n> Note: The node connected to graph-node needs to be in `archive` mode (add flag --syncmode full --gcmode archive when starting the node), we recommend each user to build their own RPC node.\n\n### Create subgraph\n\nThis needs to be written by each user according to their own situation. The following projects can be used as references:\n\n- [example-subgraph](https://github.com/graphprotocol/example-subgraph)\n- [graph-network-subgraph](https://github.com/graphprotocol/graph-network-subgraph)\n- [uniswap-subgraph V1](https://github.com/graphprotocol/uniswap-subgraph)\n- [uniswap-subgraph V2](https://github.com/uniswap/uniswap-v2-subgraph)\n\n### Deploy subgraph\n\nPackage and build the written subgraph into a `wasm` file and deploy to the `graph node`. The specific commands can be found in the sample project code above.\n\n### GraphQL usage\n\nOnce deployed, you can use `GraphQL` to request data",
    "url": "/development/graphql-integration"
  },
  {
    "title": "Interacting with Contracts",
    "body": "# Interacting with Contracts\n\n## Overview\n\nLearn how to interact with smart contracts on CLayer.\n\n## Methods of Interaction\n\n### 1. Web3 Libraries\n\nCode example:\n// Using ethers.js\nconst contract = new ethers.Contract(address, abi, signer);\nconst result = await contract.someFunction();\n\nCode example:\n\nCode example:\n\n### 2. Command Line\n\nCode example:\n\nCode example:\n# Using CLayer CLI\ncircle-layer contract call   [args]\n\nCode example:\n\nCode example:\n\n### 3. Web Interface\n- CLayer Explorer\n- Custom DApp interfaces\n- Wallet integrations\n\n## Common Interactions\n\n### Reading Data\n\nCode example:\n\nCode example:\n// Get contract state\nconst value = await contract.getValue();\nconst owner = await contract.owner();\n\nCode example:\n\nCode example:\n\n### Writing Data\n\nCode example:\n\nCode example:\n// Send transaction\nconst tx = await contract.setValue(42);\nawait tx.wait();\n\nCode example:\n\nCode example:\n\n### Events\n\nCode example:\n\nCode example:\n// Listen to events\ncontract.on(\"ValueChanged\", (newValue, oldValue) => {\n    console.log(`Value changed from ${oldValue} to ${newValue}`);\n});\n\nCode example:\n\nCode example:\n\n## Best Practices\n\n### 1. Error Handling\n- Check transaction status\n- Handle revert cases\n- Implement retry logic\n- Monitor gas usage\n\n### 2. Security\n- Verify contract addresses\n- Check function permissions\n- Validate input data\n- Use secure connections\n\n### 3. Performance\n- Batch transactions\n- Optimize gas usage\n- Cache contract instances\n- Use appropriate providers",
    "url": "/development/interacting-with-contracts"
  },
  {
    "title": "Meta Transactions",
    "body": "# Meta Transactions\n\nA meta-transaction is essentially an operation that fulfills a fee payment in proxy. `Address1` gives the transaction to be sent to `Address2`. And `Address2` signs the information related to the fee deduction and places it in the `data` data segment of the transaction. The transaction is then broadcast and the blockchain processes the transaction according to the rules.\n\n## Overview\n\nMeta transactions allow users to have their transaction fees paid by a third party, enabling:\n- **Gas Fee Reduction**: Lower effective costs for CLAYER holders\n- **Improved UX**: Users can transact without holding CLAYER for gas\n- **Fee Subsidies**: Official subsidy programs based on token holdings\n\n## How Meta Transactions Work\n\nCode example:\ngraph TD\n    A[User Creates Transaction] --> B[Meta Transaction Service]\n    B --> C[Signs with Fee Proxy Address]\n    C --> D[Encodes as Raw Transaction]\n    D --> E[Broadcasts to Network]\n    E --> F[Network Processes Transaction]\n    F --> G[Gas Fee Handled by Proxy]\n\n## Building Meta Transactions\n\n### Implementation Steps\n\n1. **Obtain Raw Transaction**: Get the original `rawTransaction` information\n2. **Parse Transaction**: Extract fields like `nonce`, `gasPrice`, `gasLimit`, `from`, `to`, `value`, `data`\n3. **RLP Encoding**: Encode transaction data with fee discount percentage\n\n### Code Example (Java)\n\nCode example:\nList result = new ArrayList();\nresult.add(RlpString.create(nonce));\nresult.add(RlpString.create(gasPrice));\nresult.add(RlpString.create(gasLimit));\nresult.add(RlpString.create(receiveAddress));\nresult.add(RlpString.create(value));\nresult.add(RlpString.create(data));\nresult.add(RlpString.create(sendAddress));\nresult.add(RlpString.create(feePercent));\nresult.add(RlpString.create(blockNumber));\nresult.add(RlpString.create(chainId));\n\nRlpList rlpList = new RlpList(result);\nthis.rlpEncodeData = RlpEncoder.encode(rlpList);\n\n4. **Sign Data**: Sign the encoded data with the fee proxy address\n5. **Replace Data Field**: Update original transaction with signed data\n6. **Broadcast**: Send the modified `rawTransaction` to the blockchain\n\n## Official Meta Transaction Service\n\nCircle Layer Blockchain officially provides a meta transaction service with fee subsidies based on the caller's `CLAYER` holdings.\n\n### Service Details\n\n- **API Endpoint**: (not live yet) `https://meta-mainnet.clayer.io`\n- **Subsidy Expiration**: 1 day (28,800 blocks)\n- **Daily Limit**: Maximum 5 subsidized transactions per account per day\n\n### Fee Subsidy Tiers\n\n| CLAYER Holdings | Subsidy Rate | Daily Limit |\n|----------------|--------------|-------------|\n| 1,000+ CLAYER | 10% discount | 5 transactions |\n| 5,000+ CLAYER | 25% discount | 5 transactions |\n| 10,000+ CLAYER | 50% discount | 5 transactions |\n| 50,000+ CLAYER | 75% discount | 5 transactions |\n\n### API Endpoints\n\n#### Calculate Subsidy Rate\n\n**POST** `/meta/fee`\n\nCode example:\n{\n    \"from\": \"0x0000000000000000000000000000000000000000\",\n    \"to\": \"0x0000000000000000000000000000000000000001\", \n    \"value\": \"1\",\n    \"nonce\": \"0\",\n    \"data\": \"0x0\"\n}\n\n**Response:**\n\nCode example:\n{\n   \"status\": 1,\n   \"message\": \"success\",\n   \"data\": 0\n}\n\n#### Sign and Broadcast Transaction\n\n**POST** `/meta/tx`\n\nCode example:\n{\n    \"raw\": \"0xdddd\"\n}\n\n**Response:**\n\nCode example:\n{\n   \"status\": 1,\n   \"message\": \"success\", \n   \"data\": \"0x0000000000\"\n}\n\n## Error Handling\n\n### Common Issues\n\n#### Invalid Fee Percentage\n\nCode example:\ninvalid meta transaction FeePercent need 0-10000. Found:100001\n\n**Solution**: Ensure fee percentage is between 0-10000 (0-100%)\n\n#### Expired Meta Transaction\n\nCode example:\nerr: expired meta transaction. current:2083222, need execute before 2075609\n\n**Solution**: Meta transactions expire after 1 day. Create a new meta transaction.\n\n### Troubleshooting Steps\n\n1. **Check Fee Range**: Verify `feePercent` is within 0-10000\n2. **Verify Expiration**: Ensure transaction is submitted within 28,800 blocks\n3. **Account Limits**: Confirm daily transaction limit not exceeded\n4. **Balance Check**: Verify sufficient CLAYER holdings for subsidy tier\n\n## Integration Examples\n\n### Web3.js Integration\n\nCode example:\n// Calculate subsidy rate\nasync function calculateSubsidy(txParams) {\n    const response = await fetch('https://meta-mainnet.clayer.io/meta/fee', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(txParams)\n    });\n    return response.json();\n}\n\n// Submit meta transaction\nasync function submitMetaTransaction(signedTx) {\n    const response = await fetch('https://meta-mainnet.clayer.io/meta/tx', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ raw: signedTx })\n    });\n    return response.json();\n}\n\n### Ethers.js Integration\n\nCode example:\nconst ethers = require('ethers');\n\nasync function createMetaTransaction(wallet, txParams) {\n    // Get subsidy rate\n    const subsidyInfo = await calculateSubsidy(txParams);\n    \n    // Build and sign transaction with meta data\n    const metaTx = await wallet.signTransaction({\n        ...txParams,\n        data: encodeMetaData(txParams, subsidyInfo.data)\n    });\n    \n    // Submit to meta transaction service\n    return await submitMetaTransaction(metaTx);\n}\n\n## Best Practices\n\n### For Developers\n\n1. **Validate Inputs**: Always validate fee percentages and transaction parameters\n2. **Handle Expiration**: Implement proper expiration checking\n3. **Error Handling**: Implement robust error handling for API responses\n4. **Testing**: Test meta transactions on testnet before mainnet deployment\n\n### For Users\n\n1. **Hold CLAYER**: Maintain CLAYER balance to qualify for subsidies\n2. **Daily Limits**: Plan transactions within daily subsidy limits\n3. **Monitor Fees**: Check current gas prices and subsidy rates\n4. **Backup Plans**: Have fallback options for regular transactions\n\n## Security Considerations\n\n- **Signature Verification**: Always verify meta transaction signatures\n- **Replay Protection**: Implement nonce-based replay protection\n- **Fee Validation**: Validate fee percentages to prevent exploitation\n- **Rate Limiting**: Respect API rate limits and daily quotas\n\nMeta transactions provide a powerful tool for improving user experience and reducing costs on CLayer. By implementing meta transactions properly, developers can create seamless applications that handle gas fees transparently for users.",
    "url": "/development/meta-transactions"
  },
  {
    "title": "Private Chain Setup",
    "body": "# Private Chain Setup\n\nSetting up a private CLayer blockchain network enables enterprises and development teams to create isolated environments for testing, development, and internal applications while maintaining full control over the network.\n\n## Overview\n\nA private CLayer chain provides:\n- **Complete Control**: Full control over validator nodes and network parameters\n- **Privacy**: Isolated network not connected to public testnet/mainnet\n- **Customization**: Ability to modify consensus parameters, gas limits, and block times\n- **Development Environment**: Perfect for testing and development workflows\n- **Enterprise Solutions**: Internal blockchain applications and processes\n\n## Prerequisites\n\n### System Requirements\n\n**Minimum Requirements**:\n- **CPU**: 4+ cores\n- **RAM**: 8GB+ \n- **Storage**: 100GB+ SSD\n- **Network**: Stable internet connection\n- **OS**: Ubuntu 20.04+, CentOS 8+, or macOS 12+\n\n**Recommended for Production**:\n- **CPU**: 8+ cores\n- **RAM**: 16GB+\n- **Storage**: 500GB+ SSD\n- **Network**: High-speed connection with low latency\n- **Backup**: Redundant storage solutions\n\n### Software Dependencies\n\nCode example:\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y curl wget git build-essential golang-go\n\n# CentOS/RHEL\nsudo yum update\nsudo yum install -y curl wget git gcc gcc-c++ make golang\n\n# macOS\nbrew install curl wget git go\n\n## Installation\n\n### 1. Download and Compile CLayer\n\nCode example:\n# Clone the CLayer blockchain source code\ngit clone https://github.com/clayer/testnet-clayer-blockchain.git\n\n# Navigate to the project directory\ncd Core-Blockchain\n\n# Compile the geth binary\nmake geth\n\nAfter compilation is completed, the generated binary will be in the `build/bin` folder.\n\n### 2. Verify Installation\n\nCode example:\n# Check if compilation was successful\n./build/bin/geth --help\n\n## Quick Start\n\n### 1. Prepare Validator Account(s)\n\nAccording to the number of miner nodes, prepare corresponding validator account(s).\n\nCode example:\n# Create directory for private chain\nmkdir -p ~/private-clayer\ncd ~/private-clayer\n\n# Create a new account\n./path/to/Core-Blockchain/build/bin/geth account new --datadir data\n\n# Store password in a text file for convenience\necho \"your-password\" > password.txt\n\nAfter creating an account, note the address of the new account. You can also find it in the `UTC-**` file under the `data/keystore` path.\n\n### 2. Configure Genesis\n\nCreate a custom `genesis.json` configuration:\n\nCode example:\n{\n  \"config\": {\n    \"chainId\": 12345,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip150Hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"muirGlacierBlock\": 0,\n    \"berlinBlock\": 0,\n    \"londonBlock\": 0,\n    \"congress\": {\n      \"period\": 3,\n      \"epoch\": 100\n    }\n  },\n  \"nonce\": \"0x0\",\n  \"timestamp\": \"0x683698D4\",\n  \"extraData\": \"0x00000000000000000000000000000000000000000000000000000000000000007b3a3e7c7a6b4d8e2f1a9c5d7b9e2f4a6c8e1d3f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"gasLimit\": \"0xffffffffffffffff\",\n  \"difficulty\": \"0x1\",\n  \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"coinbase\": \"0x7b3a3e7c7a6b4d8e2f1a9c5d7b9e2f4a6c8e1d3f\",\n  \"number\": \"0x0\",\n  \"gasUsed\": \"0x0\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"alloc\": {\n    \"0x7b3a3e7c7a6b4d8e2f1a9c5d7b9e2f4a6c8e1d3f\": {\n      \"balance\": \"1000000000000000000000000000\"\n    }\n  }\n}\n\n**Note**: Replace `0x7b3a3e7c7a6b4d8e2f1a9c5d7b9e2f4a6c8e1d3f` with your actual validator address in both `extraData` and `alloc` sections.\n\n### 3. Create Genesis Block\n\nAfter generating the `genesis.json` file, execute the following command to generate the genesis block:\n\nCode example:\n./path/to/Core-Blockchain/build/bin/geth init genesis.json --datadir data\n\n### 4. Start Private Node\n\nCode example:\n# Start the private chain\n./path/to/Core-Blockchain/build/bin/geth \\\n    --datadir ./data \\\n    --networkid 12345 \\\n    --http \\\n    --http.addr \"0.0.0.0\" \\\n    --http.port 8545 \\\n    --http.api \"eth,net,web3,personal,miner\" \\\n    --ws \\\n    --ws.addr \"0.0.0.0\" \\\n    --ws.port 8546 \\\n    --ws.api \"eth,net,web3\" \\\n    --mine \\\n    --miner.threads 1 \\\n    --unlock \"0x7b3a3e7c7a6b4d8e2f1a9c5d7b9e2f4a6c8e1d3f\" \\\n    --password password.txt\n\n## Advanced Configuration\n\n### Multi-Node Setup\n\nUse the same `genesis.json` file for initializing each node. Then use the geth console to manage peer connections.\n\n#### Node 1 (Bootnode)\n\nCode example:\n# Start first node\n./path/to/Core-Blockchain/build/bin/geth \\\n    --datadir ./node1 \\\n    --networkid 12345 \\\n    --port 30303 \\\n    --http \\\n    --http.port 8545 \\\n    --mine\n\n#### Node 2 (Peer)\n\nCode example:\n# Start second node\n./path/to/Core-Blockchain/build/bin/geth \\\n    --datadir ./node2 \\\n    --networkid 12345 \\\n    --port 30304 \\\n    --http \\\n    --http.port 8546\n\n#### Connect Nodes\n\nCode example:\n# Connect to first node console\n./path/to/Core-Blockchain/build/bin/geth attach http://localhost:8545\n\n# Get node info\nadmin.nodeInfo.enode\n\n# On second node, add the first node as peer\nadmin.addPeer(\"enode://[bootnode-enode-url]@127.0.0.1:30303\")\n\n### Configuration File Setup\n\nFor production deployments, create a `config.toml` file:\n\nCode example:\n[Eth]\nSyncMode = \"fast\"\nDiscoveryURLs = []\nTrieCleanCacheRejournal = 300000000000\n\n[Eth.Miner]\nGasFloor = 8000000\nGasCeil = 8000000\nGasPrice = 0\nRecommit = 3000000000\nNoverify = false\n\n[Eth.TxPool]\nLocals = []\nNoLocals = false\nJournal = \"transactions.rlp\"\nRejournal = 3600000000000\nPriceLimit = 1\nPriceBump = 10\nAccountSlots = 16\nGlobalSlots = 4096\nAccountQueue = 64\nGlobalQueue = 1024\nLifetime = 10800000000000\n\n[Node]\nDataDir = \"/data/clayer/data\"\nInsecureUnlockAllowed = true\nNoUSB = true\nIPCPath = \"geth.ipc\"\nHTTPHost = \"0.0.0.0\"\nHTTPPort = 8545\nHTTPCors = [\"*\"]\nHTTPVirtualHosts = [\"*\"]\nHTTPModules = ['eth', 'net', 'web3']\n\nWSHost = \"0.0.0.0\"\nWSPort = 8546\nWSModules = ['eth', 'net', 'web3']\n\n[Node.P2P]\nMaxPeers = 50\nNoDiscovery = false\nListenAddr = \"32668\"\nEnableMsgEvents = false\n\n[Node.HTTPTimeouts]\nReadTimeout = 30000000000\nWriteTimeout = 30000000000\nIdleTimeout = 120000000000\n\nThen start with the configuration file:\n\nCode example:\n./path/to/Core-Blockchain/build/bin/geth --config config.toml\n\n## Network Connection\n\nBy default, the node will attempt to connect to the mainnet. To connect to different networks:\n\n- **Testnet**: Add `--testnet` flag\n- **Private Network**: Use `--networkid` with your custom chain ID\n\n## Security Considerations\n\n1. **Private Keys**: Store validator private keys securely\n2. **Network Access**: Restrict RPC access to trusted IPs\n3. **Firewall**: Configure appropriate firewall rules\n4. **Backup**: Regular backup of blockchain data and keys\n5. **Monitoring**: Implement monitoring for node health and performance\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Compilation Errors**: Ensure Go is properly installed and version is compatible\n2. **Network Connectivity**: Check firewall and network configurations\n3. **Genesis Mismatch**: Ensure all nodes use the same genesis.json file\n4. **Account Unlock**: Verify password file and account permissions\n\n### Debug Mode\n\nTo run with debug logging:\n\nCode example:\n./path/to/Core-Blockchain/build/bin/geth --verbosity 4 [other-flags]\n\n## Additional Resources\n\n- [CLayer Development Guide](./deploying-contracts.md)\n- [Smart Contract Deployment](./writing-smart-contracts.md)\n- [Web3 Integration](./web3-integration.md)",
    "url": "/development/private-chain-setup"
  },
  {
    "title": "Developer Support Plans",
    "body": "# Developer Support Plans\n\n## Overview\n\nCircle Layer provides comprehensive support for developers and projects building on our blockchain ecosystem. Our multi-faceted support program includes financial assistance, traffic support, and resource allocation to help projects succeed and grow within the CLayer ecosystem.\n\n## Support Categories\n\n### 🏦 Financial Support\n\nCircle Layer offers various forms of financial assistance to support developer success:\n\n#### Special Developer Fund\n- **Purpose**: Direct financial support for promising projects\n- **Eligibility**: Projects building innovative solutions on CLayer\n- **Application Process**: Submit proposal through official channels\n- **Funding Range**: Varies based on project scope and potential impact\n- **Contact**: support@clayer.io\n\n#### Competition Programs\n- **Hackathons**: Regular hackathon events with substantial prize pools\n- **Developer Challenges**: Ongoing coding challenges and bounties\n- **Innovation Contests**: Competitions for breakthrough blockchain solutions\n- **Prize Structure**: $1M+ total annual prize distribution\n- **Recognition**: Winner showcases and community promotion\n\n#### Meta-Transaction Gas Reduction\n- **Gas Fee Discounts**: Step-wise gas fee reduction for CLAYER holders\n- **Developer Benefits**: Reduced operational costs for dApp deployment\n- **Testing Support**: Free gas for extensive testnet development\n- **Optimization Assistance**: Help optimize contracts for lower gas usage\n\n### 🚀 Traffic Support\n\nCircle Layer helps quality projects gain visibility and user adoption:\n\n#### Traffic Entrance Programs\n- **Quality dApp Promotion**: Featured placement for high-quality applications\n- **Ecosystem Integration**: Integration into CLayer's native ecosystem\n- **User Acquisition**: Access to CLayer's growing user base\n- **Cross-Promotion**: Promotion across CLayer's marketing channels\n\n#### Token Listing Opportunities\n- **DEX Integration**: Priority listing on CLayer's native DEX\n- **Bridge Support**: Cross-chain token bridging assistance\n- **Liquidity Support**: Initial liquidity provision assistance\n- **Market Making**: Support for healthy token markets\n\n#### Community Exposure\n- **Official Features**: Highlighting in official documentation and announcements\n- **Social Media Promotion**: Promotion across CLayer's social channels\n- **Conference Presentations**: Opportunities to present at CLayer events\n- **Press Coverage**: Assistance with blockchain media coverage\n\n### 🎁 Resource Support\n\nComprehensive resource allocation to accelerate project development:\n\n#### Marketing Packages\n- **Brand Development**: Professional branding and design support\n- **Content Creation**: Technical and marketing content development\n- **Campaign Management**: Professional marketing campaign assistance\n- **Community Building**: Support for building engaged user communities\n\n#### Foundation Roadshows\n- **Global Events**: Participation in major blockchain conferences\n- **Networking Opportunities**: Connections with investors and partners\n- **Speaking Opportunities**: Platform to present projects to industry leaders\n- **Travel Support**: Assistance with conference attendance and presentation\n\n#### Ecological Partnerships\n- **Strategic Introductions**: Connections with relevant ecosystem partners\n- **Integration Support**: Technical assistance for ecosystem integrations\n- **Collaboration Facilitation**: Support for inter-project collaborations\n- **Ecosystem Synergies**: Opportunities to leverage ecosystem partnerships\n\n## Application Process\n\n### Eligibility Requirements\n\n#### Basic Criteria\n- **Innovation**: Project demonstrates technical innovation or unique value proposition\n- **Quality**: High-quality code and professional development practices\n- **Commitment**: Long-term commitment to building on CLayer\n- **Community Value**: Potential to add value to the CLayer ecosystem\n\n#### Technical Requirements\n- **EVM Compatibility**: Projects must be EVM-compatible\n- **Security Standards**: Adherence to blockchain security best practices\n- **Documentation**: Comprehensive technical documentation\n- **Testing**: Thorough testing on CLayer testnet\n\n### Application Steps\n\n#### 1. Initial Application\n\nCode example:\nContact: support@clayer.io\nSubject: Support Plan Application - [Project Name]\n\nRequired Information:\n- Project description and vision\n- Technical architecture overview  \n- Team background and experience\n- Requested support type(s)\n- Timeline and milestones\n- Community impact potential\n\n#### 2. Technical Review\n- **Code Review**: Evaluation of technical implementation\n- **Security Assessment**: Security audit and vulnerability analysis\n- **Scalability Analysis**: Assessment of project scalability potential\n- **Ecosystem Fit**: Evaluation of alignment with CLayer ecosystem\n\n#### 3. Support Plan Design\n- **Customized Package**: Tailored support plan based on project needs\n- **Resource Allocation**: Specific resource commitment and timeline\n- **Milestone Structure**: Performance-based support distribution\n- **Success Metrics**: Clear metrics for measuring support effectiveness\n\n#### 4. Implementation & Monitoring\n- **Active Support**: Ongoing support and assistance\n- **Progress Tracking**: Regular check-ins and milestone reviews\n- **Adaptive Support**: Adjustments based on project evolution\n- **Success Amplification**: Additional support for highly successful projects\n\n## Support Tiers\n\n### 🌱 Startup Tier\n**For early-stage projects and individual developers**\n\n- **Financial**: Up to $25,000 in development grants\n- **Traffic**: Basic promotion and community exposure\n- **Resources**: Documentation support and technical guidance\n- **Duration**: 6-12 months\n- **Requirements**: Testnet deployment and proof of concept\n\n### 🚀 Growth Tier  \n**For established projects ready to scale**\n\n- **Financial**: $25,000-$100,000+ in comprehensive support\n- **Traffic**: Featured placement and marketing campaigns\n- **Resources**: Full marketing package and partnership introductions\n- **Duration**: 12-24 months\n- **Requirements**: Mainnet deployment and user traction\n\n### 🏆 Strategic Tier\n**For high-impact projects with ecosystem significance**\n\n- **Financial**: $100,000+ and ongoing strategic support\n- **Traffic**: Premier ecosystem integration and promotion\n- **Resources**: Complete resource package including global roadshows\n- **Duration**: Long-term strategic partnership\n- **Requirements**: Significant ecosystem impact and innovation\n\n## Success Stories\n\n### Example Support Outcomes\n- **90% Project Success Rate**: Supported projects have 90%+ continued development\n- **10x User Growth**: Average 10x user growth within 12 months of support\n- **$50M+ Total Funding**: Supported projects have raised $50M+ in additional funding\n- **Ecosystem Leaders**: Many supported projects become ecosystem leaders\n\n### Case Study Framework\n*Detailed case studies will be added as the support program matures*\n\n- **Challenge**: Initial project challenges and needs\n- **Support Provided**: Specific support measures implemented\n- **Outcomes**: Measurable results and success metrics\n- **Lessons Learned**: Key insights for future support programs\n\n## Best Practices for Applicants\n\n### Application Tips\n- **Clear Vision**: Articulate a clear project vision and value proposition\n- **Technical Excellence**: Demonstrate high-quality technical implementation\n- **Market Research**: Show understanding of target market and competition\n- **Team Strength**: Highlight team experience and commitment\n- **Realistic Timeline**: Provide realistic development and growth timelines\n\n### Maximizing Support Value\n- **Active Communication**: Maintain regular communication with support team\n- **Milestone Achievement**: Consistently meet agreed-upon milestones\n- **Community Engagement**: Actively engage with CLayer community\n- **Feedback Integration**: Incorporate support team feedback and guidance\n- **Success Sharing**: Share successes and learnings with the ecosystem\n\n## Contact Information\n\n### Support Team Contacts\n- **General Inquiries**: support@clayer.io\n- **Financial Support**: marketing@clayer.io\n- **Marketing Support**: marketing@clayer.io\n- **Technical Support**: support@clayer.io\n\n### Response Times\n- **Initial Response**: Within 48 hours\n- **Application Review**: 2-3 weeks\n- **Decision Communication**: Within 1 week of review completion\n- **Support Activation**: Within 2 weeks of approval\n\n---\n\n*CLayer is committed to fostering a thriving developer ecosystem through comprehensive support programs. We believe in supporting innovation and helping projects achieve their full potential within our ecosystem.*",
    "url": "/development/support-plans"
  },
  {
    "title": "Transaction Troubleshooting",
    "body": "# Transaction Troubleshooting\n\nThis guide helps developers and users resolve common transaction issues on CLayer blockchain, including pending transactions, gas problems, and meta transaction errors.\n\n## Common Transaction Issues\n\n### 1. Inappropriate Nonce\n\n**Problem**: Transaction fails due to incorrect nonce value.\n\n**Symptoms**:\n- \"Nonce too low\" error\n- \"Nonce too high\" error  \n- Transactions stuck in pending state\n\n**Solutions**:\n\n#### Reset Account Nonce\n\nCode example:\n# MetaMask Solution\n1. MetaMask → Settings → Advanced → Reset Account\n2. This clears pending transaction history and resets nonce\n\n#### Customize Transaction Nonce\n\nCode example:\n# MetaMask Advanced Settings\n1. MetaMask → Settings → Advanced → Customize transaction nonce\n2. Enable this setting\n3. Manually set appropriate nonce when sending transactions\n\n#### Check Current Nonce\n\nCode example:\n// Web3.js\nconst nonce = await web3.eth.getTransactionCount(address, 'pending');\n\n// Ethers.js  \nconst nonce = await provider.getTransactionCount(address, 'pending');\n\n#### Handle Multiple Pending Transactions\n- **Wait for earlier transactions** to confirm before sending new ones\n- **Cancel pending transactions** by sending 0 ETH to yourself with higher gas price\n- **Use sequential nonces** when sending multiple transactions\n\n### 2. Low Gas Price\n\n**Problem**: Transaction remains pending due to insufficient gas price.\n\n**Symptoms**:\n- Transaction stays in mempool for extended periods\n- \"Gas price too low\" warnings\n- Transaction never gets mined\n\n**Solutions**:\n\n#### Increase Gas Price\n\nCode example:\n// Set higher gas price\nconst transaction = {\n    to: recipient,\n    value: amount,\n    gasLimit: 21000,\n    gasPrice: ethers.utils.parseUnits('20', 'gwei') // Increase from default\n};\n\n#### Use Dynamic Gas Pricing\n\nCode example:\n// Get current gas price recommendations\nasync function getOptimalGasPrice() {\n    const gasPrice = await provider.getGasPrice();\n    // Add 20% buffer\n    return gasPrice.mul(120).div(100);\n}\n\n#### Speed Up Transactions\n\nCode example:\n# MetaMask Speed Up\n1. Go to Activity tab\n2. Click on pending transaction\n3. Click \"Speed Up\"\n4. Confirm with higher gas price\n\n### 3. Meta Transaction Issues\n\nMeta transactions have specific error patterns and solutions:\n\n#### Invalid Fee Percentage\n\n**Error**:\n\nCode example:\ninvalid meta transaction FeePercent need 0-10000. Found:100001\n\n**Cause**: Fee percentage exceeds valid range (0-100%).\n\n**Solution**:\n\nCode example:\n// Ensure fee percentage is within valid range\nconst feePercent = 2500; // 25% (valid range: 0-10000)\n\nif (feePercent  10000) {\n    throw new Error('Fee percentage must be between 0-10000');\n}\n\n#### Expired Meta Transaction\n\n**Error**:\n\nCode example:\nerr: expired meta transaction. current:2083222, need execute before 2075609\n\n**Cause**: Meta transaction expired (valid for 28,800 blocks ≈ 1 day).\n\n**Solutions**:\n\n1. **Create New Meta Transaction**:\n\nCode example:\n// Check if meta transaction is still valid\nfunction isMetaTransactionValid(expiryBlock, currentBlock) {\n    return currentBlock  setTimeout(resolve, 5000));\n        }\n    }\n}\n\n### RPC Connection Issues\n\n**Common Problems**:\n- Connection timeouts\n- Rate limiting\n- Provider errors\n\n**Solutions**:\n\n1. **Use Multiple RPC Endpoints**:\n\nCode example:\nconst providers = [\n    'https://testnet-rpc.clayer.io'\n];\n\nclass FallbackProvider {\n    constructor(urls) {\n        this.providers = urls.map(url => new ethers.providers.JsonRpcProvider(url));\n        this.currentIndex = 0;\n    }\n    \n    async sendRequest(method, params) {\n        for (let i = 0; i  ({\n        jsonrpc: '2.0',\n        id: index,\n        method: req.method,\n        params: req.params\n    }));\n    \n    const response = await fetch(rpcUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(batch)\n    });\n    \n    return response.json();\n}\n\n## MetaMask-Specific Issues\n\n### Reset Account\nWhen experiencing persistent nonce issues:\n\nCode example:\n1. MetaMask → Settings → Advanced → Reset Account\n2. This clears transaction history and resets nonce counter\n3. Does NOT affect your funds or private keys\n\n### Custom RPC Configuration\n\nCode example:\n// MetaMask Custom Network Settings\nNetwork Name: CLayer Testnet\nRPC URL: https://testnet-rpc.clayer.io\nChain ID: 28525\nCurrency Symbol: CLAYER\nBlock Explorer: https://explorer-testnet.clayer.io\n\n### Enable Advanced Features\n\nCode example:\n# Enable advanced MetaMask features\n1. Settings → Advanced → Show hex data (ON)\n2. Settings → Advanced → Customize transaction nonce (ON)  \n3. Settings → Advanced → Advanced gas controls (ON)\n\n## Monitoring Tools\n\n### Transaction Status Checking\n\nCode example:\n// Monitor transaction status\nasync function monitorTransaction(txHash) {\n    console.log('Monitoring transaction:', txHash);\n    \n    const checkStatus = async () => {\n        const tx = await provider.getTransaction(txHash);\n        if (!tx) {\n            console.log('Transaction not found in mempool');\n            return;\n        }\n        \n        const receipt = await provider.getTransactionReceipt(txHash);\n        if (receipt) {\n            console.log('Transaction confirmed in block:', receipt.blockNumber);\n            console.log('Gas used:', receipt.gasUsed.toString());\n            console.log('Status:', receipt.status === 1 ? 'Success' : 'Failed');\n        } else {\n            console.log('Transaction pending...');\n            setTimeout(checkStatus, 10000); // Check again in 10 seconds\n        }\n    };\n    \n    checkStatus();\n}\n\n### Gas Price Monitoring\n\nCode example:\n// Track gas price trends\nasync function monitorGasPrices() {\n    const history = [];\n    \n    setInterval(async () => {\n        const gasPrice = await provider.getGasPrice();\n        const gwei = ethers.utils.formatUnits(gasPrice, 'gwei');\n        \n        history.push({\n            timestamp: Date.now(),\n            gasPrice: parseFloat(gwei)\n        });\n        \n        // Keep last 24 hours of data\n        const oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;\n        history.splice(0, history.findIndex(h => h.timestamp > oneDayAgo));\n        \n        console.log('Current gas price:', gwei, 'gwei');\n    }, 60000); // Check every minute\n}\n\n## Emergency Recovery\n\n### Stuck Transaction Recovery\n\nCode example:\n// Cancel stuck transaction by replacing with higher gas\nasync function cancelTransaction(originalTx) {\n    const cancelTx = {\n        to: originalTx.from, // Send to yourself\n        value: 0,\n        gasPrice: originalTx.gasPrice.mul(110).div(100), // 10% higher\n        gasLimit: 21000,\n        nonce: originalTx.nonce // Same nonce to replace\n    };\n    \n    return await signer.sendTransaction(cancelTx);\n}\n\n### Account Recovery\n\nCode example:\n// Drain account if private key compromised\nasync function emergencyDrain(toAddress) {\n    const balance = await provider.getBalance(compromisedAddress);\n    const gasPrice = await provider.getGasPrice();\n    const gasLimit = 21000;\n    const gasCost = gasPrice.mul(gasLimit);\n    \n    if (balance.gt(gasCost)) {\n        const amount = balance.sub(gasCost);\n        return await signer.sendTransaction({\n            to: toAddress,\n            value: amount,\n            gasPrice,\n            gasLimit\n        });\n    }\n}\n\n## Best Practices\n\n### Prevention\n1. **Always check gas prices** before sending transactions\n2. **Use appropriate gas limits** for complex contracts\n3. **Monitor network congestion** during high-traffic periods\n4. **Keep backup RPC endpoints** configured\n5. **Test on testnet first** before mainnet deployment\n\n### Transaction Management\n1. **Track nonces carefully** when sending multiple transactions\n2. **Implement proper error handling** in your applications\n3. **Use event monitoring** for important transactions\n4. **Set reasonable timeouts** for transaction confirmation\n5. **Have fallback strategies** for failed transactions\n\nThis troubleshooting guide should help resolve most common transaction issues on CLayer. For complex problems, consider reaching out to the CLayer development community or support channels.",
    "url": "/development/transaction-troubleshooting"
  },
  {
    "title": "WalletConnect Integration",
    "body": "# WalletConnect Integration\n\n## Overview\n\nWallet connect enable App wallet connect to DApp via QRCode or Deeplink.\n\nWhen using this protocol the most critical modification in the Wallet and DApp is supporting CLayer Blockchain networks.\n\n## Implementation Examples\n\n### Wallet App Implementation\n\nFor wallet applications, you need to add CLayer blockchain network support. Reference implementation:\n\nhttps://github.com/HuobiGroup/walletconnect-test-wallet/commit/787c481032a9c8e4dec324f0a7529fc2775220b8\n\n### DApp Implementation\n\nFor decentralized applications, you need to include CLayer network configuration. Reference implementation:\n\nhttps://github.com/HuobiGroup/walletconnect-example-dapp/commit/b427419bfb893c060b7693d2e56e6d3f703d2984\n\n## Network Configuration\n\nWhen implementing WalletConnect for CLayer, ensure your application includes the correct network parameters:\n\n### Testnet Configuration\n\nCode example:\n{\n  chainId: 28525,\n  name: 'CLayer Blockchain Testnet',\n  currency: 'CLAYER',\n  explorerUrl: 'https://explorer-testnet.clayer.io',\n  rpcUrl: 'https://testnet-rpc.clayer.io'\n}\n\n### Integration Steps\n\n1. **Add Network Support**: Include CLayer network configuration in your wallet or DApp\n2. **Update Chain Registry**: Register the CLayer blockchain in your application's supported networks\n3. **Test Connection**: Verify QR code and deep link functionality works with CLayer\n4. **Handle Transactions**: Ensure transaction signing and broadcasting works correctly\n\n## Resources\n\n- [WalletConnect Documentation](https://docs.walletconnect.com/)\n- [CLayer Network Details](/getting-started/connect-testnet)\n- [MetaMask Integration Guide](/getting-started/set-up-wallet)",
    "url": "/development/wallet-connect-integration"
  },
  {
    "title": "Web3 Integration",
    "body": "# Web3 Integration\n\n## Overview\n\nLearn how to integrate Web3 libraries with CLayer testnet. CLayer follows standard EVM blockchain integration patterns, making it compatible with existing Ethereum development tools.\n\n## Network Configuration\n\n### CLayer Testnet\n*Configuration for testnet deployment:*\n\n- **RPC URL**: https://testnet-rpc.clayer.io\n- **WebSocket**: wss://testnet-rpc.clayer.io\n- **Chain ID**: 28525\n- **Currency Symbol**: CLAYER\n\n- **Block Explorer**: https://explorer-testnet.clayer.io\n\n## Web3.js Integration\n\n### Installation\n\nCode example:\nnpm install web3\n\n### Basic Setup\n\nCode example:\nconst Web3 = require('web3');\n\n// HTTP Provider\nconst web3 = new Web3('https://testnet-rpc.clayer.io');\n\n// WebSocket Provider\nconst web3WS = new Web3('wss://testnet-rpc.clayer.io');\n\n// Network Configuration\nconst networkConfig = {\n  chainId: 28525,\n  name: 'CLayer Testnet',\n  currency: 'CLAYER'\n};\n\n### CLAYER Transactions\n\nCode example:\n// Send CLAYER transaction\nasync function sendCLAYER() {\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  \n  const tx = {\n    from: account.address,\n    to: '0x...', // recipient address\n    value: web3.utils.toWei('1', 'ether'), // 1 CLAYER\n    gas: 21000,\n    gasPrice: web3.utils.toWei('21', 'gwei'), // 0.000021 CLAYER\n    chainId: 28525\n  };\n  \n  const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);\n  const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n  \n  console.log('Transaction hash:', receipt.transactionHash);\n  return receipt;\n}\n\n### Contract Interaction\n\nCode example:\n// Interact with deployed example contract\nconst contractAddress = '0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB'; // https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB\nconst contractABI = []; // ABI from explorer\n\nconst contract = new web3.eth.Contract(contractABI, contractAddress);\n\n// Call contract method\nasync function callContract() {\n  const result = await contract.methods.someMethod().call();\n  return result;\n}\n\n// Send transaction to contract\nasync function sendToContract() {\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  \n  const tx = contract.methods.someMethod(params);\n  const gas = await tx.estimateGas({ from: account.address });\n  \n  const signedTx = await account.signTransaction({\n    to: contractAddress,\n    data: tx.encodeABI(),\n    gas: gas,\n    gasPrice: web3.utils.toWei('21', 'gwei'), // Use CLAYER for gas\n    chainId: 28525\n  });\n  \n  const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n  return receipt;\n}\n\n## Ethers.js Integration\n\n### Installation\n\nCode example:\nnpm install ethers\n\n### Basic Setup\n\nCode example:\nconst { ethers } = require('ethers');\n\n// Provider setup\nconst provider = new ethers.providers.JsonRpcProvider('https://testnet-rpc.clayer.io');\n\n// WebSocket Provider\nconst wsProvider = new ethers.providers.WebSocketProvider('wss://testnet-rpc.clayer.io');\n\n// Network configuration\nconst network = {\n  name: 'CLayer Testnet',\n  chainId: 28525,\n  ensAddress: null\n};\n\n### Wallet Integration\n\nCode example:\n// Create wallet\nconst wallet = new ethers.Wallet(privateKey, provider);\n\n// Get balance in CLAYER\nasync function getBalance() {\n  const balance = await wallet.getBalance();\n  console.log('Balance:', ethers.utils.formatEther(balance), 'CLAYER');\n  return balance;\n}\n\n// Send CLAYER\nasync function sendCLAYER(toAddress, amount) {\n  const tx = {\n    to: toAddress,\n    value: ethers.utils.parseEther(amount), // Amount in CLAYER\n    gasPrice: ethers.utils.parseUnits('21', 'gwei'), // 0.000021 CLAYER\n    gasLimit: 21000\n  };\n  \n  const transaction = await wallet.sendTransaction(tx);\n  const receipt = await transaction.wait();\n  \n  console.log('Transaction confirmed:', receipt.transactionHash);\n  return receipt;\n}\n\n### Contract Interaction\n\nCode example:\n// Contract setup\nconst contractAddress = '0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB';\nconst contractABI = []; // ABI from explorer\n\nconst contract = new ethers.Contract(contractAddress, contractABI, wallet);\n\n// Read contract data\nasync function readContract() {\n  const result = await contract.someReadMethod();\n  return result;\n}\n\n// Write to contract\nasync function writeContract() {\n  const tx = await contract.someWriteMethod(params, {\n    gasPrice: ethers.utils.parseUnits('21', 'gwei'), // CLAYER gas price\n    gasLimit: 100000\n  });\n  \n  const receipt = await tx.wait();\n  console.log('Contract interaction confirmed:', receipt.transactionHash);\n  return receipt;\n}\n\n## React Integration\n\n### React Hook Example\n\nCode example:\n\nconst useCircleLayer = () => {\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState(null);\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        // Request account access\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\n        \n        // Add CLayer network\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: '0x6F75', // 28525 in hex\n            chainName: 'CLayer Testnet',\n            nativeCurrency: {\n              name: 'CLAYER',\n              symbol: 'CLAYER',\n              decimals: 18\n            },\n            rpcUrls: ['https://testnet-rpc.clayer.io'],\n            blockExplorerUrls: ['https://explorer-testnet.clayer.io/']\n          }]\n        });\n        \n        const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = web3Provider.getSigner();\n        const address = await signer.getAddress();\n        \n        setProvider(web3Provider);\n        setSigner(signer);\n        setAccount(address);\n        \n      } catch (error) {\n        console.error('Error connecting wallet:', error);\n      }\n    }\n  };\n\n  return { provider, signer, account, connectWallet };\n};\n\nexport default useCircleLayer;\n\n## Vue.js Integration\n\n### Vue Component Example\n\nCode example:\n\n  \n    Connect Wallet\n    \n      Connected: {{ account }}\n      Balance: {{ balance }} CLAYER\n      Send CLAYER\n    \n  \n\nexport default {\n  data() {\n    return {\n      provider: null,\n      signer: null,\n      account: null,\n      balance: '0'\n    };\n  },\n  methods: {\n    async connectWallet() {\n      if (window.ethereum) {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' });\n          \n          this.provider = new ethers.providers.Web3Provider(window.ethereum);\n          this.signer = this.provider.getSigner();\n          this.account = await this.signer.getAddress();\n          \n          await this.getBalance();\n        } catch (error) {\n          console.error('Error connecting wallet:', error);\n        }\n      }\n    },\n    \n    async getBalance() {\n      if (this.signer) {\n        const balance = await this.signer.getBalance();\n        this.balance = ethers.utils.formatEther(balance);\n      }\n    }\n  }\n};\n\n## Mobile Integration\n\nCircle Layer testnet can be integrated into mobile applications using the same EVM integration patterns:\n\n### React Native Example\n\nCode example:\n\n// Provider setup for mobile\nconst provider = new ethers.providers.JsonRpcProvider('https://testnet-rpc.clayer.io');\n\n// Mobile wallet integration follows standard EVM patterns\nconst connectMobileWallet = async () => {\n  // Use WalletConnect or similar for mobile wallet integration\n  // Follow EVM blockchain integration standards\n};\n\n## Best Practices\n\n### 1. Gas Management\n- Always use minimum gas price: 0.000021 CLAYER\n- Monitor network conditions for optimal gas pricing\n- Use gas estimation for contract interactions\n\n### 2. Error Handling\n\nCode example:\ntry {\n  const tx = await wallet.sendTransaction(transaction);\n  const receipt = await tx.wait();\n} catch (error) {\n  if (error.code === 'INSUFFICIENT_FUNDS') {\n    console.error('Insufficient CLAYER balance');\n  } else if (error.code === 'NETWORK_ERROR') {\n    console.error('Network connection issue');\n  }\n}\n\n### 3. Network Verification\n\nCode example:\n// Verify connected to correct network\nconst network = await provider.getNetwork();\nif (network.chainId !== 28525) {\n  throw new Error('Please connect to CLayer Testnet');\n}\n\n### 4. Performance Optimization\n- Use WebSocket for real-time updates\n- Implement proper connection pooling\n- Cache frequently accessed data\n- Monitor block confirmations (3-second block time)\n\n## Resources\n\n- **API Documentation**: https://explorer-testnet.clayer.io/api-docs\n- **GraphQL Endpoint**: https://explorer-testnet.clayer.io/graphiql\n- **Block Explorer**: https://explorer-testnet.clayer.io/\n- **Example Contract**: 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB",
    "url": "/development/web3-integration"
  },
  {
    "title": "Writing Smart Contracts",
    "body": "# Writing Smart Contracts\n\nCircle Layer is fully EVM compatible, allowing you to use all existing Ethereum development tools and patterns with enhanced performance and lower costs.\n\n## Development Environment Setup\n\n### Prerequisites\n- **Solidity Knowledge**: Familiarity with Solidity programming language\n- **Development Tools**: Node.js, npm/yarn for package management\n- **CLayer Access**: Testnet connection configured\n- **Test Tokens**: CLAYER tokens from [faucet](https://faucet.clayer.io)\n\n### Required Tools Installation\n\nCode example:\n# Install Hardhat development environment\nnpm install --save-dev hardhat\n\n# Install essential plugins\nnpm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai\n\n# Install OpenZeppelin contracts\nnpm install @openzeppelin/contracts\n\n## Smart Contract Development\n\n### Basic Contract Structure\n\nCode example:\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract CircleLayerExample is ReentrancyGuard, Ownable {\n    // State variables\n    mapping(address => uint256) public balances;\n    uint256 public totalSupply;\n    \n    // Events\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Deposit(address indexed user, uint256 amount);\n    \n    // Constructor\n    constructor() {\n        // Initialize contract state\n    }\n    \n    // Functions with CLayer optimizations\n    function deposit() external payable nonReentrant {\n        require(msg.value > 0, \"Deposit amount must be greater than 0\");\n        balances[msg.sender] += msg.value;\n        totalSupply += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n    \n    function withdraw(uint256 amount) external nonReentrant {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        balances[msg.sender] -= amount;\n        totalSupply -= amount;\n        \n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n        \n        emit Transfer(address(this), msg.sender, amount);\n    }\n}\n\n## CLayer Optimization Best Practices\n\n### 1. Gas Efficiency for CLAYER\n\nCode example:\n// Optimize storage operations\ncontract OptimizedContract {\n    // Pack structs to save gas\n    struct UserData {\n        uint128 balance;    // Instead of uint256 when possible\n        uint64 timestamp;   // Pack into single storage slot\n        bool isActive;\n    }\n    \n    // Use mappings efficiently\n    mapping(address => UserData) public userData;\n    \n    // Batch operations to reduce gas costs\n    function batchTransfer(address[] calldata recipients, uint256[] calldata amounts) \n        external {\n        require(recipients.length == amounts.length, \"Length mismatch\");\n        \n        for (uint i = 0; i  0 && limit  process.exit(0))\n  .catch((error) => {\n    console.error(error);\n    process.exit(1);\n  });\n\n### Post-Deployment Verification\n\nCode example:\n// scripts/verify.js\nconst { ethers } = require(\"hardhat\");\n\nasync function verifyContract(contractAddress) {\n  console.log(\"Verifying contract functionality...\");\n  \n  const contract = await ethers.getContractAt(\"CircleLayerExample\", contractAddress);\n  \n  // Test basic functionality\n  try {\n    const tx = await contract.deposit({ value: ethers.utils.parseEther(\"0.1\") });\n    await tx.wait();\n    console.log(\"✅ Contract is functional\");\n  } catch (error) {\n    console.error(\"❌ Contract verification failed:\", error.message);\n  }\n}\n\n## Integration Examples\n\n### Frontend Integration\n\nCode example:\n// React component example\n\nconst ContractInteraction = () => {\n  const contractAddress = \"YOUR_CONTRACT_ADDRESS\";\n  const contractABI = [/* Your contract ABI */];\n  \n  const interactWithContract = async () => {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, contractABI, signer);\n      \n      try {\n        const tx = await contract.deposit({ \n          value: ethers.utils.parseEther(\"1.0\") \n        });\n        await tx.wait(); // Wait for CLayer's fast confirmation\n        console.log(\"Transaction confirmed in ~3 seconds\");\n      } catch (error) {\n        console.error(\"Transaction failed:\", error);\n      }\n    }\n  };\n};\n\n## Performance Considerations\n\n### CLayer Specific Optimizations\n- **Fast Finality**: Leverage 1-3 second finality for better UX\n- **Predictable Gas**: Stable CLAYER pricing allows for accurate gas estimation\n- **Event Handling**: Optimize for CLayer's efficient event processing\n- **State Management**: Design for optimal performance with DPoS consensus\n\n## Reference Implementation\n\n**Live Example**: `0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB`\n- [View Contract](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract)\n- [Source Code](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract)\n- [Contract ABI](https://explorer-testnet.clayer.io/address/0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB?tab=contract_abi)\n\n## Next Steps\n\nContinue your CLayer development journey:\n- [Contract Deployment Guide](./deploying-contracts) - Advanced deployment strategies\n- [Web3 Integration](./web3-integration) - Frontend development patterns\n- [Contract Interaction](./interacting-with-contracts) - Runtime interaction guides\n- [Best Practices](./support-plans) - Advanced development guidelines",
    "url": "/development/writing-smart-contracts"
  },
  {
    "title": "Common Questions",
    "body": "# Common Questions\n\n## General Questions\n\n### What is CLayer?\nCircle Layer is a high-performance, EVM-compatible blockchain platform powered by Delegated Proof of Stake (DPoS) consensus mechanism with AI-enhanced security features, designed to deliver up to 50,000 TPS with 1-3 second finality.\n\n### How does CLayer differ from Ethereum?\n- **Performance**: Up to 50,000 TPS vs 15 TPS\n- **Block Time**: 3 seconds vs 12+ seconds\n- **Finality**: 1-3 seconds vs 6-10 minutes\n- **Consensus**: DPoS vs Proof of Stake\n- **Energy Efficiency**: 99.9% less energy consumption\n- **Security**: AI-enhanced security features\n- **Gas Fees**: Lower fees with CLAYER token\n\n### Is CLayer EVM compatible?\nYes, CLayer is fully EVM compatible, allowing Ethereum developers to easily port their applications using the same tools and libraries.\n\n## Network Information\n\n### What is the current network status?\n- **Status**: Development & Testing Phase\n- **Chain ID**: 28525\n- **Currency**: CLAYER\n- **Block Time**: 3 seconds\n- **Finality**: 1-3 second\n- **Target Performance**: 50,000 TPS\n- **Current Performance**: ~5,000 TPS\n- **Target Uptime**: 99.95%\n\n### Where can I find network resources?\n*CLayer testnet resources:*\n\n- **RPC**: https://testnet-rpc.clayer.io\n- **Explorer**: https://explorer-testnet.clayer.io\n- **Faucet**: https://faucet.clayer.io\n- **Faucet API**: https://faucet-api.clayer.io\n\n## Technical Questions\n\n### How do I connect to CLayer testnet?\n*Configuration for CLayer testnet:*\n\nCode example:\n// Using ethers.js\nconst provider = new ethers.providers.JsonRpcProvider('https://testnet-rpc.clayer.io');\n\n// Network configuration for MetaMask\n{\n  chainId: '0x6F75', // 28525 in hex\n  chainName: 'CLayer Testnet',\n  nativeCurrency: {\n    name: 'CLAYER',\n    symbol: 'CLAYER',\n    decimals: 18\n  },\n  rpcUrls: ['https://testnet-rpc.clayer.io'],\n  blockExplorerUrls: ['https://explorer-testnet.clayer.io']\n}\n\n### What wallets are supported?\n- **MetaMask** (Recommended with testnet configuration)\n- **WalletConnect** (Register and follow their guidelines)\n- **Custom Wallets** (EVM-compatible software wallets)\n- **Mobile Wallets** (Trust Wallet, Rainbow, Coinbase Wallet, etc.)\n\n**Note**: Ledger and other hardware wallets are NOT currently supported.\n\n### How do I get testnet tokens?\n*CLayer testnet faucet:*\n\n1. Visit the faucet: https://faucet.clayer.io\n2. Paste your EVM wallet address\n3. Click \"Get 1 CLAYER coin\"\n4. Wait 24 hours between requests (1 CLAYER per day limit)\n\n## Development Questions\n\n### How do I deploy a smart contract?\nSee our [Deployment Guide](/development/deploying-contracts) with Hardhat and Truffle configurations for CLayer testnet.\n\n### What development tools are available?\n- **Hardhat** (with CLayer testnet configuration)\n- **Truffle** (with CLAYER gas settings)\n- **Remix** (using Injected Provider - MetaMask)\n- **Web3.js / Ethers.js** (standard EVM integration)\n\n### How do I interact with contracts?\nSee our [Web3 Integration Guide](/development/web3-integration) for detailed instructions. \n\n### What are the gas requirements?\n- **Minimum Gas Price**: 0.000021 CLAYER\n- **Block Gas Limit**: 10,000,000,000,000 per block\n- **Fee Calculation**: gas price × gas amount (Ethereum standard)\n\n## Security Questions\n\n### What security features are implemented?\n- **DPoS Consensus**: Delegated Proof of Stake security model  \n- **Multi-Layer Security**: Network, validator, and transaction-level protection\n- **Economic Security**: Token burn mechanism (25% of transaction fees)\n- **Network Requirements**: Minimum 5 active validators for security\n\n### What security features are coming in Phase 2?\n- **AI-Enhanced Security**: Advanced threat detection targeting 99.8% accuracy\n- **Real-time Monitoring**: Continuous threat detection and response\n- **Automated Security Auditing**: AI-powered contract analysis\n\n### How do I report security issues?\n- Use our bug bounty program\n- Contact security team\n- Follow responsible disclosure protocols\n\n## Network Questions\n\n### How do I become a validator?\nSee our [Validator Guide](/nodes-validation/becoming-validator)\n\n### What are the current staking requirements?\n- **Testnet Validator Minimum Stake**: 32 CLAYER\n- **Mainnet Validator Minimum Stake**: 100,000 CLAYER\n- **Delegator Minimum Stake**: 32 CLAYER\n- **Maximum Validators**: 21 (testnet), 10,000 (mainnet)\n- **Hardware**: Ubuntu ≥ 20.04 LTS, 8GB RAM minimum (32GB recommended)\n- **Storage**: 25GB minimum (100GB SSD recommended)\n- **Network**: Multiple RPC endpoints required\n- **Security**: Minimum 5 validators active required\n\n### What can validators earn?\n**Revenue Sources:**\n- **Block Rewards**: 2 CLAYER per block + performance bonuses\n- **Transaction Fees**: 30% of network transaction fees\n- **Delegation Commission**: 5-20% from delegated stakes\n\n**Fee Distribution:**\n- **Delegators**: 45% of gas fees\n- **Validators**: 30% of gas fees  \n- **Burn Mechanism**: 25% of gas fees (stops at 1,000,000 CLAYER threshold)\n\n**Expected Annual Revenue (estimates):**\n- **Conservative**: $25,000 - $58,000\n- **Moderate**: $83,000 - $223,000  \n- **Optimistic**: $328,000 - $1,340,000\n\n*Revenue depends on network activity, token price, delegation amount, and validator performance.*\n\n### What ports do validators need?\n- **Required Ports**: 32668, 32669, 8545, 6060, 80, 22\n- **Firewall**: Not required\n\n### How do I run a node?\nSee our [Node Guide](/nodes-validation/running-full-node) with current hardware and software requirements.\n\n## Integration Questions\n\n### Is CLayer the same as other EVM chains?\nYes, CLayer follows standard EVM integration patterns, making it compatible with existing Ethereum development tools and workflows.\n\n### Can I use existing Ethereum tools?\nYes, all standard Ethereum development tools work with CLayer testnet:\n- Same Web3 libraries\n- Same wallet integrations  \n- Same development frameworks\n- Same smart contract languages (Solidity)\n\n## 🚧 Development Status & Roadmap\n\n### What is the current development status?\nCircle Layer is currently in active development and testing phase with the following progress:\n\n**Completed Components:**\n- Core blockchain architecture (DPoS consensus)\n- EVM compatibility layer\n- Basic smart contract infrastructure\n- Network configuration and tooling\n- Documentation and developer resources\n\n**In Development:**\n- Testnet deployment and testing\n- Advanced validator tooling\n- Enhanced monitoring systems\n- Cross-chain bridge development\n\n### What features are coming in each phase?\n\n**Phase 1: Testnet Launch (Current Focus)**\n- Public testnet availability\n- Faucet and explorer services\n- Developer tooling and SDKs\n- Community validator onboarding\n\n**Phase 2: Ecosystem Development**\n- DeFi protocol partnerships\n- Developer grants program\n- Advanced staking mechanisms\n- Cross-chain integrations\n\n**Phase 3: Mainnet Preparation**\n- Security audits and testing\n- Performance optimization\n- Governance system activation\n- Economic model finalization\n\n**Phase 4: Mainnet & Expansion** (Future Vision)\n- Planned mainnet launch\n- Enterprise partnerships (future goals)\n- Performance scaling goals\n- Global ecosystem growth plans\n\n### When will testnet be available?\nWe're currently in the final development and testing phase. Testnet availability will be announced through our official channels when ready.\n\n### What makes CLayer economically secure?\n\nCircle Layer's economic security is built on several mechanisms:\n\n- **Stake-based Consensus**: Validators must stake CLAYER tokens to participate\n- **Economic Incentives**: Validators earn rewards proportional to their stake\n- **Punishment System**: Poor performance results in slashing and income loss\n- **Economic Security**: Token burn mechanism (25% of transaction fees) *[Mainnet only]*\n\n### How does the fee distribution work?\n\nCircle Layer implements a sophisticated fee distribution system:\n\n- **Delegator Rewards**: 45% from gas fees (distributed by stake proportion)\n- **Validator Rewards**: 30% from gas fees (distributed by stake proportion)\n- **Burn Mechanism**: 25% of gas fees (stops at 1,000,000 CLAYER threshold) *[Mainnet only]*\n- **Proportional Distribution**: All rewards based on stake percentage\n\n*Note: The ETH token launch uses a simplified model with 5% trading fees. Full fee distribution and burn mechanisms will be implemented on mainnet migration.*",
    "url": "/faqs/common-questions"
  },
  {
    "title": "CLAYER Trading Guide",
    "body": "# CLAYER Trading Guide\n\n## 🚀 Token is Live on Ethereum!\n\nCircle Layer (CLAYER) token is now live and trading on Ethereum mainnet. You can buy and trade CLAYER tokens freely without any restrictions.\n\n## 📊 Live Trading Data\n\n**View live price and charts on DexScreener:**  \n🔗 [**CLAYER on DexScreener**](https://dexscreener.com/ethereum/0x7b5d6a651b5ea2049489123c5959b3d3cdfeee57)\n\n### 📈 Live Chart\n\n{`\n#dexscreener-embed {\n  position: relative;\n  width: 100%;\n  padding-bottom: 125%;\n  margin: 30px 0;\n  border-radius: 8px;\n  overflow: hidden;\n}\n@media(min-width: 1400px) {\n  #dexscreener-embed {\n    padding-bottom: 65%;\n  }\n}\n#dexscreener-embed iframe {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  border: 0;\n}\n`}\n\n  \n  \n\n## 🛒 How to Buy CLAYER\n\n### 1. **Contract Address**\n**CLayer (CLAYER)**: `0x7b5d6a651b5ea2049489123c5959b3d3cdfeee57`\n\n:::warning VERIFY CONTRACT ADDRESS\nAlways verify the contract address before trading. Only use the official contract address listed above to avoid scams.\n:::\n\n### 2. **Trade on Uniswap**\n\n### 3. **Trading Settings**\n\n**Recommended Settings:**\n- **Slippage**: 5-6% (if facing trading issues)\n- **Gas**: Use medium to fast gas settings for reliable execution\n- **MEV Protection**: Enable if your wallet supports it\n\n:::tip SLIPPAGE RECOMMENDATION\nIf your transaction fails or you're having trouble with trades, try increasing slippage to 5-6%. This helps ensure your transaction goes through during periods of high volatility or low liquidity.\n:::\n\n## 🔧 Troubleshooting\n\n### Common Trading Issues\n\n**Transaction Failed?**\n- ✅ Increase slippage to 5-6%\n- ✅ Use higher gas fees\n- ✅ Verify you have enough ETH for gas\n- ✅ Double-check contract address\n\n**Price Impact Too High?**\n- ✅ Reduce trade size\n- ✅ Split large trades into smaller amounts\n- ✅ Wait for better liquidity\n\n**Slow Transaction?**\n- ✅ Increase gas price\n- ✅ Try trading during off-peak hours\n- ✅ Use MEV protection if available\n\n## 📈 Trading Tips\n\n### Best Practices\n1. **Start Small** - Test with small amounts first\n2. **Check Liquidity** - Monitor trading volume on DexScreener\n3. **Monitor Gas** - Trade when gas fees are reasonable\n4. **Use Limit Orders** - If your DEX supports them for better prices\n5. **DYOR** - Always do your own research before trading\n\n### Security Tips\n- ✅ Only use official contract addresses\n- ✅ Verify DEX pair authenticity\n- ✅ Never share your private keys\n- ✅ Use hardware wallets for large amounts\n- ✅ Double-check all transaction details\n\n## 🔗 Official Links\n\n- **DexScreener**: [CLAYER Charts & Data](https://dexscreener.com/ethereum/0x7b5d6a651b5ea2049489123c5959b3d3cdfeee57)\n- **Uniswap**: Trade directly via the button above\n- **Telegram**: [Join Community](https://t.me/clayer_io)\n- **Website**: [CLayer Official](https://clayer.io)\n\n## 📞 Support\n\nNeed help with trading?\n\n1. **Check this guide** - Most issues are covered above\n2. **Join [Telegram](https://t.me/clayer_io)** - Community support\n3. **Visit DexScreener** - Live trading data and community comments\n4. **Follow official channels** - Latest updates and announcements\n\n---\n\n**Happy Trading!** 🎉 CLAYER is now fully live and trading on Ethereum. Use the resources above to trade safely and stay connected with the community.",
    "url": "/getting-started/clayer-trading-guide"
  },
  {
    "title": "Connect to Testnet",
    "body": "# Connect to Testnet\n\nStep-by-step guide to configure your development environment for CLayer testnet.\n\n## Network Configuration\n\n### Required Network Details\nUse these settings to connect to CLayer testnet:\n\n- **Network Name**: CLayer Testnet\n- **RPC URL**: https://testnet-rpc.clayer.io\n- **WebSocket Endpoint**: wss://testnet-rpc.clayer.io\n- **Chain ID**: 28525\n- **Currency Symbol**: CLAYER\n- **Currency Decimals**: 18\n- **Block Explorer**: https://explorer-testnet.clayer.io\n\n## Connection Methods\n\n### Method 1: MetaMask (Recommended)\n1. **Open MetaMask** and click on the network dropdown\n2. **Select \"Add Network\"** or \"Custom RPC\"\n3. **Enter Network Details**:\n   \nCode example:\n   Network Name: CLayer Testnet\n   RPC URL: https://testnet-rpc.clayer.io\n   Chain ID: 28525\n   Currency Symbol: CLAYER\n   Block Explorer: https://explorer-testnet.clayer.io\n   \n\n4. **Save and Switch** to the new network\n\n### Method 2: Programmatic Setup\nAdd CLayer testnet programmatically to MetaMask:\n\nCode example:\nasync function addCircleLayerNetwork() {\n  try {\n    await window.ethereum.request({\n      method: 'wallet_addEthereumChain',\n      params: [{\n        chainId: '0x6F75', // 28525 in hex\n        chainName: 'CLayer Testnet',\n        nativeCurrency: {\n          name: 'CLAYER',\n          symbol: 'CLAYER',\n          decimals: 18\n        },\n        rpcUrls: ['https://testnet-rpc.clayer.io'],\n        blockExplorerUrls: ['https://explorer-testnet.clayer.io/']\n      }]\n    });\n    console.log('CLayer testnet added successfully');\n  } catch (error) {\n    console.error('Error adding network:', error);\n  }\n}\n\n### Method 3: Development Environment\nConfigure your development tools for CLayer:\n\n**Hardhat Configuration:**\n\nCode example:\n// hardhat.config.js\nmodule.exports = {\n  networks: {\n    circleLayerTestnet: {\n      url: \"https://testnet-rpc.clayer.io\",\n      chainId: 28525,\n      accounts: [process.env.PRIVATE_KEY]\n    }\n  }\n};\n\n**Truffle Configuration:**\n\nCode example:\n// truffle-config.js\nmodule.exports = {\n  networks: {\n    circleLayerTestnet: {\n      provider: () => new HDWalletProvider(mnemonic, \"https://testnet-rpc.clayer.io\"),\n      network_id: 28525,\n      gas: 8000000,\n      gasPrice: 21000000000 // 0.000021 CLAYER\n    }\n  }\n};\n\n## Verification Steps\n\n### 1. Test Connection\nVerify your connection is working:\n\nCode example:\n// Using Web3.js\nconst Web3 = require('web3');\nconst web3 = new Web3('https://testnet-rpc.clayer.io');\n\nasync function testConnection() {\n  try {\n    const blockNumber = await web3.eth.getBlockNumber();\n    console.log('Latest block:', blockNumber);\n    console.log('✅ Connection successful');\n  } catch (error) {\n    console.error('❌ Connection failed:', error);\n  }\n}\n\n### 2. Check Network Status\nMonitor network performance:\n- **Block Time**: ~3 seconds\n- **Transaction Finality**: 1-3 seconds  \n- **Network Uptime**: 99.95% target\n\n### 3. Get Test Tokens\nVisit the [CLayer Faucet](https://faucet.clayer.io):\n- **Daily Limit**: 1 CLAYER per address\n- **Purpose**: Testing and development only\n- **Alternative**: Faucet API at https://faucet-api.clayer.io\n\n## Troubleshooting\n\n### Common Connection Issues\n\n**RPC Endpoint Not Responding:**\n- Verify URL: `https://testnet-rpc.clayer.io`\n- Check network connectivity\n- Try switching networks and back\n\n**Chain ID Mismatch:**\n- Ensure Chain ID is set to `28525`\n- Clear browser cache if needed\n- Verify MetaMask network configuration\n\n**Gas Price Issues:**\n- Minimum gas price: 0.000021 CLAYER\n- Use gas estimation for dynamic pricing\n- Check account CLAYER balance\n\n### WebSocket Connection\nFor real-time data, use WebSocket endpoint:\n\nCode example:\nconst WebSocket = require('ws');\nconst ws = new WebSocket('wss://testnet-rpc.clayer.io');\n\nws.on('open', function open() {\n  console.log('WebSocket connected');\n  \n  // Subscribe to new blocks\n  ws.send(JSON.stringify({\n    id: 1,\n    method: 'eth_subscribe',\n    params: ['newHeads']\n  }));\n});\n\nws.on('message', function incoming(data) {\n  const response = JSON.parse(data);\n  console.log('New block:', response);\n});\n\n## Next Steps\n\nAfter successful connection:\n\n1. **[Set Up Wallet](./set-up-wallet)** - Configure your wallet for development\n2. **[Use Faucet](./use-faucet)** - Get test tokens for development\n3. **[Deploy Contracts](../development/writing-smart-contracts)** - Start building on CLayer\n4. **[Explore APIs](../apis-sdks/)** - Learn about available endpoints\n\n## Network Monitoring\n\n### Real-time Status\n- **Block Explorer**: https://explorer-testnet.clayer.io\n- **RPC Health**: Test with `eth_blockNumber` call\n- **WebSocket Status**: Monitor connection stability\n\n### Performance Expectations\n- **Block Interval**: Consistent 3-second timing\n- **Transaction Processing**: 1-3 second finality\n- **Gas Efficiency**: Predictable CLAYER-based pricing\n- **Uptime**: 99.95% availability target",
    "url": "/getting-started/connect-testnet"
  },
  {
    "title": "Set Up a Wallet",
    "body": "# Set Up a Wallet\n\nLearn how to set up your wallet for CLayer testnet access.\n\n## Supported Wallets\n\n- **MetaMask** (Recommended - Desktop and Mobile)\n- **WalletConnect** (Register on WalletConnect and follow their guidelines)\n- **Custom Wallets** (EVM-compatible software wallets)\n- **Mobile Wallets** (Trust Wallet, Rainbow, Coinbase Wallet, etc.)\n\n:::warning Hardware Wallet Limitation\n**Ledger hardware wallets are NOT supported** on CLayer at this time. Please use software wallets like MetaMask for CLayer testnet access.\n:::\n\n### Wallet Compatibility Details\n\n#### ✅ Fully Supported\n- **MetaMask**: Browser extension and mobile app\n- **Trust Wallet**: Mobile and desktop versions  \n- **Rainbow Wallet**: Mobile and browser support\n- **Coinbase Wallet**: Full EVM compatibility\n- **WalletConnect**: All WalletConnect-compatible wallets\n- **Brave Wallet**: Built-in Ethereum wallet\n- **Frame**: Desktop wallet with hardware isolation\n\n#### ❌ Not Supported\n- **Ledger Hardware Wallets**: Due to technical limitations\n- **Trezor Hardware Wallets**: Due to technical limitations\n- **Other Hardware Wallets**: Currently not compatible\n\n## Preparation Steps\n\n1. Choose your preferred wallet\n2. Install the wallet extension or application\n3. Create a new wallet or import existing\n4. Configure network settings\n5. Add CLayer testnet\n\n## MetaMask Configuration\n\n### Testnet Network Settings\n\nCode example:\n{\n  \"networkName\": \"CLayer Testnet\",\n  \"rpcUrl\": \"https://testnet-rpc.clayer.io\",\n  \"chainId\": 28525,\n  \"currencySymbol\": \"CLAYER\",\n  \"currencyDecimals\": 18,\n  \"blockExplorerUrl\": \"https://explorer-testnet.clayer.io\"\n}\n\n### Manual Network Addition\n\n#### Method 1: Manual Configuration\n1. **Open MetaMask** and click the network dropdown\n2. **Select \"Add Network\"** → \"Add a network manually\"\n3. **Fill in the network details**:\n   - Network Name: `CLayer Testnet`\n   - New RPC URL: `https://testnet-rpc.clayer.io`\n   - Chain ID: `28525`\n   - Currency Symbol: `CLAYER`\n   - Block Explorer URL: `https://explorer-testnet.clayer.io`\n4. **Click \"Save\"** to add the network\n5. **Switch to CLayer** from the network dropdown\n\n#### Method 2: Programmatic Addition\n\nCode example:\n// Add CLayer Testnet programmatically\nasync function addCircleLayerNetwork() {\n  try {\n    await window.ethereum.request({\n      method: 'wallet_addEthereumChain',\n      params: [{\n        chainId: '0x6F75', // 28525 in hexadecimal\n        chainName: 'CLayer Testnet',\n        nativeCurrency: {\n          name: 'CLAYER',\n          symbol: 'CLAYER',\n          decimals: 18\n        },\n        rpcUrls: ['https://testnet-rpc.clayer.io'],\n        blockExplorerUrls: ['https://explorer-testnet.clayer.io']\n      }]\n    });\n    console.log('CLayer Testnet added successfully');\n  } catch (error) {\n    console.error('Error adding network:', error);\n  }\n}\n\n### Network Verification\nAfter adding the network, verify the configuration:\n\n1. **Check Network Display**: Should show \"CLayer Testnet\"\n2. **Verify Chain ID**: Should display 28525\n3. **Currency Symbol**: Should show CLAYER\n4. **Test Connection**: Try viewing account balance\n\n### Advanced MetaMask Settings\n\n#### Gas Configuration\n\nCode example:\n// Recommended gas settings for CLayer\nconst gasSettings = {\n  gasPrice: '21000000000', // 0.000021 CLAYER in wei\n  gasLimit: '21000', // Standard transfer\n  maxFeePerGas: '25000000000', // 0.000025 CLAYER\n  maxPriorityFeePerGas: '2000000000' // 0.000002 CLAYER\n};\n\n#### Custom RPC Configuration\n- **Primary RPC**: `https://testnet-rpc.clayer.io`\n- **WebSocket**: `wss://testnet-rpc.clayer.io`\n- **Backup RPC**: Contact support for additional endpoints\n- **Connection Timeout**: 30 seconds (default)\n\n## WalletConnect Setup\nFor WalletConnect integration, you need to register on WalletConnect and follow their guidelines for EVM-compatible chains.\n\n### WalletConnect Configuration\n\nCode example:\n// WalletConnect v2 setup for CLayer\n\nconst circleLayerTestnet = {\n  id: 28525,\n  name: 'CLayer Testnet',\n  network: 'clayer-testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'CLAYER',\n    symbol: 'CLAYER',\n  },\n  rpcUrls: {\n    default: { http: ['https://testnet-rpc.clayer.io'] },\n    public: { http: ['https://testnet-rpc.clayer.io'] },\n  },\n  blockExplorers: {\n    default: { \n      name: 'CLayer Explorer', \n      url: 'https://explorer-testnet.clayer.io' \n    },\n  },\n};\n\nconst { chains, publicClient } = configureChains(\n  [circleLayerTestnet],\n  [\n    jsonRpcProvider({\n      rpc: (chain) => ({\n        http: 'https://testnet-rpc.clayer.io',\n      }),\n    }),\n  ]\n);\n\n## Mobile Wallet Configuration\n\n### Trust Wallet Setup\n1. **Open Trust Wallet** → Settings → Wallets\n2. **Add Network** → Select \"Custom\"\n3. **Enter Network Details**:\n   - Network Name: `CLayer Testnet`\n   - RPC URL: `https://testnet-rpc.clayer.io`\n   - Chain ID: `28525`\n   - Symbol: `CLAYER`\n   - Explorer: `https://explorer-testnet.clayer.io`\n\n### Rainbow Wallet Setup\n1. **Open Rainbow Wallet** → Settings → Networks\n2. **Add Network** → Custom Network\n3. **Configure CLayer**:\n   - Name: `CLayer Testnet`\n   - RPC: `https://testnet-rpc.clayer.io`\n   - Chain ID: `28525`\n   - Currency: `CLAYER`\n\n### Coinbase Wallet Setup\n1. **Open Coinbase Wallet** → Settings → Active Networks\n2. **Add Network** → Custom RPC\n3. **Fill Network Information**:\n   - Network Name: `CLayer Testnet`\n   - RPC URL: `https://testnet-rpc.clayer.io`\n   - Chain ID: `28525`\n   - Currency Symbol: `CLAYER`\n\n## Troubleshooting\n\n### Common Issues\n\n#### Connection Problems\n- **Verify RPC URL**: Ensure `https://testnet-rpc.clayer.io` is correct\n- **Check Chain ID**: Must be exactly `28525`\n- **Network Status**: Check CLayer testnet status\n- **Clear Cache**: Clear wallet cache and retry\n\n#### Transaction Issues\n- **Insufficient Gas**: Ensure you have CLAYER for gas fees\n- **Gas Price**: Use minimum 0.000021 CLAYER gas price\n- **Network Congestion**: Wait for network to clear\n- **Wallet Update**: Ensure wallet is updated to latest version\n\n#### Balance Display\n- **Token Not Visible**: May need to manually add CLAYER token\n- **Incorrect Network**: Ensure you're on CLayer Testnet\n- **Sync Issues**: Try refreshing wallet or switching networks\n\n### Support Contacts\n- **Technical Support**: support@clayer.io\n- **Wallet Issues**: support@clayer.io\n- **Documentation**: support@clayer.io\n\n## Development Integration\nCircle Layer follows standard EVM integration patterns, making it compatible with existing Ethereum development tools and wallets.",
    "url": "/getting-started/set-up-wallet"
  },
  {
    "title": "Use the Faucet",
    "body": "# Use the Faucet\n\nLearn about CLayer's testnet faucet for development and testing.\n\n## Faucet Access\n\n- **URL**: https://faucet.clayer.io\n- **API URL**: https://faucet-api.clayer.io\n- **Supported Networks**: CLayer Testnet\n- **Token Type**: CLAYER\n- **Supported Wallet Formats**: EVM-based wallets\n\n## How to Use\n\nTo use the CLayer testnet faucet:\n\n1. Copy your wallet address\n2. Paste your wallet address in the text box on the faucet page\n3. Click on \"Get 1 CLAYER coin\" button\n4. Wait for confirmation\n5. Verify balance in your wallet\n\n## Faucet Limits\n\n- **Daily limit**: 1 CLAYER per day per address\n- **Request interval**: 24 hours\n- **Distribution**: From treasury wallet\n\n## Token Information\n\n- **Token Symbol**: CLAYER\n- **Testnet Total Supply**: 10 Billion CLAYER\n- **Decimals**: 18\n\n## Troubleshooting\n\nCommon issues and solutions for faucet usage:\n\n- Ensure you're using an EVM-compatible wallet address\n- Wait 24 hours between requests\n- Check that your wallet is configured for CLayer Testnet",
    "url": "/getting-started/use-faucet"
  },
  {
    "title": "Governance Model",
    "body": "# Governance Model\n\n## Overview\n\nCircle Layer uses a decentralized governance model that allows token holders to participate in decision-making. The governance structure clearly separates the CLayer company's supportive role from network control, ensuring true decentralization.\n\n## Company Structure & Network Governance\n\n### CLayer Company Role\nThe CLayer company serves as an ecosystem supporter and facilitator, **not as a network controller**:\n\n- **Ecosystem Support**: Provides development resources, documentation, and community support\n- **Infrastructure Development**: Builds tools, SDKs, and developer resources\n- **Community Building**: Facilitates community growth and ecosystem partnerships\n- **No Network Control**: Does not control network operations, consensus, or governance decisions\n\n### Network Control Model\nThe CLayer network is controlled by its validators and community:\n\n- **Validator Governance**: Network controlled by distributed validator nodes\n- **Decentralized Consensus**: No single entity controls the blockchain\n- **Community Decision Making**: Token holders and validators make governance decisions\n- **Autonomous Operation**: Network operates independently of company control\n\n### Shared Vision Framework\n- **Global Contributors**: Open ecosystem welcoming global development contributors\n- **Shared Vision**: Alignment around advancing blockchain technology and adoption\n- **Value Creation Focus**: Core values centered on creating value for the blockchain industry\n- **Community-Driven**: Development priorities shaped by community needs and input\n\n### Governance Separation\n- **Technical Governance**: Handled by validators and community consensus\n- **Ecosystem Governance**: Community-driven through token-based voting\n- **Company Operations**: Separate from network governance decisions\n- **Transparency**: Clear separation ensures transparency and decentralization\n\n## Governance Structure\n\n### 1. Token Holders\n- Voting power based on token holdings\n- Minimum stake for voting: 1,000 CLAYER\n- Delegation options available\n\n### 2. Validators\n- Network security providers\n- Additional voting weight\n- Technical expertise\n\n### 3. Development Team\n- Technical implementation\n- Proposal evaluation\n- Community support\n\n## Governance Process\n\n### 1. Proposal Creation\n- Minimum stake: 10,000 CLAYER\n- Technical specification\n- Implementation plan\n- Resource requirements\n\n### 2. Discussion Phase\n- Community feedback\n- Technical review\n- Economic impact analysis\n- Security assessment\n\n### 3. Voting Phase\n- Duration: 7 days\n- Quorum: 20% of total supply\n- Majority: 60% approval\n- Implementation threshold\n\n## Proposal Types\n\n### 1. Protocol Upgrades\n- Network parameters\n- Consensus changes\n- Security updates\n\n### 2. Treasury Management\n- Fund allocation\n- Grant programs\n- Development funding\n\n### 3. Ecosystem Development\n- Partnership proposals\n- Integration requests\n- Community initiatives\n\n## Voting Mechanism\n\n### 1. On-chain Voting\n\nCode example:\nfunction vote(uint256 proposalId, bool support) external {\n    require(hasVotingPower(msg.sender), \"No voting power\");\n    require(!hasVoted[msg.sender][proposalId], \"Already voted\");\n    // Voting logic\n}\n\n### 2. Delegation\n\nCode example:\nfunction delegate(address to) external {\n    require(to != address(0), \"Invalid delegate\");\n    require(!hasDelegated[msg.sender], \"Already delegated\");\n    // Delegation logic\n}\n\n### 3. Vote Counting\n- Weighted voting power\n- Time-locked tokens\n- Delegation consideration\n```",
    "url": "/governance/governance-model"
  },
  {
    "title": "CLayer Tokenomics",
    "body": "# CLayer Tokenomics\n\n  \n    Economic Architecture of $CLAYER\n    Scalable blockchain infrastructure with successful fair launch - now live and trading on Ethereum!\n  \n\n## Overview\n\n$CLAYER powers CLayer's high-performance blockchain and is now live on Ethereum with progressive tokenomics for sustainable network operations and governance.\n\n  \n    Token Details\n    \n      \n        Ticker:\n        $CLAYER\n      \n      \n        Total Supply:\n        1,000,000,000\n      \n      \n        Blockchain:\n        Ethereum (Fair Launch)\n      \n      \n        Decimals:\n        18\n      \n      \n        Current Trading Fee:\n        5% (Progressive to 0%)\n      \n      \n        Official CA:\n        0x7b5d6a651b5ea2049489123c5959b3d3cdfeee57\n      \n    \n  \n\n## 📊 Allocation Breakdown\n\n  \n    \n      Detailed breakdown of $CLAYER token distribution across key ecosystem functions\n    \n    \n    \n      \n    \n    \n    \n      \n        \n          \n          \n            Initial Liquidity\n            50%\n          \n        \n        \n          500,000,000 $CLAYER\n          Market liquidity and healthy price discovery\n        \n      \n      \n      \n        \n          \n          \n            Treasury\n            20%\n          \n        \n        \n          200,000,000 $CLAYER\n          Governance, grants, and strategic partnerships\n        \n      \n      \n      \n        \n          \n          \n            Staking/Validator Incentives\n            15%\n          \n        \n        \n          150,000,000 $CLAYER\n          Network security and validator rewards\n        \n      \n      \n      \n        \n          \n          \n            Marketing & OPEX\n            10%\n          \n        \n        \n          100,000,000 $CLAYER\n          Marketing, growth initiatives, and operations\n        \n      \n      \n      \n        \n          \n          \n            Research & Development\n            5%\n          \n        \n        \n          50,000,000 $CLAYER\n          Innovation and protocol development\n        \n      \n    \n   \n\n## 🔒 Liquidity Protection\n\n  \n    \n      \n        \n        \n          LP Tokens Secured\n          Liquidity locked via UNCX Network\n        \n      \n      \n        🔒 12 Months\n      \n    \n    \n    \n      \n        \n          Lock Platform:\n          UNCX Network\n        \n        \n          Duration:\n          12 Months\n        \n        \n          Security:\n          Immutable Smart Contract\n        \n      \n      \n      \n        \n          🔍\n          Verify Lock on UNCX\n          ↗\n        \n      \n    \n    \n    \n      \n        Community Trust: Our LP tokens are securely locked for 12 months through UNCX Network's \n        battle-tested smart contracts. This ensures price stability, and demonstrates \n        our long-term commitment to the CLayer ecosystem.\n      \n    \n  \n\n## ⏰ Token Vesting Schedule\n\n  \n    Transparent token release schedule secured through PinkLock smart contracts\n  \n  \n  \n    \n      \n        \n          \n          \n            Research & Development\n            Record #1019659\n          \n        \n        \n          🔒 Locked\n        \n      \n      \n        \n          \n            Platform:\n            PinkLock\n          \n          \n            Amount:\n            50,000,000 CLAYER\n          \n          \n            Type:\n            Linear Vesting\n          \n          \n            Purpose:\n            Research & Development\n          \n        \n        \n          🔍 View R&D Lock Details\n          ↗\n        \n      \n    \n\n    \n      \n        \n          \n          \n            Marketing & OPEX\n            Record #1019660\n          \n        \n        \n          🔒 Locked\n        \n      \n      \n        \n          \n            Platform:\n            PinkSale\n          \n          \n            Amount:\n            70,000,000 CLAYER\n          \n          \n            Type:\n            Linear Vesting\n          \n          \n            Purpose:\n            Marketing & Operations\n          \n        \n        \n          🔍 View Marketing Lock Details\n          ↗\n        \n      \n    \n\n    \n      \n        \n          \n          \n            Staking/Validator Incentives\n            Record #1019661\n          \n        \n        \n          🔒 Locked\n        \n      \n      \n        \n          \n            Platform:\n            PinkSale\n          \n          \n            Amount:\n            150,000,000 CLAYER\n          \n          \n            Type:\n            Linear Vesting\n          \n          \n            Purpose:\n            Staking & Validator Rewards\n          \n        \n        \n          🔍 View Staking Lock Details\n          ↗\n        \n      \n    \n\n    \n      \n        \n          \n          \n            Treasury\n            Record #1019662\n          \n        \n        \n          🔒 Locked\n        \n      \n      \n        \n          \n            Platform:\n            PinkSale\n          \n          \n            Amount:\n            200,000,000 CLAYER\n          \n          \n            Type:\n            Linear Vesting\n          \n          \n            Purpose:\n            Treasury Reserve\n          \n        \n        \n          🔍 View Treasury Lock Details\n          ↗\n        \n      \n    \n\n    \n      \n        \n          \n          \n            Early Brand Awareness KOLs Fund\n            Etherscan Verified\n          \n        \n        \n          🔒 Secured\n        \n      \n      \n        \n          \n            Platform:\n            Etherscan\n          \n          \n            Amount:\n            30,000,000 CLAYER\n          \n          \n            Type:\n            KOL Allocation\n          \n          \n            Purpose:\n            Brand Awareness & Marketing\n          \n        \n        \n          🔍 View on Etherscan\n          ↗\n        \n      \n    \n  \n  \n\n## Fair Launch Success ✅\n\n  \n    \n      Successfully Launched\n      100% community-accessible launch completed with no private allocations to VCs or institutional investors.\n    \n    \n      Live & Trading\n      Now live on Ethereum with active trading and community-driven growth strategy.\n    \n    \n      Transparent Distribution\n      All token allocations secured and verified through UNCX and PinkLock platforms.\n    \n  \n\n## Economic Model\n\n  💼 Revenue & Growth Mechanism\n  \n  \n    Trading Fee Structure\n    \n      \n        Buy/Sell Fee: 5%\n        \n          📈 50% → Marketing & Growth\n          🔬 50% → R&D & Development\n        \n      \n    \n    Trading fees support continuous development and ecosystem growth, ensuring sustainable project advancement without external funding dependency.\n    \n    :::info CURRENT FEE STRUCTURE\n    🚀 **CLAYER is now live and trading with progressive fee reductions!**\n    \n    We are currently in the 5% fee phase. The progressive fee reduction system is active, automatically decreasing fees from 5% → 4% → 3% → 0% permanently based on treasury funding milestones (300 ETH → 500 ETH → 2000 ETH).\n    :::\n  \n\n## Migration Roadmap\n\n  🌉 ETH to Mainnet Transition\n  \n    \n      ✅\n      \n        Ethereum Launch - COMPLETED\n        Successfully launched on Ethereum with initial liquidity and active community trading\n      \n    \n    \n      🔄\n      \n        Trading & Growth - IN PROGRESS\n        Building strong trading foundation and community engagement on Ethereum with progressive fee reductions\n      \n    \n    \n      🔮\n      \n        Mainnet Migration - PLANNED\n        Future seamless token migration to CLayer mainnet with enhanced functionality\n      \n    \n    \n      🎯\n      \n        Native Operations - FUTURE\n        Full ecosystem operation on CLayer with native DeFi and governance",
    "url": "/governance/tokenomics"
  },
  {
    "title": "Trading Fees",
    "body": "# Trading Fees\n\n  \n    Progressive Trading Fee Structure\n    CLayer features a progressive fee structure that automatically reduces and eventually eliminates fees as the project reaches funding milestones. Token is now live and trading on Ethereum!\n  \n\n## Current Trading Fee Status\n\n**Token is Live** - Progressive fee structure is now active with automated reductions to 0%.\n\n**Key Point**: Fee applies **only** to buys/sells. **No fee** on wallet transfers.\n\n  \n    📊 Current Trading Fee Overview\n    \n      \n        Current Fee:\n        5% (Post-Launch)\n      \n      \n        Fee Application:\n        Buys & Sells Only\n      \n      \n        Transfer Fee:\n        0% (Always Free)\n      \n      \n        Status:\n        Live & Progressive\n      \n    \n  \n\n## Progressive Fee Reduction\n\n**Automated fee reductions** based on ETH collection milestones:\n\n  \n    📊 Treasury Milestone Chart\n    \n      \n        🔴 0-300 ETH:\n        5% Fee (Current Phase)\n      \n      \n        🟡 300-500 ETH:\n        4% Fee (Growth)\n      \n      \n        🔵 500-2000 ETH:\n        3% Fee (Scaling)\n      \n      \n        🟢 2000+ ETH:\n        0% Fee (Fee-Free Forever)\n      \n    \n  \n\n:::info CURRENT STATUS\n🚀 **CLAYER is now live and trading!** \n\nWe are currently in the initial phase (0-300 ETH) with 5% trading fees. As the treasury grows through trading activity, fees will automatically reduce according to the milestone schedule above, eventually reaching 0% permanently at 2000+ ETH.\n:::\n\n## How It Works\n\n**Phased fee reduction** with automated smart contract execution:\n\n1. **0-300 ETH**: 5% fee → Bootstrap development (Current Phase)\n2. **300-500 ETH**: 4% fee → Growth phase  \n3. **500-2000 ETH**: 3% fee → Scaling phase\n4. **2000+ ETH**: 0% fee → Fee-free forever\n\n## Why Progressive Trading Fees?\n\n**Innovative approach** with capped fees and automated reductions:\n\n✅ **Clear Purpose**: Bootstrap to self-sustainability  \n✅ **Investor Protection**: Predictable fee structure with endpoints  \n✅ **Automated Execution**: Hardcoded smart contract reductions  \n✅ **Complete Transparency**: On-chain tracking and community oversight  \n✅ **Fee-Free Future**: Guaranteed 0% fees at final milestone\n\n## Fund Allocation\n\n**Transparent distribution** across four key areas:\n\n  \n    40%\n    🔧 Development\n  \n  \n    30%\n    🖥️ Infrastructure\n  \n  \n    20%\n    📈 Marketing\n  \n  \n    10%\n    ⚖️ Operations\n  \n\n## Real-Time Treasury Tracking\n\n**Monitor progress toward fee reductions:**\n\n✅ **Live ETH collection tracking** via smart contract  \n✅ **Transparent milestone progress** with community updates  \n✅ **Automated fee reductions** when milestones are reached  \n✅ **Public verification** of all treasury movements\n\n## Transparency Commitment\n\n**Complete accountability** with on-chain verification:\n\n✅ **Real-time on-chain tracking** of all fee collections  \n✅ **Automated smart contract execution** - no human intervention  \n✅ **Community oversight** with regular progress reporting  \n✅ **Milestone notifications** when fee reductions occur\n\n## Technical Implementation\n\n**Smart contract features**:\n- ⏰ **Automated milestone-based reductions** \n- 📊 **Real-time ETH collection tracking**\n- 🎯 **Hardcoded milestone triggers**\n- 🔗 **Complete on-chain transparency**\n- 🛡️ **Immutable fee reduction schedule**\n\n## Trading Tips\n\n**Optimize your trading experience:**\n\n- **Slippage**: Use 5-6% if experiencing transaction failures\n- **Gas Fees**: Use medium to fast gas for reliable execution  \n- **Timing**: Monitor gas prices to reduce overall trading costs\n- **Milestones**: Follow treasury progress for upcoming fee reductions\n\n## Result\n\n**A successfully launched project with clear path to fee-free trading as it grows and reaches sustainable funding levels.**\n\n  \n    ✅ Live & Trading\n    Successfully launched on Ethereum\n  \n  \n    ✅ Progressive Structure\n    Clear path to 0% fees\n  \n  \n    ✅ Auto-Reducing\n    Hardcoded reductions\n  \n  \n    ✅ Fee-Free Future\n    0% at 2000 ETH milestone\n  \n\n  ⚖️ Smart Contract Guarantee\n  The trading fee mechanism is **immutably coded** into the CLayer smart contract. Fee reductions cannot be altered, reversed, or manipulated by any party. This provides maximum security, predictability, and trust for all investors.",
    "url": "/governance/trading-fees"
  },
  {
    "title": "Welcome to CLayer",
    "body": "Welcome to CLayer Documentation\n  \n    CLayer is a high-performance, EVM-compatible, Delegated Proof of Stake blockchain designed to power the next generation of decentralized applications with efficient transaction processing and comprehensive developer support.\n  \n  \n  \n    \n      🚀 Get Started\n    \n    \n      🏗️ Build Now\n    \n  \n\n  \n    \n      3s\n      Block Time\n    \n    \n      1-3s\n      Finality\n    \n    \n      99.9%\n      Uptime\n    \n  \n\n  \n    \n  \n\n## 🎥 Video Tutorial: Smart Contract Development\n\nLearn the complete smart contract development workflow on CLayer with this step-by-step video tutorial:\n\n  \n    \n    \n  \n  \n  \n    📚 What you'll learn:\n    \n      ✅ Writing smart contracts for CLayer\n      ✅ Using CLayer AI for development assistance\n      ✅ Connecting MetaMask to CLayer testnet\n      ✅ Getting testnet tokens from the faucet\n      ✅ Deploying contracts using Remix IDE\n      ✅ Verifying contracts on CLayer explorer\n    \n  \n\n## 🎯 Solving DApp Industry's Biggest Problem\n\nThe blockchain industry's most significant application lies in decentralized applications (Dapps) functioning on various blockchains. However, the operational efficiency of these Dapps, particularly in high-demand sectors like gaming, metaverse, and NFTs, is critically hindered by the limited transaction speeds offered by conventional blockchain technology.\n\n**CLayer addresses two critical challenges:**\n\n### ⚡ Performance Bottleneck\nOur blockchain solution directly integrates a robust Delegated Proof of Stake (DPoS) consensus mechanism, enabling high transaction throughput. This advancement not only accelerates transaction processing but also fortifies network security through a dedicated network of validators responsible for transaction verification.\n\n### 💰 Developer Economics  \nTraditional blockchains leave DApp developers with inadequate cash flow despite high user engagement, as transaction fees typically go to miners or stakers. **CLayer's innovative solution redistributes a portion of transaction fees to smart contract deployers**, generating positive cash flow for DApp developers and creating a more equitable financial ecosystem.\n\n## 📈 Network Performance Metrics\n\n  \n    ~5,000\n    🎯 Current TPS\n    ⚡ Fully Operational\n  \n  \n  \n    1-3s\n    🚀 Finality\n    ⚡ Ultra Fast\n  \n  \n  \n    99.9%\n    🔒 Uptime (30d)\n    🔒 Highly Reliable\n  \n  \n  \n    28525\n    🌐 Chain ID\n    🌐 Ready for Testing\n  \n\n## ✨ Key Features\n\n  \n    🚀\n    High Performance\n    ~5,000 TPS on testnet, targeting 50,000 TPS for mainnet\n    \n      ~5,000 TPS Testnet\n      50,000 TPS Target\n      3s Block Time\n    \n  \n  \n  \n    🔒\n    AI Security\n    Real-time smart contract auditing and threat detection\n    \n      Real-time Auditing\n      Threat Detection\n      Auto-Protection\n    \n  \n  \n  \n    ⚡\n    EVM Compatible\n    Seamless migration from Ethereum with full tooling support\n    \n      Solidity Ready\n      Web3.js Support\n      Metamask Compatible\n    \n  \n  \n  \n    🌱\n    Energy Efficient\n    Delegated Proof of Stake consensus mechanism\n    \n      99.9% Less Energy\n      DPoS Consensus\n      Eco-Friendly\n    \n  \n  \n  \n    🔧\n    Developer Friendly\n    Comprehensive tooling and extensive support programs\n    \n      Full Documentation\n      Grant Programs\n      24/7 Support\n    \n  \n\n## 🔧 Core Technology & Technical Characteristics\n\nCircle Layer combines several cutting-edge technologies to deliver a superior blockchain experience:\n\n- **EVM Compatibility**: Full compatibility with Ethereum's virtual machine, allowing seamless migration of existing dApps\n- **Delegated Proof of Stake (DPoS)**: Energy-efficient consensus with enhanced security, supporting up to 21 validators\n- **Meta-transaction Function**: Gas fee reduction, effectively reducing costs for developers and users\n- **Cross-chain Support**: Assets like ETH, BNB and stable coins can be mapped via asset bridge\n- **Developer Revenue Share**: Portion of transaction fees redistributed to smart contract deployers\n\n### Economic Model\n- **Endogenous Token**: CLAYER serves as the native gas fee token\n- **Validator Staking**: Miners pledge CLAYER to become validator nodes  \n- **Reward Distribution**: Gas fees distributed according to staking proportion\n- **Burn Mechanism**: Deflationary tokenomics with systematic burning\n\n## 🔥 Why Choose CLayer?\n\n  \n    \n### Lightning-Fast Transactions\n\nCode example:\ngraph LR\n    A[Transaction Submitted] -->|under 1s| B[Validated]\n    B -->|2-3s| C[Block Included]  \n    C -->|1-3s| D[Finalized]\n\n#### Target Performance Metrics\n\n  \n    50,000+\n    🎯 Target TPS\n  \n  \n    &lt; 1s\n    ⚡ Finality\n  \n  \n    99.9%\n    🌱 Energy Efficient\n  \n\n  \n    🎯 Our Target\n    \n      \n        ⚡ 50,000+ TPS\n        Target Speed\n      \n      \n        ⏱️ Under 1s\n        Finality\n      \n      \n        🌱 99.9%\n        Less Energy\n      \n      \n        CLayer\n        Blockchain\n      \n    \n  \n  \n  \n    📊 vs EVM L1 Competition:\n  \n  \n  \n    \n      Polygon\n      7,000 TPS\n    \n    \n    \n      BSC\n      300 TPS\n    \n    \n    \n      Avalanche\n      4,500 TPS\n    \n    \n    \n      Ethereum\n      15 TPS\n    \n  \n\n  \n    \n    \n    \n    \n  \n  \n    \n      Blockchain\n      TPS\n      Finality\n      Energy Usage\n    \n  \n  \n    \n      CLayer (Mainnet Target)\n      50,000+ 🎯\n      under 1s\n      99.9% less\n    \n    \n      CLayer (Testnet Development)\n      ~5,000\n      1-3s\n      99.9% less\n    \n    \n      Polygon\n      7,000\n      2-3s\n      Medium\n    \n    \n      BSC\n      300\n      3s\n      Medium\n    \n    \n      Avalanche\n      4,500\n      1-2s\n      Low\n    \n    \n      Ethereum\n      15\n      6-10min\n      High\n    \n  \n\n  \n    🚧 Development Roadmap - Phase 1\n    Target: 50,000 TPS (In Development)\n  \n\n  \n    \n      \n        🔬\n        How We'll Achieve 50,000 TPS\n      \n      \n      \n        \n          ⚡\n          \n            Parallel Transaction Processing\n            Multi-threaded execution for maximum throughput\n          \n        \n        \n        \n          🔄\n          \n            Optimized Consensus\n            Enhanced PoS with instant finality\n          \n        \n        \n        \n          🚀\n          \n            State Sharding\n            Horizontal scaling architecture\n          \n        \n        \n        \n          🎯\n          \n            EVM Optimization\n            Custom bytecode improvements\n          \n        \n      \n      \n      \n        📊\n        Status: In development - Building comprehensive ecosystem before mainnet\n      \n    \n  \n\n  \n  \n  \n    \n### AI-Powered Security Suite\n\nCode example:\nflowchart TD\n    A[Smart Contract Deployed] --> B[AI Scanner]\n    B --> C{Vulnerabilities Found?}\n    C -->|Yes| D[Alert & Block]\n    C -->|No| E[Deploy to Network]\n    D --> F[Developer Notification]\n    F --> G[Fix Required]\n    E --> H[Continuous Monitoring]\n\n**Security Features:**\n\n  🤖 Real-time AI auditing\n  🛡️ Automated threat detection\n  ⚠️ Smart contract vulnerability scanning\n  🔔 Instant security alerts\n\n  \n  \n  \n    \n### Growing Ecosystem\n\nPhase 3 Targets\n\n*Projected ecosystem growth before mainnet launch*\n\n  \n    150+\n    Target Validators\n  \n  \n    25+\n    DApps in Development\n  \n  \n    Growing\n    Community Target\n  \n\n**Supported Tools & Frameworks:**\n\n  🔧 Hardhat, Truffle, Remix\n  🌐 Web3.js, Ethers.js\n  💼 MetaMask, WalletConnect\n  📊 The Graph, OpenZeppelin\n\n  \n\n## 🚀 Quick Start\n\n  \n    \n      🏗️ Developers\n      Easy\n    \n    Start building on CLayer\n    \n      Setup wallet\n      Get testnet tokens\n      Deploy contract\n    \n    \n      Build Now →\n    \n  \n  \n  \n    \n      🎯 Validators\n      Medium\n    \n    Secure the network and earn rewards\n    \n      100,000 CLAYER minimum stake\n      Network rewards\n    \n    \n      Become a Validator →\n    \n  \n  \n  \n    \n      👥 Community\n      Beginner\n    \n    Join our growing ecosystem\n    \n      Active Telegram community\n      Growing Twitter following\n    \n    \n      Get Involved →\n    \n  \n\n## 🏗️ Architecture Overview\n\nCircle Layer's innovative architecture combines proven blockchain technology with cutting-edge AI security:\n\nCode example:\ngraph TB\n    subgraph \"CLayer Architecture\"\n        A[Application Layer] --> B[Consensus Layer]\n        B --> C[AI Security Layer] \n        C --> D[Network Layer]\n        \n        A --> E[Smart Contracts]\n        A --> F[DApps]\n        A --> G[APIs & SDKs]\n        \n        B --> H[DPoS Consensus]\n        B --> I[Validator Network]\n        B --> J[Block Production]\n        \n        C --> K[Real-time Auditing]\n        C --> L[Threat Detection]\n        C --> M[Auto-Protection]\n        \n        D --> N[P2P Network]\n        D --> O[RPC Endpoints]\n        D --> P[Cross-chain Bridges]\n    end\n\n## 🚧 Development Roadmap\n\nCircle Layer is building a comprehensive blockchain ecosystem through strategic phases:\n\n  \n    🚀 Phase 1: Token Launch & Core Infrastructure\n    \n      ERC20 token launch for community building\n      Community-driven development approach\n      ~5,000 TPS testnet development\n      DPoS consensus implementation\n      Validator network establishment\n    \n  \n  \n  \n    🌉 Phase 2: Ecosystem Expansion\n    \n      Native Bridge & DEX (4 trading pairs)\n      iOS/Android wallet development\n      Agentic AI security layer\n      Startup onboarding & hackathons\n      50,000 TPS optimization\n    \n  \n  \n  \n    🎯 Phase 3: Mainnet Launch\n    \n      Genesis launch with 21 validators\n      Token migration to native chain\n      Gradual scaling to 50,000 TPS\n      DeFi infrastructure activation\n      Mobile wallet deployment\n    \n  \n  \n  \n    🌍 Phase 4: Global Expansion\n    \n      Top 10 blockchain by innovation & adoption\n      10M+ active users globally\n      100,000+ TPS performance\n      Enterprise & institutional adoption\n    \n  \n\n## 📚 What's Next?\n\n  \n    Step 1\n    Set Up Your Wallet\n    Configure MetaMask for CLayer testnet\n    Start Here →\n  \n  \n  \n    Step 2\n    Explore Architecture\n    Deep dive into our consensus mechanism\n    Learn More →\n  \n  \n  \n    Step 3\n    Join Community\n    Connect with developers and validators\n    Connect →\n  \n\n  🌟 Ready to build the future? CLayer provides the perfect foundation for your next-generation dApp.",
    "url": "/"
  },
  {
    "title": "Key Features",
    "body": "# Key Features\n\nCircle Layer offers a comprehensive suite of features designed to meet the needs of modern blockchain applications. This section details the practical implementation and current capabilities of our platform.\n\n## Current Network Configuration\n\n**Network Details:**\n- **Chain ID**: 28525 | **Currency**: CLAYER tokens\n- **RPC Endpoint**: https://testnet-rpc.clayer.io\n- **WebSocket**: wss://testnet-rpc.clayer.io\n- **Block Explorer**: https://explorer-testnet.clayer.io\n- **Faucet**: https://faucet.clayer.io\n\n**Performance Specifications:**\n- **Block Time**: 3 seconds | **Finality**: 1-3 seconds  \n- **Gas Price**: Minimum 0.000021 CLAYER | **Block Gas Limit**: 10,000,000,000,000\n- **Network Uptime**: 99.95% (Last 30 days) | **Energy Efficiency**: 99.9% less than PoW\n\n## Technical Implementation\n\n### Security & Consensus\n- **DPoS Consensus**: Delegated Proof of Stake security model with minimum 5 active validators\n- **Staking Requirements**: 100,000 CLAYER minimum stake\n- **Validator Network**: Maximum 21 validators supported\n\n### Development Integration\n- **EVM Compatibility**: Full compatibility with existing Ethereum tooling\n- **Library Support**: Web3.js, Ethers.js, Viem integration\n- **Development Tools**: Hardhat, Truffle, Remix, Foundry compatible\n- **Wallet Integration**: MetaMask, WalletConnect, and custom wallet support\n\n### Economic Features\n- **Deflationary Economics**: 25% from gas fees burned (maximum 1,000,000 CLAYER) *[Mainnet only]*\n- **Stake-based Rewards**: Higher stake = higher rewards proportionally\n- **Developer Revenue**: Gas fee sharing with smart contract deployers\n\n*Note: Advanced economic mechanisms apply to CLayer mainnet. Current testnet uses simplified economics.*\n\n## Development Status Overview\n\n| Service | Status | Readiness |\n|---------|--------|-----------|\n| RPC API | 🟡 Ready for Testing | Infrastructure Complete |\n| WebSocket | 🟡 Ready for Testing | Infrastructure Complete |\n| Block Explorer | 🟡 Ready for Testing | Infrastructure Complete |\n| GraphQL | 🔄 In Development | Coming Soon |\n\n## Current vs Future Comparison\n\n| Feature | Current Testnet | In Development |\n|---------|-----------------|----------------|\n| Block Time | 3s | Optimized |\n| Finality | 1-3s | Enhanced |\n| Consensus | DPoS | Advanced DPoS |\n| Staking | Manual | Smart Contracts |\n| Governance | Manual | On-chain |\n| Bridges | N/A | Cross-chain |\n| Oracles | N/A | Decentralized |\n\n  \n    Current vs Future Comparison\n  \n  \n  \n    \n      \n        Block Time\n      \n      \n        \n          Current Testnet\n          3s\n        \n        \n          In Development\n          Optimized\n        \n      \n    \n    \n    \n      \n        Finality\n      \n      \n        \n          Current Testnet\n          1-3s\n        \n        \n          In Development\n          Enhanced\n        \n      \n    \n    \n    \n      \n        Consensus\n      \n      \n        \n          Current Testnet\n          DPoS\n        \n        \n          In Development\n          Advanced DPoS\n        \n      \n    \n    \n    \n      \n        Staking\n      \n      \n        \n          Current Testnet\n          Manual\n        \n        \n          In Development\n          Smart Contracts\n        \n      \n    \n    \n    \n      \n        Governance\n      \n      \n        \n          Current Testnet\n          Manual\n        \n        \n          In Development\n          On-chain\n        \n      \n    \n    \n    \n      \n        Bridges\n      \n      \n        \n          Current Testnet\n          N/A\n        \n        \n          In Development\n          Cross-chain\n        \n      \n    \n    \n    \n      \n        Oracles\n      \n      \n        \n          Current Testnet\n          N/A\n        \n        \n          In Development\n          Decentralized\n        \n      \n    \n  \n\n## Practical Implementation Notes\n\n### For Developers\n- **Network Access**: Development & testing phase with 99.95% uptime target\n- **Gas Efficiency**: Predictable costs with CLAYER token pricing\n- **Example Contracts**: Reference implementation at 0xfCb4Ce5953dE22cbF04d015df88a3a9895E86bEB\n- **Integration Patterns**: Standard EVM development workflows apply\n\n### For Validators\n- **Minimum Requirements**: 5 active validators for network security\n- **Economic Incentives**: Gas fee distribution based on staking proportion\n- **Network Participation**: Manual setup currently, smart contracts in development\n\n### For Users\n- **Wallet Support**: MetaMask recommended with testnet configuration\n- **Network Testing**: Free testnet tokens via faucet (1 CLAYER per day)\n- **Transaction Experience**: 1-3 second confirmation times\n- **Block Explorer**: Real-time transaction tracking available\n\n## Next Steps\n\nFor implementation guidance:\n- [Network Setup Guide](/getting-started/connect-testnet)  \n- [Development Tools](/development/writing-smart-contracts)\n- [API References](/apis-sdks/rpc-endpoints)\n- [Validator Setup](/nodes-validation/becoming-validator)",
    "url": "/introduction/key-features"
  },
  {
    "title": "Use Cases",
    "body": "# Use Cases\n\nCircle Layer's architecture and features make it ideal for various blockchain applications and use cases. Our high throughput, low latency, and AI security features enable innovative solutions across multiple industries.\n\n## DeFi Applications\n\n### Decentralized Exchanges (DEXs)\n- High-frequency trading support\n- Low-latency order matching\n- Cost-effective transactions\n- Secure smart contracts\n\n### Lending Platforms\n- Real-time interest calculations\n- Automated liquidations\n- Collateral management\n- Risk assessment\n\n### Yield Farming\n- Efficient reward distribution\n- Automated compounding\n- Multi-pool strategies\n- Risk management\n\n### Stablecoins\n- Fast minting and burning\n- Efficient price stability\n- Collateral management\n- Cross-chain compatibility\n\n## NFT Marketplaces\n\n### Digital Art\n- High-resolution asset storage\n- Royalty management\n- Marketplace integration\n- Creator tools\n\n### Gaming Assets\n- In-game item trading\n- Asset interoperability\n- Play-to-earn mechanics\n- Virtual economies\n\n### Collectibles\n- Digital collectible trading\n- Rarity verification\n- Collection management\n- Trading tools\n\n## Enterprise Solutions\n\n### Supply Chain\n- Real-time tracking\n- Asset verification\n- Document management\n- Compliance tracking\n\n### Identity Management\n- KYC/AML integration\n- Credential verification\n- Access control\n- Privacy protection\n\n### Data Verification\n- Document authentication\n- Data integrity\n- Timestamp verification\n- Audit trails\n\n## Gaming Applications\n\n### In-Game Assets\n- Asset ownership\n- Trading systems\n- Inventory management\n- Cross-game compatibility\n\n### Virtual Economies\n- Token economics\n- Marketplace systems\n- Reward mechanisms\n- Player incentives\n\n### Play-to-Earn\n- Reward distribution\n- Achievement tracking\n- Player progression\n- Economic balance\n\n## Social Platforms\n\n### Decentralized Social Networks\n- Content ownership\n- Reward distribution\n- Community governance\n- Privacy features\n\n### Content Platforms\n- Creator monetization\n- Content distribution\n- Rights management\n- Community engagement\n\n## Cross-chain Applications\n\n### Bridges\n- Asset transfer\n- Message passing\n- State synchronization\n- Security verification\n\n### Interoperable Solutions\n- Cross-chain DeFi\n- Multi-chain assets\n- Unified interfaces\n- Protocol integration\n\n## Technical Requirements\n\n### Performance Needs\n- High throughput (~5,000-50,000 TPS)\n- Low latency (&lt;10s finality)\n- Cost efficiency\n- Scalability\n\n### Security Requirements\n- AI-powered auditing\n- Real-time monitoring\n- Threat prevention\n- Compliance support\n\n### Development Support\n- EVM compatibility\n- Comprehensive SDK\n- API integration\n- Testing tools",
    "url": "/introduction/use-cases"
  },
  {
    "title": "Becoming a Validator",
    "body": "# Becoming a Validator\n\nLearn how to become a validator on CLayer and help secure the network while earning rewards.\n\n## Overview\n\nCircle Layer validators play a crucial role in securing the network through Delegated Proof of Stake (DPoS) consensus. Validators are responsible for producing blocks, validating transactions, and maintaining network security.\n\n## Requirements\n\n### Hardware Requirements\n\n#### Minimum Requirements\n- **CPU:** 8 cores\n- **RAM:** 16GB\n- **Storage:** SSD with IOPS > 5,000\n- **Network:** 100 Mbps symmetric\n- **OS:** Linux (Ubuntu 20.04+)\n\n#### Recommended Requirements\n- **CPU:** 16 cores\n- **RAM:** 32GB\n- **Storage:** NVMe SSD with IOPS > 5,000\n- **Network:** 1 Gbps symmetric\n\n#### Critical Requirements\n- **SSD is required** - Traditional HDDs will not work\n- **External IP Address** - Static public IP recommended\n- **Port TCP/UDP: 32668** - Must be open and accessible\n\n### Software Requirements\n- **Golang** 1.19+ (for compilation)\n- **Git** for source code\n- **systemd** for service management\n\n### Token Requirements\n- **Testnet Minimum Stake**: 32 CLAYER\n- **Mainnet Minimum Stake**: 100,000 CLAYER\n- **Additional for operations** and emergency fund\n\n## Network Configuration\n\n### Required Ports\n\nCode example:\n# Open required port for CLayer\nsudo ufw allow 32668/tcp\nsudo ufw allow 32668/udp\n\n# Optional: Allow RPC access (only if needed externally)\nsudo ufw allow 8545/tcp\nsudo ufw allow 8546/tcp\n\n# Allow SSH for management\nsudo ufw allow 22/tcp\n\n# Enable firewall\nsudo ufw enable\n\n### Network Specifications\n- **Primary Port**: 32668 (TCP/UDP)\n- **RPC Port**: 8545 (HTTP)\n- **WebSocket Port**: 8546 (WS)\n- **Minimum Active Validators**: 5 validators required for security\n- **Maximum Active Validators**: 21 (testnet), 10,000 (mainnet)\n\n## Economic Parameters\n\n### Gas & Fees\n- **Minimum Gas Price**: 0.000021 CLAYER\n- **Block Gas Limit**: 10,000,000,000,000 per block\n- **Fee Calculation**: gas price × gas amount (Ethereum standard)\n\n### Validator Rewards\n- **Reward Token**: CLAYER\n- **Fee Share**: 30% of gas fees\n- **Burn Mechanism**: 25% from gas fees (maximum 1,000,000 CLAYER)\n- **Delegator Share**: 45% of gas fees\n\n## Setup Process\n\n### 1. Download and Compile\n\nCode example:\n# Clone the repository\ngit clone https://github.com/clayer/testnet-clayer-blockchain\ncd /path/to/clayer-blockchain\n\n# Compile the node\nmake geth\n\n# Binary will be available at build/bin/geth\n\n### 2. Directory Setup\n\nCode example:\n# Create directory structure\nsudo mkdir -p /data/clayer/{data,logs}\nsudo chown -R $USER:$USER /data/clayer\n\n# Copy compiled binary\nsudo cp build/bin/geth /data/clayer/geth-linux-amd64\nsudo chmod +x /data/clayer/geth-linux-amd64\n\n### 3. Configuration\n\nCreate the validator configuration file at `/data/clayer/config.toml`:\n\nCode example:\n[Eth]\nSyncMode = \"fast\"\nDiscoveryURLs = []\nTrieCleanCacheRejournal = 300000000000\n\n[Eth.Miner]\nGasFloor = 8000000\nGasCeil = 8000000\nGasPrice = 0\nRecommit = 3000000000\nNoverify = false\n\n[Eth.Ethash]\nCacheDir = \"ethash\"\nCachesInMem = 2\nCachesOnDisk = 3\nCachesLockMmap = false\nDatasetDir = \"/data/clayer/data/.ethash\"\nDatasetsInMem = 1\nDatasetsOnDisk = 2\nDatasetsLockMmap = false\nPowMode = 0\n\n[Eth.TxPool]\nLocals = []\nNoLocals = false\nJournal = \"transactions.rlp\"\nRejournal = 3600000000000\nPriceLimit = 1\nPriceBump = 10\nAccountSlots = 16\nGlobalSlots = 4096\nAccountQueue = 64\nGlobalQueue = 1024\nLifetime = 10800000000000\n\n[Node]\nDataDir = \"/data/clayer/data\"\nInsecureUnlockAllowed = true\nNoUSB = true\nIPCPath = \"geth.ipc\"\nHTTPHost = \"0.0.0.0\"\nHTTPPort = 8545\nHTTPCors = [\"*\"]\nHTTPVirtualHosts = [\"*\"]\nHTTPModules = ['eth', 'net', 'web3']\n\nWSHost = \"0.0.0.0\"\nWSPort = 8546\nWSModules = ['eth', 'net', 'web3']\n\nGraphQLVirtualHosts = [\"localhost\"]\n\n[Node.P2P]\nMaxPeers = 50\nNoDiscovery = false\nListenAddr = \"32668\"\nEnableMsgEvents = false\n\n[Node.HTTPTimeouts]\nReadTimeout = 30000000000\nWriteTimeout = 30000000000\nIdleTimeout = 120000000000\n\n### 4. Startup Script\n\nCreate `/data/clayer/run.sh`:\n\nCode example:\n#!/usr/bin/env bash\n/data/clayer/geth-linux-amd64 \\\n--config /data/clayer/config.toml  \\\n--logpath /data/clayer/logs \\\n--verbosity 3  >> /data/clayer/logs/systemd_chain_console.out 2>&1\n\nMake it executable:\n\nCode example:\nchmod +x /data/clayer/run.sh\n\n### 5. Network Selection\n\n#### Testnet (Default for Testing)\n\nCode example:\n#!/usr/bin/env bash\n/data/clayer/geth-linux-amd64 \\\n--config /data/clayer/config.toml  \\\n--testnet \\\n--logpath /data/clayer/logs \\\n--verbosity 3  >> /data/clayer/logs/systemd_chain_console.out 2>&1\n\n#### Mainnet (Production)\n\nCode example:\n#!/usr/bin/env bash\n/data/clayer/geth-linux-amd64 \\\n--config /data/clayer/config.toml  \\\n--logpath /data/clayer/logs \\\n--verbosity 3  >> /data/clayer/logs/systemd_chain_console.out 2>&1\n\n### 6. Service Management\n\nCreate systemd service at `/etc/systemd/system/clayer.service`:\n\nCode example:\n[Unit]\nDescription=clayer Blockchain service\n\n[Service]\nType=simple\nExecStart=/bin/sh /data/clayer/run.sh\n\nRestart=on-failure\nRestartSec=5s\n\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\n\nEnable and start the service:\n\nCode example:\n# Reload systemd configuration\nsudo systemctl daemon-reload\n\n# Enable service to start on boot\nsudo systemctl enable clayer.service\n\n# Start the service\nsudo systemctl start clayer.service\n\n# Check service status\nsudo systemctl status clayer.service\n\n## Monitoring\n\n### 1. Node Status\n\nCode example:\n# Check if process is running\nps aux | grep geth\n\n# Check service status\nsudo systemctl status clayer.service\n\n# View service logs\nsudo journalctl -u clayer.service -f\n\n# Real-time log monitoring\ntail -f /data/clayer/logs/systemd_chain_console.out\n\n### 2. RPC Commands\n\nCode example:\n# Get current block number\ncurl -H \"Content-Type: application/json\" \\\n  -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n# Check peer count\ncurl -H \"Content-Type: application/json\" \\\n  -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n# Check sync status\ncurl -H \"Content-Type: application/json\" \\\n  -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n### 3. Performance Metrics\n\nMonitor these key metrics:\n- **CPU usage**: Should be below 80%\n- **Memory usage**: Monitor RAM consumption\n- **Network traffic**: Track P2P connections\n- **Block production**: Every 3 seconds\n- **Disk I/O**: Monitor SSD performance\n\n### 4. Health Checks\n\nCode example:\n# Check disk space\ndf -h /data/clayer\n\n# Check memory usage  \nfree -h\n\n# Monitor network connectivity\nnetstat -tlnp | grep 32668\n\n# Check system resources\ntop -p $(pgrep geth)\n\n## Security Considerations\n\n### File Permissions\n\nCode example:\n# Create dedicated user\nsudo useradd -r -s /bin/false clayer\n\n# Set ownership\nsudo chown -R clayer:clayer /data/clayer\n\n# Set secure permissions\nsudo chmod 755 /data/clayer\nsudo chmod 600 /data/clayer/config.toml\nsudo chmod 755 /data/clayer/run.sh\n\n### Network Security\n\n- Use firewall to restrict access\n- Only expose necessary ports (32668)\n- Consider VPN for remote management\n- Monitor for unusual activity\n- Keep system updated\n\n### Backup Strategy\n\nCode example:\n# Backup critical files\ntar -czf validator-backup-$(date +%Y%m%d).tar.gz \\\n    /data/clayer/config.toml \\\n    /data/clayer/data/keystore/ \\\n    /etc/systemd/system/clayer.service\n\n## Troubleshooting\n\n### Common Issues\n\n#### Sync Problems\n\nCode example:\n# Check peer connections\ncurl -H \"Content-Type: application/json\" \\\n  -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n# Restart service if stuck\nsudo systemctl restart clayer.service\n\n#### Port Issues\n\nCode example:\n# Test port connectivity\ntelnet  32668\n\n# Check if port is open\nsudo netstat -tlnp | grep 32668\n\n# Verify firewall\nsudo ufw status\n\n#### Performance Issues\n\nCode example:\n# Check system resources\ntop -p $(pgrep geth)\n\n# Monitor disk I/O\nsudo iotop -a\n\n# Check memory\nfree -h\n\n## Validator Operations\n\n### Starting Your Validator\n\n1. **Initial Setup**: Complete node installation and configuration\n2. **Sync Network**: Let node fully sync with the network\n3. **Stake Tokens**: Stake minimum required CLAYER tokens\n4. **Monitor Performance**: Ensure consistent uptime and performance\n5. **Community Engagement**: Join validator community channels\n\n### Best Practices\n\n#### Security\n- Configure required ports only (32668)\n- Regular security updates\n- Backup validator keys\n- Monitor logs continuously\n- Use dedicated hardware\n\n#### Performance\n- Use recommended hardware specifications\n- Regular maintenance schedules\n- Monitor system metrics\n- Keep software updated\n- Optimize disk performance\n\n#### Operations\n- 24/7 monitoring setup\n- Automated backup procedures\n- Emergency response procedures\n- Community support channels\n- Performance optimization\n\n## Getting Help\n\nFor validator support:\n- Check the [official documentation](/)\n- Join [community forums](/community/social-media)\n- Review [GitHub issues](https://github.com/clayer/testnet-clayer-blockchain/issues)\n- Monitor network status and announcements\n\n### Command Reference\n\nCode example:\n# Get all available options\n./build/bin/geth --help\n\n# Or short form\n./build/bin/geth -h\n\nFor detailed command-line options, refer to [Geth Command-line Options](https://geth.ethereum.org/docs/interface/command-line-options).\n\n---\n\n## Next Steps\n\nAfter setting up your validator:\n- Learn about [node monitoring](/nodes-validation/node-monitoring)\n- Review [security best practices](/nodes-validation/node-security)\n- Understand [deployment strategies](/nodes-validation/node-deployment)",
    "url": "/nodes-validation/becoming-validator"
  },
  {
    "title": "Node Deployment & Compilation",
    "body": "# Node Deployment & Compilation\n\n## Compile and Run\n\n### Download\n\nDownload source code via git:\n\nCode example:\ngit clone https://github.com/clayer/testnet-clayer-blockchain\n\n### Install Golang\n\n**Reference**: [Go Download and install](https://golang.org/doc/install)\n\n### Compile\n\nCode example:\ncd /path/to/clayer-blockchain\nmake geth\n\nIf you want to use cross compile, like compiling on Mac for Linux, use `make geth-linux`, `make geth-linux-amd64`, etc.\n\nAfter compilation completed, the generated binary is in the folder `build/bin`.\n\n### Run\n\nBy running `./build/bin/geth --help`, we can get all option info. Specific usage can refer to [Command-line Options](https://geth.ethereum.org/docs/interface/command-line-options).\n\n## Deployment\n\n**SSD is required**\n\n### Network\n\nProgram will connect into mainnet after started. If want to connect the public testnet, you can add option `--testnet` to command when starting.\n\n## Hardware\n\n### Minimum\n- **8 cores**\n- **16GB RAM**\n- **SSD IOPS > 5k**\n\n### Recommended\n- **16 cores**\n- **32GB RAM**\n- **SSD IOPS > 5k**\n\n### Network & Port\n- **External IP Address**\n- **Port TCP/UDP: 32668**\n\n## Chain Node Configuration\n\n### config.toml\n\nCode example:\n[Eth]\nSyncMode = \"fast\"\nDiscoveryURLs = []\nTrieCleanCacheRejournal = 300000000000\n\n[Eth.Miner]\nGasFloor = 8000000\nGasCeil = 8000000\nGasPrice = 0\nRecommit = 3000000000\nNoverify = false\n\n[Eth.Ethash]\nCacheDir = \"ethash\"\nCachesInMem = 2\nCachesOnDisk = 3\nCachesLockMmap = false\nDatasetDir = \"/data/clayer/data/.ethash\"\nDatasetsInMem = 1\nDatasetsOnDisk = 2\nDatasetsLockMmap = false\nPowMode = 0\n\n[Eth.TxPool]\nLocals = []\nNoLocals = false\nJournal = \"transactions.rlp\"\nRejournal = 3600000000000\nPriceLimit = 1\nPriceBump = 10\nAccountSlots = 16\nGlobalSlots = 4096\nAccountQueue = 64\nGlobalQueue = 1024\nLifetime = 10800000000000\n\n[Node]\nDataDir = \"/data/clayer/data\"\nInsecureUnlockAllowed = true\nNoUSB = true\nIPCPath = \"geth.ipc\"\nHTTPHost = \"0.0.0.0\"\nHTTPPort = 8545\nHTTPCors = [\"*\"]\nHTTPVirtualHosts = [\"*\"]\nHTTPModules = ['eth', 'net', 'web3']\n\nWSHost = \"0.0.0.0\"\nWSPort = 8546\nWSModules = ['eth', 'net', 'web3']\n\nGraphQLVirtualHosts = [\"localhost\"]\n\n[Node.P2P]\nMaxPeers = 50\nNoDiscovery = false\nListenAddr = \"32668\"\nEnableMsgEvents = false\n\n[Node.HTTPTimeouts]\nReadTimeout = 30000000000\nWriteTimeout = 30000000000\nIdleTimeout = 120000000000\n\n### Sync Mode Configuration\n\nUse fast sync in the config, if full needed, change this line:\n\nCode example:\nSyncMode = \"fast\"\n\nto:\n\nCode example:\nSyncMode = \"full\"\n\n## Start Scripts\n\nTo show full detail help info of all flags, type `geth help` or `geth -h`.\n\n### run.sh\n\nCode example:\n#!/usr/bin/env bash\n/data/clayer/geth-linux-amd64 \\\n--config /data/clayer/config.toml  \\\n--logpath /data/clayer/logs \\\n--verbosity 3  >> /data/clayer/logs/systemd_chain_console.out 2>&1\n\n### Archive Node\n\nIf you need to use it as archive node, add:\n\nCode example:\n--syncmode full \\\n--gcmode archive \\\n\nSo:\n\nCode example:\n#!/usr/bin/env bash\n/data/clayer/geth-linux-amd64 \\\n--config /data/clayer/config.toml  \\\n--logpath /data/clayer/logs \\\n--syncmode full \\\n--gcmode archive \\\n--verbosity 3  >> /data/clayer/logs/systemd_chain_console.out 2>&1\n\n### Network Selection\n\nIf no any network flags were provided, the node will connect the clayer Blockchain-mainnet by default. If you want to connect to clayer Blockchain-testnet, add:\n\nCode example:\n--testnet\n\n## Systemd Configuration\n\nCode example:\n[Unit]\nDescription=clayer Blockchain service\n\n[Service]\nType=simple\nExecStart=/bin/sh /data/clayer/run.sh\n\nRestart=on-failure\nRestartSec=5s\n\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\n\n## Directory Structure\n\nRecommended directory structure for CLayer node deployment:\n\nCode example:\n/data/clayer/\n├── geth-linux-amd64          # Compiled binary\n├── config.toml               # Main configuration\n├── run.sh                    # Startup script\n├── data/                     # Blockchain data\n│   ├── geth/                 # Node data\n│   └── .ethash/              # Ethash cache\n└── logs/                     # Log files\n    ├── geth.log\n    └── systemd_chain_console.out\n\n## Security Considerations\n\n### File Permissions\n\nSet appropriate permissions for security:\n\nCode example:\n# Create dedicated user\nsudo useradd -r -s /bin/false clayer\n\n# Set ownership\nsudo chown -R clayer:clayer /data/clayer\n\n# Set permissions\nsudo chmod 755 /data/clayer\nsudo chmod 600 /data/clayer/config.toml\nsudo chmod 755 /data/clayer/run.sh\n\n### Firewall Configuration\n\nConfigure firewall to allow only necessary ports:\n\nCode example:\n# Allow SSH (if needed)\nsudo ufw allow 22/tcp\n\n# Allow CLayer P2P port\nsudo ufw allow 32668\n\n# Allow RPC (only if needed externally)\nsudo ufw allow 8545/tcp\n\n# Enable firewall\nsudo ufw enable\n\n## Monitoring & Maintenance\n\n### Log Monitoring\n\nMonitor node logs for issues:\n\nCode example:\n# Real-time log monitoring\ntail -f /data/clayer/logs/systemd_chain_console.out\n\n# Search for errors\ngrep -i error /data/clayer/logs/systemd_chain_console.out\n\n# Check sync status\ngrep -i \"block\" /data/clayer/logs/systemd_chain_console.out | tail -20\n\n### Health Checks\n\nRegular health check commands:\n\nCode example:\n# Check if process is running\nps aux | grep geth\n\n# Check network connectivity\nnetstat -tlnp | grep 32668\n\n# Check disk space\ndf -h /data/clayer\n\n# Check memory usage\nfree -h\n\n### Backup Strategy\n\nImportant files to backup:\n\nCode example:\n# Backup keystore and configuration\ntar -czf clayer-backup-$(date +%Y%m%d).tar.gz \\\n    /data/clayer/config.toml \\\n    /data/clayer/data/keystore/ \\\n    /etc/systemd/system/clayer.service\n\n## Troubleshooting\n\n### Common Issues\n\n#### Sync Problems\n\nCode example:\n# Check peer connections\ncurl -H \"Content-Type: application/json\" \\\n  -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n#### Performance Issues\n\nCode example:\n# Check system resources\ntop -p $(pgrep geth)\niostat -x 1\n\n#### Connection Issues\n\nCode example:\n# Test port connectivity\ntelnet  32668\n\n### Getting Help\n\nFor additional support:\n- Join the [community forums](/community/social-media)\n- Review [GitHub issues](https://github.com/clayer/testnet-clayer-blockchain/issues)\n\n---\n\n:::tip Next Steps\nAfter deploying your node, consider:\n- Setting up [monitoring](/nodes-validation/node-monitoring)\n- Implementing [security best practices](/nodes-validation/node-security)\n- Becoming a [validator](/nodes-validation/becoming-validator)\n:::",
    "url": "/nodes-validation/node-deployment"
  },
  {
    "title": "Node Monitoring",
    "body": "# Node Monitoring\n\n## Overview\n\nLearn how to monitor your CLayer node effectively using the correct Geth-based monitoring tools and approaches.\n\n## Monitoring Setup\n\n### 1. Basic Node Monitoring\n\nCode example:\n# Check if node process is running\nps aux | grep geth\n\n# Check service status (if using systemd)\nsudo systemctl status clayer.service\n\n# View real-time logs\ntail -f /data/clayer/logs/systemd_chain_console.out\n\n# Check sync status via RPC\ncurl -H \"Content-Type: application/json\" \\\n  -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n# Check current block number\ncurl -H \"Content-Type: application/json\" \\\n  -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n# Check peer count\ncurl -H \"Content-Type: application/json\" \\\n  -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n### 2. System Resource Monitoring\n\nCode example:\n# Check memory usage\nfree -h\n\n# Check disk space (important for SSD requirements)\ndf -h /data/clayer\n\n# Monitor CPU usage\ntop -p $(pgrep geth)\n\n# Check network connectivity\nnetstat -tlnp | grep 32668\n\n# Monitor disk I/O (critical for SSD performance)\nsudo iotop -a\n\n### 3. Prometheus Integration\n\nCode example:\n# prometheus.yml - Updated for Geth metrics\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'clayer-geth'\n    static_configs:\n      - targets: ['localhost:6060']  # Geth metrics endpoint\n    metrics_path: '/debug/metrics/prometheus'\n    \n  - job_name: 'node-exporter'\n    static_configs:\n      - targets: ['localhost:9100']  # System metrics\n\n### 4. Grafana Dashboard Configuration\n\nCode example:\n{\n  \"dashboard\": {\n    \"title\": \"CLayer Node Dashboard\",\n    \"panels\": [\n      {\n        \"title\": \"Block Height\",\n        \"type\": \"stat\",\n        \"targets\": [\n          {\n            \"expr\": \"geth_chain_head_block\",\n            \"legendFormat\": \"Current Block\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Peer Count\",\n        \"type\": \"stat\",\n        \"targets\": [\n          {\n            \"expr\": \"geth_p2p_peers\",\n            \"legendFormat\": \"Connected Peers\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Transaction Pool\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"geth_txpool_pending\",\n            \"legendFormat\": \"Pending Transactions\"\n          },\n          {\n            \"expr\": \"geth_txpool_queued\", \n            \"legendFormat\": \"Queued Transactions\"\n          }\n        ]\n      },\n      {\n        \"title\": \"CPU Usage\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"100 - (avg by (instance) (rate(node_cpu_seconds_total{mode=\\\"idle\\\"}[5m])) * 100)\",\n            \"legendFormat\": \"CPU Usage %\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Memory Usage\",\n        \"type\": \"graph\", \n        \"targets\": [\n          {\n            \"expr\": \"geth_system_memory_allocs\",\n            \"legendFormat\": \"Memory Allocations\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Disk I/O\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(node_disk_io_time_seconds_total[5m])\",\n            \"legendFormat\": \"Disk I/O Time\"\n          }\n        ]\n      }\n    ]\n  }\n}\n\n## Key Metrics\n\n### 1. Node Health Indicators\n\n#### Sync Status\n\nCode example:\n# Check if node is syncing\ncurl -X POST -H \"Content-Type: application/json\" \\\n  --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n#### Block Progress\n\nCode example:\n# Monitor block progression\nwatch -n 3 'curl -s -X POST -H \"Content-Type: application/json\" \\\n  --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_blockNumber\\\",\\\"params\\\":[],\\\"id\\\":1}\" \\\n  http://localhost:8545 | jq -r \".result\" | xargs printf \"%d\\n\"'\n\n#### Peer Connectivity  \n\nCode example:\n# Monitor peer connections\ncurl -X POST -H \"Content-Type: application/json\" \\\n  --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n### 2. Performance Metrics\n\n#### Transaction Throughput\n- Pending transactions in mempool\n- Transaction processing rate\n- Gas usage patterns\n- Block utilization\n\n#### Resource Usage\n- **CPU**: Should stay below 80% average\n- **Memory**: Monitor Geth memory allocation\n- **Disk**: Critical SSD performance (IOPS > 5,000)\n- **Network**: Monitor P2P bandwidth on port 32668\n\n#### Network Performance\n- Block propagation time\n- Peer discovery efficiency\n- Network latency to validators\n- Connection stability\n\n### 3. Security Metrics\n\n#### Port Security\n\nCode example:\n# Verify only required ports are open\nsudo nmap -sT -p 32668,8545,8546 localhost\n\n# Check firewall status\nsudo ufw status verbose\n\n#### Process Security\n\nCode example:\n# Verify geth process ownership\nps aux | grep geth | grep -v grep\n\n# Check file permissions\nls -la /data/clayer/config.toml\n\n## Alerting Configuration\n\n### 1. Critical Alerts\n\nCode example:\n# alert-rules.yml - Updated for CLayer\ngroups:\n  - name: circlelayer_critical\n    rules:\n      - alert: NodeDown\n        expr: up{job=\"clayer-geth\"} == 0\n        for: 2m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"CLayer node is down\"\n          description: \"Node has been down for more than 2 minutes\"\n      \n      - alert: SyncFalling\n        expr: increase(geth_chain_head_block[5m])  85\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High CPU usage\"\n          description: \"CPU usage above 85% for 5 minutes\"\n\n      - alert: DiskSpaceLow\n        expr: (node_filesystem_avail_bytes{mountpoint=\"/data/clayer\"} / node_filesystem_size_bytes) * 100  0.8\n        for: 3m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High disk I/O\"\n          description: \"Disk I/O time high - SSD performance may be degraded\"\n\n### 2. Notification Channels\n\n#### Telegram Bot Setup\n\nCode example:\n# Create notification script\ncat > /usr/local/bin/alert-notify.sh > $LOG_FILE\n}\n\n# Check if geth process is running\nif ! pgrep -f geth > /dev/null; then\n    log \"ERROR: Geth process not running\"\n    exit 1\nfi\n\n# Check RPC connectivity\nif ! curl -f -s http://localhost:8545 > /dev/null; then\n    log \"ERROR: RPC endpoint not responding\"\n    exit 1\nfi\n\n# Check sync status\nSYNC_STATUS=$(curl -s -X POST -H \"Content-Type: application/json\" \\\n  --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545 | jq -r '.result')\n\nif [ \"$SYNC_STATUS\" != \"false\" ]; then\n    log \"WARNING: Node is still syncing\"\nfi\n\n# Check peer count\nPEER_COUNT=$(curl -s -X POST -H \"Content-Type: application/json\" \\\n  --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545 | jq -r '.result')\n\nPEER_COUNT_DEC=$((PEER_COUNT))\nif [ $PEER_COUNT_DEC -lt 3 ]; then\n    log \"WARNING: Low peer count: $PEER_COUNT_DEC\"\nfi\n\nlog \"Health check completed successfully - Peers: $PEER_COUNT_DEC\"\n\n#### Performance Monitoring Script\n\nCode example:\n#!/bin/bash\n# /usr/local/bin/performance-monitor.sh\n\nMETRICS_FILE=\"/data/clayer/logs/performance-metrics.log\"\nTIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')\n\n# Collect system metrics\nCPU_USAGE=$(top -bn1 | grep \"Cpu(s)\" | awk '{print $2}' | cut -d'%' -f1)\nMEMORY_USAGE=$(free | grep Mem | awk '{printf \"%.2f\", ($3/$2) * 100.0}')\nDISK_USAGE=$(df /data/clayer | tail -1 | awk '{print $5}' | sed 's/%//')\n\n# Collect geth metrics via RPC\nBLOCK_NUMBER=$(curl -s -X POST -H \"Content-Type: application/json\" \\\n  --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545 | jq -r '.result')\n  \nPEER_COUNT=$(curl -s -X POST -H \"Content-Type: application/json\" \\\n  --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545 | jq -r '.result')\n\n# Log metrics\necho \"[$TIMESTAMP] CPU:${CPU_USAGE}% MEM:${MEMORY_USAGE}% DISK:${DISK_USAGE}% BLOCK:$BLOCK_NUMBER PEERS:$PEER_COUNT\" >> $METRICS_FILE\n\n### 2. Log Analysis\n\n#### Log Parsing and Analysis\n\nCode example:\n# Monitor error patterns\ngrep -i \"error\\|panic\\|fatal\" /data/clayer/logs/systemd_chain_console.out | tail -20\n\n# Monitor connection issues\ngrep -i \"dial\\|connection\\|timeout\" /data/clayer/logs/systemd_chain_console.out | tail -10\n\n# Monitor block production\ngrep -i \"imported\\|mined\" /data/clayer/logs/systemd_chain_console.out | tail -10\n\n# Performance patterns\ngrep -i \"slow\\|timeout\\|delay\" /data/clayer/logs/systemd_chain_console.out | tail -10\n\n#### Log Rotation Configuration\n\nCode example:\n# Configure logrotate for CLayer logs\nsudo cat > /etc/logrotate.d/clayer > /etc/sysctl.conf\necho 'fs.file-max=2097152' >> /etc/sysctl.conf\necho 'net.core.rmem_max=134217728' >> /etc/sysctl.conf\necho 'net.core.wmem_max=134217728' >> /etc/sysctl.conf\n\n# Apply settings\nsysctl -p\n\n#### Geth Performance Tuning\n- Monitor and adjust cache settings\n- Optimize database configuration\n- Tune network buffer sizes\n- Monitor and manage log levels\n\n### 3. Backup and Recovery\n\n#### Configuration Backup\n\nCode example:\n# Backup critical files\ntar -czf clayer-backup-$(date +%Y%m%d).tar.gz \\\n    /data/clayer/config.toml \\\n    /data/clayer/run.sh \\\n    /etc/systemd/system/clayer.service \\\n    /etc/logrotate.d/clayer\n\n#### Data Recovery Procedures\n- Document chaindata restoration process\n- Test backup and recovery procedures\n- Maintain emergency contact information\n- Document rollback procedures\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n#### Node Won't Start\n\nCode example:\n# Check service logs\nsudo journalctl -u clayer.service -f\n\n# Check configuration\ngeth --datadir /data/clayer/data --config /data/clayer/config.toml --check-config\n\n# Check permissions\nls -la /data/clayer/\n\n#### Sync Issues\n\nCode example:\n# Force resync (use with caution)\nsudo systemctl stop clayer.service\nrm -rf /data/clayer/data/geth/chaindata\nsudo systemctl start clayer.service\n\n#### Performance Issues\n\nCode example:\n# Check disk performance\nsudo hdparm -Tt /dev/sda\n\n# Monitor I/O\nsudo iotop -aqqqd 1\n\n# Check network issues\nping -c 4 8.8.8.8\n\nFor additional support, refer to:\n- [Node Security](/nodes-validation/node-security)\n- [Node Deployment](/nodes-validation/node-deployment)\n- [Running Full Node](/nodes-validation/running-full-node)\n```",
    "url": "/nodes-validation/node-monitoring"
  },
  {
    "title": "Node Security",
    "body": "# Node Security\n\n## Overview\n\nLearn about security best practices for running CLayer nodes.\n\n## Security Fundamentals\n\n### 1. System Security\n- Regular updates\n- Firewall configuration\n- Access control\n- Resource limits\n\n### 2. Network Security\n- DDoS protection\n- Rate limiting\n- Port security\n- VPN usage\n\n### 3. Application Security\n- Secure configuration\n- Access management\n- Key security\n- Monitoring\n\n## Implementation\n\n### 1. System Hardening\n\nCode example:\n# Update system\nsudo apt update\nsudo apt upgrade -y\n\n# Configure firewall\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow 26656/tcp\nsudo ufw enable\n\nCode example:\n\nCode example:\n\n### 2. Access Control\n\nCode example:\n\nCode example:\n# Create service user\nsudo useradd -m -s /bin/bash clayer\nsudo usermod -aG docker clayer\n\n# Set permissions\nsudo chown -R clayer:clayer ~/.clayer\n\nCode example:\n\nCode example:\n\n### 3. Monitoring Setup\n\nCode example:\n\nCode example:\n# security-monitor.yml\nalerts:\n  - name: unauthorized_access\n    condition: \"failed_login_attempts > 3\"\n    action: \"block_ip\"\n  \n  - name: resource_abuse\n    condition: \"cpu_usage > 90%\"\n    action: \"notify_admin\"\n\nCode example:\n\nCode example:\n\n## Best Practices\n\n### 1. Key Management\n- Secure storage\n- Regular rotation\n- Backup procedures\n- Access control\n\n### 2. Network Protection\n- Use VPN\n- Enable TLS\n- Rate limiting\n- DDoS protection\n\n### 3. Monitoring\n- Log analysis\n- Alert system\n- Performance monitoring\n- Security scanning\n\n## Incident Response\n\n### 1. Detection\n- Monitor logs\n- Check metrics\n- Review alerts\n- Analyze patterns\n\n### 2. Response\n- Isolate node\n- Block threats\n- Update security\n- Notify team\n\n### 3. Recovery\n- Restore backup\n- Update systems\n- Review logs\n- Document incident\n\n## Maintenance\n\n### 1. Regular Tasks\n- Update software\n- Check logs\n- Review access\n- Test backups\n\n### 2. Security Audits\n- System scan\n- Config review\n- Access audit\n- Update policies\n\n### 3. Documentation\n- Security procedures\n- Incident reports\n- Update logs\n- Policy changes",
    "url": "/nodes-validation/node-security"
  },
  {
    "title": "Running a Full Node",
    "body": "# Running a Full Node\n\nLearn how to run and operate a full node on CLayer blockchain network.\n\n## Overview\n\nCircle Layer is an Ethereum-compatible blockchain that uses Geth (Go Ethereum) as its base. Running a full node allows you to participate in the network, validate transactions, and support decentralization.\n\n## Prerequisites\n\n### System Requirements\n\n#### Minimum Requirements\n- **CPU:** 8 cores\n- **RAM:** 16GB\n- **Storage:** SSD with IOPS > 5,000\n- **Network:** 100 Mbps symmetric\n- **OS:** Linux (Ubuntu 20.04+)\n\n#### Recommended Requirements\n- **CPU:** 16 cores  \n- **RAM:** 32GB\n- **Storage:** NVMe SSD with IOPS > 5,000\n- **Network:** 1 Gbps symmetric\n\n#### Critical Requirements\n- **SSD is required** - Traditional HDDs will not work\n- **External IP Address** - Static public IP recommended\n- **Port TCP/UDP: 32668** - Must be open and accessible\n\n### Software Requirements\n- **Golang** 1.19+ (for compilation)\n- **Git** for source code\n- **systemd** for service management\n\n## Node Setup\n\n### 1. Download and Compile\n\nCode example:\n# Clone the repository\ngit clone https://github.com/clayer/testnet-clayer-blockchain\ncd /path/to/clayer-blockchain\n\n# Compile the node\nmake geth\n\n# Binary will be available at build/bin/geth\n\n### 2. Directory Structure\n\nCreate the recommended directory structure:\n\nCode example:\nsudo mkdir -p /data/clayer/{data,logs}\nsudo chown -R $USER:$USER /data/clayer\n\nExpected structure:\n\nCode example:\n/data/clayer/\n├── geth-linux-amd64          # Compiled binary\n├── config.toml               # Node configuration\n├── run.sh                    # Startup script\n├── data/                     # Blockchain data\n│   ├── geth/                 # Node data\n│   └── .ethash/              # Ethash cache\n└── logs/                     # Log files\n    └── systemd_chain_console.out\n\n### 3. Configuration\n\n#### config.toml\n\nCreate the main configuration file at `/data/clayer/config.toml`:\n\nCode example:\n[Eth]\nSyncMode = \"fast\"\nDiscoveryURLs = []\nTrieCleanCacheRejournal = 300000000000\n\n[Eth.Miner]\nGasFloor = 8000000\nGasCeil = 8000000\nGasPrice = 0\nRecommit = 3000000000\nNoverify = false\n\n[Eth.Ethash]\nCacheDir = \"ethash\"\nCachesInMem = 2\nCachesOnDisk = 3\nCachesLockMmap = false\nDatasetDir = \"/data/clayer/data/.ethash\"\nDatasetsInMem = 1\nDatasetsOnDisk = 2\nDatasetsLockMmap = false\nPowMode = 0\n\n[Eth.TxPool]\nLocals = []\nNoLocals = false\nJournal = \"transactions.rlp\"\nRejournal = 3600000000000\nPriceLimit = 1\nPriceBump = 10\nAccountSlots = 16\nGlobalSlots = 4096\nAccountQueue = 64\nGlobalQueue = 1024\nLifetime = 10800000000000\n\n[Node]\nDataDir = \"/data/clayer/data\"\nInsecureUnlockAllowed = true\nNoUSB = true\nIPCPath = \"geth.ipc\"\nHTTPHost = \"0.0.0.0\"\nHTTPPort = 8545\nHTTPCors = [\"*\"]\nHTTPVirtualHosts = [\"*\"]\nHTTPModules = ['eth', 'net', 'web3']\n\nWSHost = \"0.0.0.0\"\nWSPort = 8546\nWSModules = ['eth', 'net', 'web3']\n\nGraphQLVirtualHosts = [\"localhost\"]\n\n[Node.P2P]\nMaxPeers = 50\nNoDiscovery = false\nListenAddr = \"32668\"\nEnableMsgEvents = false\n\n[Node.HTTPTimeouts]\nReadTimeout = 30000000000\nWriteTimeout = 30000000000\nIdleTimeout = 120000000000\n\n#### Sync Mode Options\n\n**Fast Sync (Recommended)**\n\nCode example:\nSyncMode = \"fast\"\n\nDownloads block headers and recent state data for faster initial sync.\n\n**Full Sync (Complete History)**\n\nCode example:\nSyncMode = \"full\"\n\nDownloads and validates all blocks from genesis.\n\n## Running the Node\n\n### 1. Startup Script\n\nCreate `/data/clayer/run.sh`:\n\nCode example:\n#!/usr/bin/env bash\n/data/clayer/geth-linux-amd64 \\\n--config /data/clayer/config.toml  \\\n--logpath /data/clayer/logs \\\n--verbosity 3  >> /data/clayer/logs/systemd_chain_console.out 2>&1\n\nMake it executable:\n\nCode example:\nchmod +x /data/clayer/run.sh\n\n### 2. Network Selection\n\n**Mainnet (Default)**\n\nCode example:\n# No additional flags needed - connects to mainnet by default\n/data/clayer/run.sh\n\n**Testnet**\n\nCode example:\n# Add --testnet flag to connect to testnet\n#!/usr/bin/env bash\n/data/clayer/geth-linux-amd64 \\\n--config /data/clayer/config.toml  \\\n--testnet \\\n--logpath /data/clayer/logs \\\n--verbosity 3  >> /data/clayer/logs/systemd_chain_console.out 2>&1\n\n### 3. Archive Node\n\nFor complete historical data:\n\nCode example:\n#!/usr/bin/env bash\n/data/clayer/geth-linux-amd64 \\\n--config /data/clayer/config.toml  \\\n--logpath /data/clayer/logs \\\n--syncmode full \\\n--gcmode archive \\\n--verbosity 3  >> /data/clayer/logs/systemd_chain_console.out 2>&1\n\n## Service Management\n\n### systemd Configuration\n\nCreate `/etc/systemd/system/clayer.service`:\n\nCode example:\n[Unit]\nDescription=clayer Blockchain service\n\n[Service]\nType=simple\nExecStart=/bin/sh /data/clayer/run.sh\n\nRestart=on-failure\nRestartSec=5s\n\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\n\n### Service Commands\n\nCode example:\n# Reload systemd configuration\nsudo systemctl daemon-reload\n\n# Enable service to start on boot\nsudo systemctl enable clayer.service\n\n# Start the service\nsudo systemctl start clayer.service\n\n# Check service status\nsudo systemctl status clayer.service\n\n# View service logs\nsudo journalctl -u clayer.service -f\n\n# Stop the service\nsudo systemctl stop clayer.service\n\n# Restart the service\nsudo systemctl restart clayer.service\n\n## Network Configuration\n\n### Firewall Setup\n\nCode example:\n# Open required port\nsudo ufw allow 32668/tcp\nsudo ufw allow 32668/udp\n\n# Or with iptables\nsudo iptables -A INPUT -p tcp --dport 32668 -j ACCEPT\nsudo iptables -A INPUT -p udp --dport 32668 -j ACCEPT\n\n### API Access (Optional)\n\nIf you need external API access:\n\nCode example:\n# Allow RPC port (use with caution)\nsudo ufw allow 8545/tcp\n\n# Allow WebSocket port\nsudo ufw allow 8546/tcp\n\n**Warning:** Only open API ports if absolutely necessary and implement proper security measures.\n\n## Monitoring and Maintenance\n\n### Health Checks\n\nCode example:\n# Check if node process is running\nps aux | grep geth\n\n# Check network connectivity\nnetstat -tlnp | grep 32668\n\n# Check disk space\ndf -h /data/clayer\n\n# Check memory usage\nfree -h\n\n### Log Monitoring\n\nCode example:\n# Real-time log monitoring\ntail -f /data/clayer/logs/systemd_chain_console.out\n\n# Search for errors\ngrep -i error /data/clayer/logs/systemd_chain_console.out\n\n# Check sync status\ngrep -i \"block\" /data/clayer/logs/systemd_chain_console.out | tail -20\n\n### RPC Commands\n\nCheck node status using RPC:\n\nCode example:\n# Get current block number\ncurl -H \"Content-Type: application/json\" \\\n  -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n# Check peer count\ncurl -H \"Content-Type: application/json\" \\\n  -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n# Check sync status\ncurl -H \"Content-Type: application/json\" \\\n  -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n### Performance Monitoring\n\nCode example:\n# Monitor system resources\ntop -p $(pgrep geth)\n\n# Check I/O performance\niostat -x 1\n\n# Monitor network connections\nss -tulpn | grep 32668\n\n## Troubleshooting\n\n### Common Issues\n\n#### Sync Problems\n\nCode example:\n# Check peer connections\ncurl -H \"Content-Type: application/json\" \\\n  -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545\n\n# Restart sync if stuck\nsudo systemctl restart clayer.service\n\n#### Performance Issues\n\nCode example:\n# Check system resources\ntop -p $(pgrep geth)\niostat -x 1\n\n# Check disk IOPS\nsudo iotop -a\n\n#### Connection Issues\n\nCode example:\n# Test port connectivity\ntelnet  32668\n\n# Check firewall\nsudo ufw status\nsudo iptables -L\n\n#### Storage Issues\n\nCode example:\n# Check disk space\ndf -h /data/clayer\n\n# Check inode usage\ndf -i /data/clayer\n\n# Monitor disk performance\nsudo iotop\n\n### Getting Help\n\nFor additional support:\n- Check the [official documentation](/)\n- Join the [community forums](/community/social-media)\n- Review [GitHub issues](https://github.com/clayer/testnet-clayer-blockchain/issues)\n\n### Command Reference\n\nCode example:\n# Get all available options\n./build/bin/geth --help\n\n# Or short form\n./build/bin/geth -h\n\nFor detailed command-line options, refer to [Geth Command-line Options](https://geth.ethereum.org/docs/interface/command-line-options).\n\n## Security Considerations\n\n### File Permissions\n\nCode example:\n# Create dedicated user\nsudo useradd -r -s /bin/false clayer\n\n# Set ownership\nsudo chown -R clayer:clayer /data/clayer\n\n# Set secure permissions\nsudo chmod 755 /data/clayer\nsudo chmod 600 /data/clayer/config.toml\nsudo chmod 755 /data/clayer/run.sh\n\n### Network Security\n\n- Use firewall to restrict access\n- Only expose necessary ports\n- Consider VPN for remote management\n- Monitor for unusual activity\n- Keep system updated\n\n## Backup and Recovery\n\n### Important Files to Backup\n\nCode example:\n# Backup configuration and keystore\ntar -czf clayer-backup-$(date +%Y%m%d).tar.gz \\\n    /data/clayer/config.toml \\\n    /data/clayer/data/keystore/ \\\n    /etc/systemd/system/clayer.service\n\n### Recovery Procedures\n\nCode example:\n# Stop service\nsudo systemctl stop clayer.service\n\n# Restore from backup\ntar -xzf clayer-backup-YYYYMMDD.tar.gz -C /\n\n# Restart service\nsudo systemctl start clayer.service\n\n---\n\n## Next Steps\n\nAfter your node is running successfully:\n- Set up [monitoring](/nodes-validation/node-monitoring)\n- Implement [security best practices](/nodes-validation/node-security)\n- Consider [becoming a validator](/nodes-validation/becoming-validator)",
    "url": "/nodes-validation/running-full-node"
  },
  {
    "title": "CLayer Development Roadmap",
    "body": "# CLayer Development Roadmap\n\n## Strategic Overview\n\nCircle Layer is building a robust, high-performance blockchain ecosystem through a carefully planned 2-phase development approach before mainnet launch. Our strategy focuses on comprehensive testing, ecosystem development, and security hardening to ensure a production-ready network.\n\n## Phase 1: Token Launch & Core Infrastructure Development (Current)\n\n### Strategic Development Approach\n\n**🚀 ERC20 Token Launch**\n- Launch CLAYER token on Ethereum to bootstrap community engagement\n- Start with modest initial liquidity to allow organic growth\n- Focus on building utility and technical development progress\n- Establish strong developer and validator community\n- Create foundation for mainnet migration infrastructure\n\n**📈 Community-Driven Development Strategy**\n- Community-first development approach with transparent roadmap\n- Focus on technical milestones and ecosystem building\n- Regular development updates and community involvement\n- Building sustainable long-term value through innovation\n- Preparing infrastructure for seamless mainnet migration\n\n### Technical Development & Community Building\n\n**🎯 Development Milestone Strategy**\n- **Foundation Phase**: Core infrastructure development and testing\n- **Community Phase**: Developer onboarding and documentation\n- **Ecosystem Phase**: Validator network establishment and testing\n- **Pre-Mainnet Phase**: Security audits and stress testing\n- **Migration Phase**: Mainnet preparation and migration infrastructure\n\n**💎 Community Engagement Focus**\n- **Technical Innovation**: Focus on breakthrough blockchain technology\n- **Developer Experience**: Superior tools and documentation\n- **Community Governance**: Early community shapes development priorities\n- **Ecosystem Growth**: Building sustainable developer ecosystem\n- **Long-term Vision**: Creating lasting value through technology advancement\n\n**🔄 Migration Infrastructure Development**\n- ERC20 holders eligible for native token migration upon mainnet launch\n- 1:1 migration ratio with transparent process\n- Migration bonus system for long-term community supporters\n- Comprehensive migration tools and support\n- Seamless transition preserving all community value\n\n### Technical Development Objectives\n- Build and test clayer blockchain infrastructure achieving ~5,000 TPS on testnet\n- Establish robust validator network and consensus mechanism\n- Create comprehensive developer tooling and documentation\n- Implement security frameworks and audit processes\n- Prepare migration infrastructure for native chain deployment\n\n### Current Development Status\n\n#### Core Infrastructure 🚀 LIVE\n- ✅ DPoS consensus implementation (Live)\n- ✅ EVM compatibility layer (Live)\n- ✅ Network optimization (Live)\n- ✅ ~5,000 TPS achievement (Live)\n- ✅ Testnet network operational (Live)\n\n#### Developer Infrastructure 🛠️ LIVE\n- ✅ RPC endpoints (https://testnet-rpc.clayer.io)\n- ✅ WebSocket endpoints (wss://testnet-rpc.clayer.io)\n- ✅ Block explorer (https://explorer-testnet.clayer.io)\n- ✅ Faucet service (https://faucet.clayer.io)\n- ✅ Web3 library compatibility (Live)\n- ✅ Developer documentation (Complete)\n\n#### Ecosystem Development 🔄 COMING SOON\n- ✅ ERC20 token deployment (Deployed)\n- 🔄 Native wallet app development (In Progress)\n- 🔄 Native DEX development (In Progress)\n- 🔄 Native bridge development (In Progress)\n\n### Target Performance Metrics\n- **Block Time**: 3 seconds\n- **Transaction Finality**: 1-3 seconds\n- **Current TPS Target**: ~5,000 TPS\n- **Target Network Uptime**: 99.95%\n- **Gas Price**: Minimum 0.000021 CLAYER\n\n### Validator Network Specifications\n- **Testnet Minimum Stake**: 32 CLAYER\n- **Mainnet Minimum Stake**: 100,000 CLAYER\n- **Maximum Validators**: 21 (testnet), 10,000 (mainnet)\n- **Hardware Requirements**: \n  - Ubuntu ≥ 20.04 LTS\n  - 32GB RAM recommended (8GB minimum)\n  - 100GB SSD storage recommended\n  - Required ports: 32668, 32669, 8545, 6060, 80, 22\n\n## Phase 2: Ecosystem Expansion & Security Hardening\n\n### Strategic Focus: Building Before Mainnet\n\nFollowing successful testnet deployment, Phase 2 focuses on comprehensive ecosystem development to ensure a robust, battle-tested platform before mainnet launch. This approach helps us avoid major exploits and security issues by thoroughly testing all components.\n\n#### 🌉 Cross-Chain Infrastructure\n- **Native Bridge Development**\n  - Multi-chain bridge architecture\n  - Initial support for 4 major trading pairs\n  - Advanced security protocols\n  - Cross-chain governance integration\n\n#### 🏦 DeFi Infrastructure  \n- **Native DEX Platform**\n  - Automated Market Maker (AMM) design\n  - 4 primary trading pairs at launch\n  - Advanced liquidity mining protocols\n  - Integration with bridge infrastructure\n\n#### 📱 User Experience & Mobile Access\n- **Native Wallet Development**\n  - iOS application (App Store ready)\n  - Android application (Play Store ready)\n  - Advanced security features\n  - Seamless DeFi integration\n  - Multi-chain support\n\n#### 🚀 Ecosystem Growth & Partnerships\n- **Startup Onboarding Program**\n  - Developer incentive programs\n  - Technical support and mentorship\n  - Grant programs for innovative projects\n  - Integration assistance\n\n- **Community Engagement**\n  - Major hackathon participation\n  - Developer conferences and workshops\n  - Technical partnerships\n  - Educational content creation\n\n#### 🛡️ Advanced Security Layer\n\n**Agentic Smart Contract Security**\n- **Pre-deployment AI Auditing**\n  - Real-time vulnerability scanning\n  - Automated exploit detection\n  - Pattern recognition for common attack vectors\n  - Integration with deployment pipeline\n\n- **Continuous Monitoring**\n  - Live transaction analysis\n  - Suspicious activity detection\n  - Automatic threat response\n  - Community alert systems\n\n**Why This Approach**: Recent incidents in the Sui ecosystem and other L1s have shown the critical importance of comprehensive pre-mainnet testing. By building a full ecosystem on testnet first, we can identify and resolve potential issues before they affect real user funds.\n\n#### 📊 Performance Optimization\n- **Parallel Execution Engine**\n  - Multi-threaded transaction processing\n  - Optimistic execution with rollback capabilities\n  - Advanced state management\n  - Memory optimization\n\n- **Target: 50,000 TPS Before Mainnet**\n  - Incremental scaling approach\n  - Stress testing with real applications\n  - Performance monitoring and optimization\n  - Infrastructure scaling preparation\n\n## Phase 3: Mainnet Launch\n\n### Launch Criteria\n- ✅ Sustained 50,000 TPS performance on testnet\n- ✅ Complete ecosystem development (Bridge, DEX, Wallets)\n- ✅ Security layer fully tested and verified\n- ✅ Multiple successful hackathons and audits\n- ✅ Thriving developer community and applications\n- ✅ Economic model validated through testnet operations\n\n### Initial Mainnet Focus\n- Genesis launch with 21 validators\n- Gradual performance scaling to 50,000 TPS\n- DeFi infrastructure activation\n- Mobile wallet deployment\n\n## Phase 4: Global Expansion & Innovation\n\n### Strategic Objectives\n- Achieve top 10 blockchain by technical innovation and adoption\n- 10M+ active users globally through superior user experience\n- 1,000+ enterprise clients via robust enterprise solutions\n- 100,000+ TPS performance with industry-leading efficiency\n- Global regulatory compliance and standards leadership\n\n### Innovation Areas\n- Advanced AI-blockchain integration\n- Universal cross-chain interoperability (50+ blockchains)\n- Enterprise-grade blockchain solutions\n- High-performance gaming and metaverse infrastructure\n- Next-generation quantum-resistant security\n\n## Key Differentiators\n\n### 🎯 **Comprehensive Pre-Mainnet Testing**\nUnlike many L1s that rush to mainnet, we're investing significant time in testnet ecosystem development to ensure production readiness.\n\n### 🤖 **AI-First Security**\nOur agentic security layer provides real-time protection that learns and adapts, preventing the types of exploits seen in other ecosystems.\n\n### ⚡ **Performance + Security Balance**\nAchieving 50,000 TPS while maintaining the highest security standards through extensive testing and optimization.\n\n### 🌍 **Full-Stack Ecosystem**\nBuilding every component (bridge, DEX, wallets) in-house ensures seamless integration and consistent user experience.\n\n## Development Resources\n\n### Technical Documentation\n- Complete developer guides\n- API documentation\n- Security best practices\n- Integration examples\n\n### Community Support\n- Developer Telegram community\n- Technical workshops\n- Office hours with clayer team\n- Grant program applications\n\n## CLayer Innovation\n\nOur approach to high-performance blockchain development focuses on:\n\n- **Parallel Execution**: Advanced multi-threaded transaction processing\n- **EVM Optimization**: Custom bytecode improvements for better performance\n- **State Management**: Efficient techniques for optimal state handling\n- **Testing Methodology**: Comprehensive testing before mainnet deployment\n\n## Get Involved\n\n### For Developers\n- Join our testnet development program\n- Contribute to ecosystem tools\n- Apply for developer grants\n- Participate in hackathons\n\n### For Validators\n- Early validator program participation\n- Network security contributions\n- Community governance involvement\n- Reward program participation\n\n### For Projects\n- Ecosystem grant applications\n- Technical integration support\n- Marketing and community support\n- Cross-promotion opportunities\n\n---\n\n*This roadmap reflects our commitment to building a production-ready, secure, and high-performance blockchain ecosystem. All timelines are estimates and may be adjusted based on development progress and security considerations.*",
    "url": "/roadmap/phase-1-testnet"
  },
  {
    "title": "Phase 2 - Ecosystem Expansion & Security Layer",
    "body": "# Phase 2 - Ecosystem Expansion & Security Layer\n\n## Overview\n\nPhase 2 represents CLayer's comprehensive ecosystem development phase, where we build a complete DeFi infrastructure, native applications, and advanced security systems before mainnet launch. This strategic approach ensures a battle-tested, production-ready ecosystem.\n\n:::info Strategic Philosophy\nRather than rushing to mainnet, we're investing significant time in building a complete ecosystem on testnet. This approach helps us avoid the major exploits and security issues that have plagued other L1 blockchains.\n:::\n\n## Core Objectives\n\n### 🎯 **Build Before Launch Strategy**\n- Create a comprehensive DeFi ecosystem\n- Test all components under real-world conditions\n- Achieve 50,000 TPS performance targets\n- Implement AI-powered security layer\n- Onboard developer and startup community\n\n### 🛡️ **Security-First Approach**\nLearning from incidents in Sui and other ecosystems, we're implementing comprehensive security measures before handling real user funds.\n\n## Key Development Areas\n\n## 🌉 Cross-Chain Infrastructure\n\n### Native Bridge Development\n\n#### Technical Specifications\n- **Multi-chain Architecture**: Support for Ethereum, BSC, Polygon, Arbitrum\n- **Security Model**: Multi-signature validation with time delays\n- **Bridge Pairs**: 4 major trading pairs at launch\n  - CLAYER/ETH\n  - CLAYER/USDC\n  - CLAYER/BTC (wrapped)\n  - CLAYER/USDT\n\n#### Development Milestones\n- 🔄 **Foundation**: Core bridge architecture\n- 🔄 **Security Phase**: Security audits and testing\n- 🔄 **Integration**: Multi-chain integration\n- 🔄 **Deployment**: Production deployment\n\n### Bridge Security Features\n- **Time-locked Withdrawals**: 24-hour delay for large transfers\n- **Multi-sig Validation**: 5-of-7 validator consensus\n- **Automated Monitoring**: AI-powered anomaly detection\n- **Emergency Pause**: Circuit breaker functionality\n\n## 🏦 Native DEX Platform\n\n### Automated Market Maker (AMM)\n\n#### Core Features\n- **Advanced AMM Design**: Improved from Uniswap V3 concepts\n- **Concentrated Liquidity**: Capital-efficient trading\n- **Dynamic Fee Structure**: Adaptive fees based on volatility\n- **MEV Protection**: Built-in protection against frontrunning\n\n#### Initial Trading Pairs\n1. **CLAYER/ETH** - Primary bridge pair\n2. **CLAYER/USDC** - Stable trading pair\n3. **CLAYER/BTC** - Bitcoin bridge pair\n4. **CLAYER/USDT** - Additional stable pair\n\n#### Liquidity Mining Program\n- **Bootstrap Incentives**: High early rewards for liquidity providers\n- **Sustainable Tokenomics**: Long-term sustainability model\n- **Community Governance**: LPs vote on fee distribution\n- **Cross-chain Rewards**: Incentives for bridge users\n\n### DEX Advanced Features\n- **Limit Orders**: Advanced order types\n- **Multi-hop Routing**: Optimal execution paths\n- **Flash Loans**: Capital-efficient DeFi composability\n- **Analytics Dashboard**: Real-time trading insights\n\n## 📱 Native Wallet Development\n\n### Mobile-First Approach\n\n#### iOS Application\n- **App Store Ready**: Full iOS 16+ compatibility\n- **Native Design**: SwiftUI implementation\n- **Advanced Security**: Biometric authentication, secure enclave\n- **DeFi Integration**: Built-in DEX and bridge access\n\n#### Android Application\n- **Play Store Ready**: Android 12+ compatibility\n- **Material Design**: Native Android experience\n- **Hardware Security**: TEE integration where available\n- **Seamless UX**: One-tap DeFi interactions\n\n#### Cross-Platform Features\n- **Multi-chain Support**: Manage multiple blockchain assets\n- **DeFi Dashboard**: Portfolio tracking and yield farming\n- **Social Features**: Easy wallet-to-wallet transfers\n- **Educational Content**: Built-in learning resources\n\n### Wallet Security Features\n- **Multi-layer Encryption**: Multiple security layers\n- **Backup & Recovery**: Social recovery options\n- **Transaction Simulation**: Preview transaction outcomes\n- **Risk Assessment**: AI-powered security warnings\n\n## 🛡️ Advanced Security Layer \n\n### Agentic Smart Contract Security\n\n#### Pre-deployment AI Auditing\n**Learning from Sui Ecosystem Incidents**\n\nCode example:\ngraph TD\n    A[Contract Submission] --> B[AI Security Scan]\n    B --> C{Vulnerabilities Found?}\n    C -->|Yes| D[Block Deployment]\n    C -->|No| E[Secondary Analysis]\n    E --> F[Pattern Recognition]\n    F --> G[Risk Assessment]\n    G --> H[Deployment Decision]\n    D --> I[Developer Notification]\n    I --> J[Fix Recommendations]\n\n#### AI Security Components\n\n**1. Vulnerability Detection Engine**\n- **Known Exploit Patterns**: Database of 10,000+ known vulnerabilities\n- **Zero-day Detection**: Machine learning for novel attack vectors\n- **Economic Attack Analysis**: MEV and flash loan attack detection\n- **Cross-contract Risk**: Multi-contract interaction analysis\n\n**2. Real-time Monitoring System**\n- **Transaction Analysis**: Live transaction pattern recognition\n- **Anomaly Detection**: Statistical analysis of unusual behavior\n- **Risk Scoring**: Real-time risk assessment for all transactions\n- **Automatic Response**: Circuit breakers for suspicious activity\n\n**3. Community Protection Features**\n- **Honeypot Detection**: Automatic identification of malicious contracts\n- **Rug Pull Prevention**: Early warning system for suspicious project behavior\n- **Social Engineering Protection**: Warnings for common scam patterns\n- **Educational Alerts**: Real-time security education for users\n\n### Security Implementation \n\n#### Phase 2.1: Foundation\n- ✅ Core AI model training\n- 🔄 Basic vulnerability scanning\n- 🔄 Pattern recognition engine\n- 🔄 Developer integration tools\n\n#### Phase 2.2: Advanced Protection\n- 🔄 Real-time monitoring system\n- 🔄 Automated response mechanisms\n- 🔄 Cross-contract analysis\n- 🔄 Community alert system\n\n#### Phase 2.3: Ecosystem Integration\n- 🔄 DEX integration protection\n- 🔄 Bridge security monitoring\n- 🔄 Wallet security features\n- 🔄 Comprehensive testing\n\n## 🚀 Startup & Community Ecosystem\n\n### Developer Onboarding Program\n\n#### Startup Support Initiative\n- **Grant Programs**: $10M+ in developer grants\n- **Technical Mentorship**: 1-on-1 support from clayer team\n- **Infrastructure Credits**: Free infrastructure for qualifying projects\n- **Go-to-market Support**: Marketing and community support\n\n#### Hackathon Strategy\n- **Major Hackathon Participation**: ETHGlobal, Solana Breakpoint, etc.\n- **CLayer Hackathons**: Quarterly ecosystem hackathons\n- **Prize Pools**: $1M+ in total prize distribution\n- **Continued Support**: Post-hackathon project incubation\n\n#### Developer Resources\n- **Comprehensive Documentation**: Complete API and SDK docs\n- **Video Tutorials**: Step-by-step development guides\n- **Sample Applications**: Full-stack example projects\n- **24/7 Support**: Developer Telegram with clayer team presence\n\n### Community Building\n- **Ambassador Program**: Global community leaders\n- **Educational Content**: Technical workshops and webinars\n- **Conference Presence**: Major blockchain conferences\n- **Partnership Program**: Strategic technology partnerships\n\n## 📊 Performance Optimization\n\n### Parallel Execution Engine\n**Target: 50,000 TPS Before Mainnet**\n\n#### Technical Approach\nImplementing our innovative approach to blockchain performance:\n\n**1. Parallel Transaction Processing**\n\nCode example:\n// Pseudo-code for parallel execution\nstruct ParallelExecutor {\n    thread_pool: ThreadPool,\n    state_manager: StateManager,\n    dependency_graph: DependencyGraph,\n}\n\nimpl ParallelExecutor {\n    fn execute_block(&self, transactions: Vec) -> BlockResult {\n        let dependencies = self.analyze_dependencies(&transactions);\n        let execution_groups = self.create_execution_groups(dependencies);\n\n        // Execute independent transaction groups in parallel\n        let results = execution_groups\n            .par_iter()\n            .map(|group| self.execute_group(group))\n            .collect();\n            \n        self.merge_results(results)\n    }\n}\n\n**2. Optimistic Execution with Rollback**\n- **Speculative Execution**: Execute transactions optimistically\n- **Conflict Detection**: Identify state conflicts post-execution\n- **Efficient Rollback**: Quick recovery from conflicts\n- **State Caching**: Optimized state management\n\n**3. Advanced State Management**\n- **Memory Optimization**: Efficient state tree structures\n- **Parallel State Access**: Lock-free state reading\n- **Predictive Loading**: AI-powered state prefetching\n- **Garbage Collection**: Optimized memory management\n\n#### Performance Testing Strategy\n- **Stress Testing**: Continuous high-load testing\n- **Real Application Load**: Testing with actual DeFi applications\n- **Network Simulation**: Multi-geography network testing\n- **Performance Monitoring**: Real-time performance analytics\n\n### Scaling Milestones\n- **Early Phase**: 10,000 TPS sustained performance\n- **Mid Phase**: 25,000 TPS with full ecosystem\n- **Late Phase**: 50,000 TPS production-ready\n\n## Success Criteria & KPIs\n\n### Technical Achievements\n- [ ] 50,000 TPS sustained performance\n- [ ] < 1 second transaction finality\n- [ ] 99.99% network uptime\n- [ ] Zero critical security incidents\n- [ ] Complete ecosystem development\n\n### Ecosystem Metrics\n- [ ] 100+ active projects built on testnet\n- [ ] $100M+ TVL on testnet DEX\n- [ ] 10,000+ active wallet users\n- [ ] 1,000+ developers in community\n- [ ] 50+ startup partnerships\n\n### Security Validation\n- [ ] 1,000+ contracts audited by AI system\n- [ ] Zero successful exploits on protected contracts\n- [ ] 99.9% vulnerability detection accuracy\n- [ ] Community security program active\n- [ ] Multiple independent security audits completed\n\n## Risk Mitigation\n\n### Learning from Other Ecosystems\n**Sui Ecosystem Analysis**: Recent incidents in the Sui ecosystem highlight the importance of:\n- Comprehensive pre-mainnet testing\n- Robust security infrastructure\n- Community education and awareness\n- Incident response capabilities\n\n### Our Mitigation Strategy\n1. **Extended Testnet Phase**: 12+ months of ecosystem testing\n2. **Security-First Development**: AI security layer before mainnet\n3. **Community Protection**: Education and real-time warnings\n4. **Incident Preparedness**: Comprehensive response protocols\n\n## Community Involvement\n\n### Beta Testing Program\n- **Early Access**: Limited beta for ecosystem components\n- **Feedback Integration**: Direct input into development process\n- **Bug Bounty Program**: Rewards for security discoveries\n- **Community Governance**: Input on ecosystem priorities\n\n### Developer Community\n- **Technical Working Groups**: Specialized development teams\n- **Open Source Contributions**: Core infrastructure contributions\n- **Documentation Improvements**: Community-driven docs\n- **Educational Content**: Community-created tutorials\n\n---\n\n*Phase 2 represents our commitment to building a comprehensive, secure, and production-ready blockchain ecosystem. By investing significant time in testnet ecosystem development, we ensure a superior experience for users, developers, and enterprises when we launch mainnet.*",
    "url": "/roadmap/phase-2-ecosystem"
  },
  {
    "title": "Phase 3 - Mainnet Launch",
    "body": "# Phase 3 - Mainnet Launch\n\n## Overview\n\nPhase 3 marks the culmination of CLayer's comprehensive development strategy with the launch of a production-ready, fully-featured blockchain network. After extensive testnet ecosystem development and security validation, we launch with a complete DeFi infrastructure and proven 50,000 TPS performance.\n\n:::info Launch Philosophy\nWe launch only when our ecosystem is battle-tested, secure, and ready for global adoption. Quality and security take precedence over speed to market.\n:::\n\n## Pre-Launch Criteria\n\n### ✅ **Technical Readiness Checklist**\n\n#### Performance Validation\n- [ ] **50,000 TPS sustained** on testnet for months\n- [ ] **Sub-second finality** consistently achieved\n- [ ] **99.99% network uptime** demonstrated\n- [ ] **Zero critical bugs** in 6-month period\n- [ ] **Load testing** with 1M+ transactions/day\n\n#### Security Validation\n- [ ] **AI security layer** protecting 1,000+ contracts\n- [ ] **Zero successful exploits** on protected testnet contracts\n- [ ] **Multiple independent audits** completed (Trail of Bits, Consensys, etc.)\n- [ ] **Bug bounty program** running for 6+ months with no critical findings\n- [ ] **Incident response procedures** tested and verified\n\n#### Ecosystem Readiness\n- [ ] **Native DEX** with $100M+ TVL on testnet\n- [ ] **Cross-chain bridge** operational with 4 trading pairs\n- [ ] **Mobile wallets** live on App Store and Play Store\n- [ ] **100+ active projects** built and tested\n- [ ] **1,000+ developers** in community\n\n#### Economic Model\n- [ ] **Tokenomics validated** through testnet operations\n- [ ] **Gas fee optimization** tested under various loads\n- [ ] **Validator economics** proven sustainable\n- [ ] **Treasury management** systems operational\n- [ ] **Governance framework** tested and refined\n\n#### Community & Token Migration\n- [ ] **ERC20 token community** established with strong developer engagement\n- [ ] **Token migration infrastructure** ready and tested\n- [ ] **Community value preservation** mechanisms in place\n- [ ] **Migration bonus system** for long-term holders\n- [ ] **Seamless transition** protocols validated\n\n## Token Migration Strategy\n\n### ERC20 to Native Chain Migration\n\n**🔄 Seamless Transition Process**\n- **1:1 Migration Ratio**: Every ERC20 CLAYER becomes 1 native CLAYER\n- **Automatic Eligibility**: All ERC20 holders automatically qualified\n- **Value Preservation**: All community-built value and momentum maintained\n- **Migration Window**: Extended period for convenient migration\n- **Technical Support**: 24/7 assistance during migration period\n\n**💎 Long-Term Holder Bonuses**\n- **6+ Month Holders**: 5% bonus native tokens\n- **12+ Month Holders**: 10% bonus native tokens\n- **18+ Month Holders**: 15% bonus native tokens\n- **Community Leaders**: Additional governance token allocation\n- **Early Supporters**: Special recognition and benefits\n\n**📈 Post-Migration Benefits**\n- **Enhanced Utility**: Full access to native chain features\n- **Staking Rewards**: Participate in network validation\n- **Governance Rights**: Vote on protocol upgrades\n- **DeFi Integration**: Access to native DEX and bridge\n- **Continued Growth**: Benefit from mainnet adoption and scaling\n\n## Mainnet Launch Phases\n\n### Phase 3.1: Genesis Launch\n\n#### Core Network Activation\n**Duration**: 2 weeks\n\n**Validator Network Bootstrap**\n- **Genesis Validators**: 21 pre-approved validators\n- **Minimum Stake**: 100,000 CLAYER per validator\n- **Maximum Validators**: 10,000 (mainnet capacity)\n- **Geographic Distribution**: Global validator set\n- **Security**: Multi-sig genesis ceremony\n\n**Initial Features**\n- ✅ Core blockchain functionality\n- ✅ Basic token transfers\n- ✅ Smart contract deployment\n- ✅ Web3 API endpoints\n- 🔄 Conservative performance limits (10,000 TPS initially)\n\n**Launch Monitoring**\n- **24/7 Network Monitoring**: Core team + community\n- **Performance Metrics**: Real-time dashboards\n- **Security Monitoring**: AI layer + manual oversight\n- **Incident Response**: Immediate response team\n\n### Phase 3.2: DeFi Infrastructure Activation (4 weeks post-genesis)\n\n#### Native DEX Launch\n**Prerequisites**: 2 weeks of stable network operation\n\n**DEX Features**\n- ✅ 4 primary trading pairs (CLAYER/ETH, USDC, BTC, USDT)\n- ✅ Automated Market Maker functionality\n- ✅ Liquidity mining rewards\n- ✅ Advanced order types\n- ✅ MEV protection\n\n**Liquidity Bootstrap**\n- **Initial Liquidity**: $50M+ from treasury and partners\n- **Incentive Programs**: High APY for early LPs\n- **Community Rewards**: Trading competitions\n- **Cross-chain Migration**: Bridge activation\n\n#### Cross-Chain Bridge Activation\n**Security**: Time-locked multi-sig with 48-hour delays\n\n**Supported Chains**\n- **Ethereum**: Primary bridge pair\n- **BSC**: High-volume trading\n- **Polygon**: Low-cost transactions  \n- **Arbitrum**: L2 integration\n\n**Bridge Security**\n- **Multi-sig Validation**: 7-of-10 validator consensus\n- **Time Delays**: 24-48 hours for large transfers\n- **Circuit Breakers**: Automatic pause mechanisms\n- **Insurance Fund**: Bridge security insurance\n\n### Phase 3.3: Full Ecosystem Activation (8 weeks post-genesis)\n\n#### Performance Scaling\n**Target**: Gradual scaling to 50,000 TPS\n\n**Scaling Schedule**\n- **Week 1-2**: 10,000 TPS (safe launch)\n- **Week 3-4**: 20,000 TPS (initial scaling)\n- **Week 5-6**: 35,000 TPS (advanced testing)\n- **Week 7-8**: 50,000 TPS (full performance)\n\n#### Mobile Wallet Launch\n**App Store Deployment**\n- ✅ iOS wallet with DeFi integration\n- ✅ Android wallet with full features\n- ✅ Social recovery mechanisms\n- ✅ Built-in DEX access\n- ✅ Cross-chain portfolio management\n\n#### Advanced Features\n- **Governance**: On-chain voting and proposals\n- **Staking**: Automated staking contracts\n- **Oracle Network**: Decentralized price feeds\n- **Advanced Security**: Full AI protection suite\n\n## Launch Success Metrics\n\n### Network Health KPIs\n\n#### Performance Metrics\n- **TPS Achievement**: 50,000 TPS within 8 weeks\n- **Finality**: Less than 1 second average\n- **Uptime**: 99.99% in first 3 months\n- **Gas Efficiency**: Less than $0.01 average transaction cost\n\n#### Security Metrics\n- **Zero Critical Incidents**: No successful attacks\n- **AI Protection**: 100% of new contracts scanned\n- **Response Time**: Less than 5 minutes for critical alerts\n- **Community Reports**: Active bug bounty participation\n\n#### Adoption Metrics\n- **TVL Growth**: $500M+ within 6 months\n- **Active Addresses**: 100,000+ unique users\n- **Transaction Volume**: 1M+ transactions/day\n- **Developer Activity**: 500+ active developers\n\n### Economic Indicators\n\n#### Token Metrics\n- **Price Stability**: Healthy price discovery through utility-driven demand\n- **Network Position**: Top 50 blockchain by technical innovation and adoption\n- **Trading Volume**: $100M+ daily volume through genuine ecosystem usage\n- **Distribution**: Healthy token distribution across stakeholders\n\n#### Ecosystem Growth\n- **Projects Launched**: 200+ live projects\n- **Enterprise Adoption**: 10+ enterprise clients\n- **Geographic Distribution**: Global user base\n- **Partnership Growth**: 50+ strategic partnerships\n\n## Risk Management & Contingency\n\n### Launch Risks\n\n#### Technical Risks\n- **Performance Degradation**: Gradual scaling approach\n- **Security Vulnerabilities**: Multiple audit layers\n- **Network Congestion**: Dynamic fee adjustment\n- **Validator Issues**: Redundant validator set\n\n#### Market Risks\n- **Low Adoption**: Aggressive incentive programs\n- **Competitive Pressure**: Unique value proposition focus\n- **Regulatory Changes**: Compliance-first approach\n- **Economic Downturn**: Conservative treasury management\n\n### Contingency Plans\n\n#### Emergency Procedures\n- **Network Halt**: Validator consensus mechanism\n- **Security Incident**: Immediate response protocols\n- **Performance Issues**: Automatic scaling adjustments\n- **Economic Attack**: Treasury intervention capabilities\n\n#### Recovery Mechanisms\n- **State Rollback**: Tested rollback procedures\n- **Validator Replacement**: Quick validator onboarding\n- **Liquidity Support**: Treasury market making\n- **Community Communication**: Transparent incident reporting\n\n## Post-Launch Operations\n\n### Month 1-3: Stabilization\n- **Performance Optimization**: Real-world tuning\n- **Security Monitoring**: Enhanced threat detection\n- **Community Support**: 24/7 developer assistance\n- **Feature Refinement**: Based on user feedback\n\n### Month 4-6: Growth Acceleration\n- **Marketing Campaigns**: Global awareness building\n- **Partnership Expansion**: Strategic alliances\n- **Feature Development**: Community-requested features\n- **Ecosystem Grants**: Continued developer support\n\n### Month 7-12: Market Leadership\n- **Innovation Leadership**: First-to-market features\n- **Global Expansion**: International market entry\n- **Enterprise Solutions**: B2B product development\n- **Research & Development**: Next-generation features\n\n## Community & Governance\n\n### Launch Community\n- **Global Events**: Mainnet launch celebrations\n- **Developer Conferences**: Technical presentations\n- **Educational Content**: Comprehensive tutorials\n- **Ambassador Program**: Community leaders\n\n### Governance Activation\n- **DAO Formation**: Decentralized governance structure\n- **Proposal System**: Community-driven development\n- **Treasury Management**: Transparent fund allocation\n- **Voting Mechanisms**: Stake-weighted governance\n\n## Long-term Vision\n\n### Year 1 Goals\n- **Industry Recognition**: Top 20 blockchain by adoption\n- **Technical Leadership**: Performance and security benchmark\n- **Ecosystem Maturity**: Self-sustaining developer ecosystem\n- **Global Presence**: Worldwide user and developer base\n\n### Strategic Positioning\n- **DeFi Hub**: Premier destination for DeFi applications\n- **Enterprise Blockchain**: Preferred choice for business applications\n- **Innovation Platform**: Leading edge of blockchain technology\n- **Community-Driven**: Decentralized and community-governed\n\n---\n\n*Phase 3 represents the culmination of our methodical approach to blockchain development. By launching with a proven ecosystem, validated security, and demonstrated performance, we set the foundation for sustained success and industry leadership.*",
    "url": "/roadmap/phase-3-mainnet"
  },
  {
    "title": "Phase 4 - Global Expansion & Innovation",
    "body": "# Phase 4 - Global Expansion & Innovation\n\n## Overview\n\nPhase 4 represents CLayer's long-term vision for global expansion and innovation - this is future strategic planning, not current operations. These plans outline our aspirational goals for establishing market leadership after successful mainnet deployment and ecosystem maturity.\n\n:::danger Future Vision Only\n🚧 **IMPORTANT: This represents future strategic vision, not current operational reality**. CLayer is currently in testnet development phase. These expansion plans are contingent on successful completion of Phases 1-3.\n\n**Current Status**: Phase 1 (testnet development) - These global expansion plans are 2+ years in the future.\n:::\n\n## Strategic Objectives\n\n### 🌍 **Global Market Leadership**\n- Achieve top 10 blockchain by technical innovation and ecosystem adoption\n- Establish presence in all major global markets\n- Become the preferred platform for enterprise blockchain solutions\n- Lead innovation in blockchain technology and DeFi\n\n### 🏢 **Enterprise & Institutional Adoption**\n- Onboard major corporations and financial institutions\n- Develop enterprise-grade blockchain solutions\n- Establish regulatory compliance frameworks\n- Create institutional-grade security and reliability\n\n### 🚀 **Next-Generation Innovation**\n- Pioneer breakthrough blockchain technologies\n- Advance AI-blockchain integration\n- Lead cross-chain interoperability standards\n- Develop quantum-resistant security measures\n\n## Phase 4 Development Areas\n\n## 🌐 Global Market Expansion\n\n### Regional Infrastructure\n\n#### Geographic Expansion\n- **North America**: Major city presence (NYC, SF, Toronto)\n- **Europe**: EU compliance hub (Berlin, Amsterdam, Zurich)\n- **Asia-Pacific**: Regional headquarters (Singapore, Tokyo, Seoul)\n- **Latin America**: Growth markets (São Paulo, Mexico City)\n- **Middle East/Africa**: Emerging markets (Dubai, Cape Town)\n\n#### Regional Partnerships\n- **Payment Processors**: Visa, Mastercard, local payment networks\n- **Banking Partners**: Major banks in each region\n- **Regulatory Bodies**: Proactive compliance in all jurisdictions\n- **Technology Partners**: Cloud providers, telecom companies\n\n#### Localization Strategy\n- **Multi-language Support**: 15+ languages for wallets and docs\n- **Local Compliance**: Meet regulatory requirements in each market\n- **Cultural Adaptation**: Region-specific features and partnerships\n- **Local Community**: Native developer and user communities\n\n### Mass Market Adoption\n**Target**: 10M+ active users by end of Phase 4\n\n#### Consumer Applications\n- **Social DeFi**: Social media with integrated DeFi features\n- **Gaming Integration**: Blockchain gaming platform\n- **Digital Identity**: Decentralized identity solutions\n- **Supply Chain**: Transparent supply chain tracking\n\n#### User Experience Innovation\n- **Zero-Knowledge Onboarding**: Privacy-preserving user registration\n- **Gasless Transactions**: Meta-transactions for seamless UX\n- **Social Recovery 2.0**: Advanced account recovery mechanisms\n- **AI Personal Assistant**: Blockchain interaction assistant\n\n## 🏢 Enterprise & Institutional Solutions\n\n### Enterprise Blockchain Platform\n\n#### B2B Product Suite\n- **Enterprise DEX**: Institutional-grade trading platform\n- **Corporate Treasury**: Blockchain-based treasury management\n- **Supply Chain Solutions**: End-to-end supply chain transparency\n- **Digital Asset Management**: Institutional asset custody and management\n\n#### Institutional Infrastructure\n- **Custody Solutions**: Bank-grade asset custody\n- **Compliance Tools**: Automated regulatory reporting\n- **Risk Management**: Real-time risk assessment and monitoring\n- **Integration APIs**: Seamless integration with existing systems\n\n#### Financial Services Integration\n- **Central Bank Digital Currencies (CBDCs)**: Infrastructure for digital currencies\n- **Traditional Finance Bridge**: Integration with legacy financial systems\n- **Institutional Trading**: High-frequency trading infrastructure\n- **Regulatory Reporting**: Automated compliance and reporting tools\n\n### Enterprise Adoption Program\n**Target**: 1,000+ enterprise clients\n\n#### Onboarding Support\n- **Dedicated Account Management**: White-glove service for enterprises\n- **Custom Development**: Tailored blockchain solutions\n- **Training Programs**: Comprehensive staff training\n- **Migration Assistance**: Seamless transition from legacy systems\n\n#### Success Metrics\n- **Enterprise Revenue**: $100M+ annual enterprise revenue\n- **Fortune 500 Adoption**: 50+ Fortune 500 companies\n- **Government Contracts**: 20+ government implementations\n- **Banking Partners**: 100+ financial institution integrations\n\n## 🔬 Next-Generation Technology Innovation\n\n### Advanced Performance Optimization\n**Target**: 100,000+ TPS with global distribution\n\n#### Breakthrough Performance\n- **Parallel Sharding**: Advanced state sharding implementation\n- **Edge Computing**: Distributed processing at network edge\n- **Quantum-Resistant Security**: Post-quantum cryptography\n- **AI-Optimized Consensus**: Machine learning enhanced consensus\n\n#### Global Network Architecture\n- **Multi-Region Deployment**: Globally distributed infrastructure\n- **Edge Nodes**: Localized processing for reduced latency\n- **Content Delivery**: Blockchain-based CDN\n- **Disaster Recovery**: Multi-region backup and failover\n\n### AI-Blockchain Integration 2.0\n\n#### Advanced AI Features\n- **Predictive Analytics**: AI-powered market and behavior prediction\n- **Automated Optimization**: Self-optimizing network parameters\n- **Intelligent Routing**: AI-based transaction routing\n- **Smart Contract AI**: AI-enhanced smart contract capabilities\n\n#### AI Security Evolution\n- **Behavioral Analysis**: Advanced user behavior monitoring\n- **Threat Prediction**: Predictive security threat modeling\n- **Automated Response**: Sophisticated incident response automation\n- **Zero-Day Protection**: AI detection of unknown vulnerabilities\n\n### Cross-Chain Leadership\n**Vision**: Become the premier cross-chain hub\n\n#### Interoperability Innovation\n- **Universal Bridge Protocol**: Connect to 50+ blockchains\n- **Cross-Chain Smart Contracts**: Multi-chain contract execution\n- **Unified Liquidity**: Aggregated liquidity across chains\n- **Cross-Chain Governance**: Multi-blockchain governance systems\n\n#### Standards Development\n- **Industry Standards**: Lead development of interoperability standards\n- **Open Source Protocols**: Contribute to cross-chain open source\n- **Research & Development**: Advance interoperability research\n- **Community Building**: Foster cross-chain developer community\n\n## 📊 Ecosystem Super-Growth\n\n### Developer Ecosystem Expansion\n**Target**: 10,000+ active developers\n\n#### Advanced Developer Tools\n- **No-Code Platform**: Visual smart contract development\n- **AI Development Assistant**: AI-powered coding assistance\n- **Advanced Testing Suite**: Comprehensive testing and simulation\n- **Performance Analytics**: Deep performance insights and optimization\n\n#### Developer Incentives 2.0\n- **Advanced Grant Program**: $100M+ developer fund\n- **Revenue Sharing**: Developers earn from their applications\n- **Accelerator Program**: CLayer startup accelerator\n- **Global Hackathons**: Worldwide hackathon series with $10M+ prizes\n\n### DeFi 3.0 Innovation\n**Vision**: Pioneer next-generation DeFi\n\n#### Advanced DeFi Features\n- **AI-Powered Trading**: Intelligent automated trading strategies\n- **Dynamic Yield Optimization**: AI-optimized yield farming\n- **Risk-Adjusted Lending**: Sophisticated risk assessment\n- **Synthetic Assets**: Comprehensive synthetic asset platform\n\n#### Financial Innovation\n- **Prediction Markets**: Decentralized prediction and betting\n- **Insurance Protocols**: Blockchain-based insurance products\n- **Real-World Assets**: Tokenization of physical assets\n- **Algorithmic Central Bank**: Decentralized monetary policy\n\n### Gaming & Metaverse Integration\n\n#### Gaming Platform\n- **High-Performance Gaming**: 100,000+ TPS gaming infrastructure\n- **NFT Marketplace**: Advanced NFT trading and gaming\n- **Virtual Worlds**: Metaverse development platform\n- **Play-to-Earn Economy**: Sophisticated gaming economics\n\n#### Metaverse Infrastructure\n- **Virtual Land**: Decentralized virtual real estate\n- **Digital Identity**: Avatar and identity systems\n- **Virtual Commerce**: E-commerce in virtual environments\n- **Social Features**: Social networking in the metaverse\n\n## 🎯 Success Metrics & KPIs\n\n### Network Performance\n- **100,000+ TPS**: Peak performance capability\n- **Less than 100ms Latency**: Global average transaction confirmation\n- **99.999% Uptime**: Five-nines reliability\n- **$0.001 Transactions**: Ultra-low transaction costs\n\n### Adoption Metrics\n- **10M+ Active Users**: Monthly active users globally\n- **$100B+ TVL**: Total value locked in ecosystem\n- **1,000+ Enterprise Clients**: Business adoption\n- **10,000+ Active Developers**: Developer ecosystem\n\n### Market Position\n- **Top 5 Blockchain**: By technical innovation and ecosystem adoption\n- **50+ Country Presence**: Global regulatory compliance\n- **1,000+ Partnerships**: Strategic alliances worldwide\n- **Network Valuation**: Sustained value through utility and innovation\n\n### Innovation Leadership\n- **50+ Patents**: Blockchain technology patents\n- **100+ Research Papers**: Academic and technical publications\n- **20+ Industry Awards**: Recognition for innovation\n- **Global Tech Leader**: Acknowledged technology leadership\n\n## 🛡️ Advanced Security & Compliance\n\n### Global Regulatory Compliance\n\n#### Regulatory Framework\n- **Multi-Jurisdiction Compliance**: Meet requirements globally\n- **Proactive Engagement**: Work with regulators worldwide\n- **Standards Development**: Help create industry standards\n- **Transparency Reports**: Regular public compliance reporting\n\n#### Institutional Security\n- **SOC 2 Type II**: Enterprise security certification\n- **ISO 27001**: International security standards\n- **Bank-Grade Security**: Financial institution level security\n- **Government Compliance**: Meet government security requirements\n\n### Advanced Threat Protection\n**Vision**: Most secure blockchain platform globally\n\n#### Security Innovation\n- **Quantum-Resistant**: Preparation for quantum computing\n- **Zero-Knowledge Security**: Privacy-preserving security\n- **Formal Verification**: Mathematical security proofs\n- **Real-Time Monitoring**: Advanced threat detection\n\n## 🌟 Community & Governance Evolution\n\n### Decentralized Governance 2.0\n\n#### Advanced DAO Structure\n- **Multi-Layer Governance**: Specialized governance councils\n- **Liquid Democracy**: Flexible voting delegation\n- **Global Representation**: Worldwide governance participation\n- **Expert Councils**: Technical and economic advisory bodies\n\n#### Community Empowerment\n- **Community Treasury**: $1B+ community-controlled fund\n- **Proposal System**: Advanced proposal and voting mechanisms\n- **Transparency**: Full transparency in all governance activities\n- **Community Rewards**: Incentives for governance participation\n\n### Global Community Program\n**Target**: 1M+ community members\n\n#### Ambassador Network\n- **Global Ambassadors**: 1,000+ ambassadors worldwide\n- **Regional Leaders**: Community leaders in each major market\n- **Educational Program**: Comprehensive blockchain education\n- **Cultural Events**: Local meetups and conferences\n\n## 🔮 Future Vision & Research\n\n### Emerging Technology Research\n\n#### Research Areas\n- **Quantum Computing**: Quantum-resistant and quantum-enhanced blockchain\n- **Space Technology**: Satellite-based blockchain infrastructure\n- **IoT Integration**: Blockchain for Internet of Things\n- **Biotech Integration**: Blockchain applications in biotechnology\n\n#### Academic Partnerships\n- **University Collaboration**: Research partnerships with top universities\n- **Research Grants**: Fund blockchain research globally\n- **Academic Publications**: Contribute to academic knowledge\n- **Student Programs**: Internships and educational programs\n\n### Sustainability & Social Impact\n**Vision**: Carbon-negative blockchain with positive social impact\n\n#### Environmental Leadership\n- **Carbon Negative**: Offset more carbon than we produce\n- **Green Energy**: 100% renewable energy for operations\n- **Sustainability Reporting**: Transparent environmental impact\n- **Green Innovation**: Blockchain solutions for environmental challenges\n\n#### Social Impact\n- **Financial Inclusion**: Banking the unbanked globally\n- **Education Access**: Blockchain education for underserved communities\n- **Healthcare Innovation**: Blockchain solutions for global health\n- **Poverty Reduction**: Economic empowerment through blockchain\n\n---\n\n*Phase 4 establishes CLayer as the global leader in blockchain technology, serving millions of users and pioneering the future of decentralized systems. Through global scale, breakthrough innovation, and positive global impact, we fulfill our vision of powering the decentralized economy of tomorrow.*",
    "url": "/roadmap/phase-4-expansion"
  },
  {
    "title": "Disclaimer",
    "body": "# Disclaimer\n\nDear user (here in after referred as \"you\"):\n\nCircle Layer Blockchain (here in after referred to as \"CLayer Blockchain\" or \"we\") is a decentralized public chain. Developers around the world can deploy applications on CLayer, and all users can read, send and trade on CLayer. Due to the decentralized nature, we would like to remind you of the risks of third-party DAPPs as follows:\n\n1. Whether you participate in or use the DAPP on CLayer through any trading platform, wallet, it is your personal free choice and we do not recommend it to you;\n\n2. We are not responsible for the review of any third-party DAPP, nor do we make any promises or guarantees for the validity, accuracy, correctness, reliability, quality, stability, completeness and timeliness of the technology and information involved in its services;\n\n3. You bear all responsibilities arising from the use of third-party DAPP services;\n\n4. Whether the third-party DAPP service meets the laws and regulations or relevant policy requirements of your jurisdiction, please make your own judgment and assessment. We do not provide any evaluation opinions, but please be sure to strictly abide by the laws of your jurisdiction;\n\n5. Your use of a third-party DAPP, including but not limited to legal issues, contractual liability issues, economic loss issues, etc., will be resolved by you and the third-party DAPP, and we are not responsible for this;\n\n6. CLayer will not share your personal information with any third-party DAPP unless you have your explicit consent. After obtaining your explicit consent, all legal responsibilities and disputes arising from the third-party DAPP obtaining your personal information shall still be borne by you and resolved with the third-party DAPP;\n\n7. CLayer has no right to provide you with any third-party DAPP developer's personal information, unless obtaining the other party's consent or the request of the relevant department, we will try our best to assist but cannot guarantee that we can effectively obtain the other party's information in a timely manner.\n\nFinally, we remind you again: we do not recommend, suggest, or guide you to use any third-party DAPP services.",
    "url": "/security/disclaimer"
  },
  {
    "title": "Integrity and Compliance",
    "body": "# Integrity and Compliance\n\nCircle Layer Blockchain Company is committed to the highest standards of business conduct in our relationships with each of our stakeholders, including customers, business partners, shareholders and other relevant parties, CLayer Blockchain has always adhered to the principles of fairness, impartiality and openness in opening up resources to developers. Any support policy has corresponding evaluation criteria, of which open and transparent on-chain data is an important basis for projects to receive support.\n\nWe mandate that our collaborators conduct all business with outside parties in a manner that reflects our value of integrity. We will not tolerate any form of unethical or unlawful conduct. Our stakeholders' concerns are important to us and anyone is welcome to contact us at  compliance@clayer.io to report any questionable or allegedly unethical or illegal behavior.\n\nAnyone submitting a complaint or question is encouraged to provide his or her name, contact information and appropriate details of the questionable or allegedly unethical or illegal behavior so that we may contact him or her directly, if necessary. We will handle all inquiries discreetly and make every effort to maintain, within the limits allowable by the applicable laws and regulations, the confidentiality of any inquiry or report. We will conduct all investigations in accordance with applicable laws and regulations.\n\nThis reporting email address is highly confidential and reports directly to the top management. For valid reports, CLayer Blockchain will pay high attention to them and protect the privacy of the whistleblower. \n\nAttention：all information about cooperation, investment and support policy of CLayer Blockchain will be released through the official website announcement and other official channels. Please stay vigilant and do not listen to or believe false propaganda. At the same time, CLayer Blockchain will reserve the right to pursue related false propaganda.",
    "url": "/security/integrity-compliance"
  },
  {
    "title": "Risk Warnings & Security",
    "body": "# Risk Warnings & Security\n\n## Overview\n\nCircle Layer Blockchain is committed to providing a secure development and testing environment. Users and developers must be aware of important security considerations and risks when participating in our ecosystem.\n\n## General Risk Warnings\n\n### Free Participation Environment\n- **No Charges**: All users and developers can participate in the current test environment and subsequent development stages completely **FREE OF CHARGE**\n- **No Payment Required**: There are **NO CHARGING SCENARIOS** in the test environment\n- **Scam Alert**: Be extremely cautious of anyone requesting payment for testnet access or features\n\n### Test Environment vs Mainnet\n\n#### Critical Distinctions\nUsers **MUST** understand and distinguish between different network environments:\n\n| Environment | Purpose | Asset Value | Risk Level |\n|------------|---------|-------------|------------|\n| **Testnet** | Development & Testing | **NO VALUE** | Low |\n| **Mainnet** | Production | **REAL VALUE** | High |\n\n#### Testnet Warnings\n- **No Asset Value**: Assets generated in the test environment have **NO ECONOMIC VALUE**\n- **Testing Only**: Testnet tokens are for development and testing purposes only\n- **No Trading Value**: Testnet CLAYER tokens cannot be traded or exchanged for real value\n- **Reset Possibility**: Testnet data may be reset during development\n\n#### Mainnet Precautions\n- **Real Assets**: Mainnet will involve real economic value and risk\n- **Irreversible Transactions**: Mainnet transactions cannot be reversed\n- **Security Critical**: Proper security practices are essential\n- **Financial Risk**: Real financial loss is possible on mainnet\n\n## Fraud Prevention\n\n### Counterfeit Currency Fraud\n**⚠️ CRITICAL WARNING**: Protect yourself from counterfeit currency scams:\n\n- **Testnet Tokens Have No Value**: Any attempt to sell or trade testnet CLAYER is fraudulent\n- **Fake Token Sales**: Beware of scammers selling \"early access\" or \"pre-sale\" tokens\n- **Impersonation Scams**: Scammers may impersonate team members or create fake platforms\n- **Verify Authenticity**: Only use official CLayer platforms and communication channels\n\n### Official Channel Verification\nCircle Layer **ONLY** announces official information through verified channels:\n\n#### Official Communication Channels\n- **Official Website**: [clayer.io](https://clayer.io)\n- **Official Documentation**: This documentation site\n- **Official Social Media**: Verified accounts only\n- **Official Email**: @clayer.io domain only\n\n#### Red Flags - Unofficial/Fraudulent\n- **Unofficial Websites**: Similar-looking but different domain names\n- **Unverified Social Media**: Accounts without official verification\n- **Email Scams**: Emails from non-@clayer.io addresses\n- **Social Media Scams**: Unverified community channels and impersonators\n\n### Website Security\n\n#### Official Website Protection\n- **Correct Domain**: Always verify you're on **clayer.io**\n- **HTTPS Security**: Ensure connection is secure (https://)\n- **Bookmark Official Site**: Avoid typing URLs manually\n- **Double-Check URLs**: Be vigilant about similar-looking domains\n\n#### Common Phishing Tactics\n- **Domain Spoofing**: clayer.io, clayer.com, clayer.net\n- **Subdomain Attacks**: fake.clayer.io-scam.com\n- **URL Shorteners**: Links that hide the real destination\n- **Urgent Messages**: Fake urgent security warnings or deadlines\n\n## Private Key Security\n\n### Private Key Protection\n**🔐 NEVER SHARE YOUR PRIVATE KEYS**\n\n- **Never Share**: Private keys should NEVER be shared with anyone\n- **Team Never Asks**: CLayer team will NEVER ask for private keys\n- **Secure Storage**: Use hardware wallets or secure storage solutions\n- **Backup Safely**: Keep secure, offline backups of your keys\n\n### Phishing Protection\nCommon private key phishing attempts:\n\n- **Fake Support**: Impersonators claiming to provide \"support\"\n- **Urgent Warnings**: Fake security alerts requesting key verification\n- **Prize Scams**: Claims you've won something requiring key access\n- **Migration Scams**: Fake token migration or upgrade processes\n\n### Wallet Security Best Practices\n- **Official Wallets Only**: Use only verified wallet applications\n- **Secure Networks**: Never enter keys on public WiFi\n- **Screen Recording**: Be aware of screen recording malware\n- **Browser Security**: Use secure, updated browsers\n\n## Investment & Financial Warnings\n\n### No Investment Advice\n- **Not Financial Advice**: CLayer documentation provides technical information only\n- **DYOR**: Always do your own research before any financial decisions\n- **Regulatory Compliance**: Ensure compliance with local regulations\n- **Risk Assessment**: Understand and assess your personal risk tolerance\n\n### Development Stage Risks\n- **Early Development**: CLayer is in active development\n- **Technical Risks**: Software bugs and vulnerabilities possible\n- **Network Changes**: Protocol may change during development\n- **No Guarantees**: No guarantees about future performance or value\n\n## Compliance & Reporting\n\n### Integrity Standards\nCircle Layer maintains the highest standards of business conduct:\n\n- **Fair Practices**: Open, transparent, and fair resource allocation\n- **Evaluation Criteria**: All support policies have clear, public criteria\n- **On-chain Transparency**: Open and transparent on-chain data\n- **Community-First**: Developer and community interests prioritized\n\n### Reporting Security Issues\nIf you encounter suspicious activity or security concerns:\n\n#### Report To\n- **Security Issues**: admin@clayer.io\n- **Provide Details**: Include as much detail as possible\n- **Contact Information**: Provide your contact details for follow-up\n- **Confidentiality**: All reports handled with strict confidentiality\n\n#### What To Report\n- **Questionable Behavior**: Suspicious or unethical conduct\n- **Security Vulnerabilities**: Technical security issues\n- **Fraud Attempts**: Scams or fraudulent activity\n- **Impersonation**: Fake accounts or websites\n\n### Response Process\n- **High Priority**: All valid reports receive immediate attention\n- **Investigation**: Thorough investigation following applicable laws\n- **Privacy Protection**: Reporter privacy protection within legal limits\n- **Top Management**: Direct reporting to senior leadership\n- **Legal Action**: CLayer reserves right to pursue legal action against fraud\n\n## Development Safety Guidelines\n\n### Safe Development Practices\n- **Testnet First**: Always test on testnet before mainnet\n- **Code Reviews**: Implement thorough code review processes\n- **Security Audits**: Conduct security audits for production code\n- **Incremental Deployment**: Deploy features incrementally\n\n### Smart Contract Security\n- **Audit Requirements**: Require audits for mainnet contracts\n- **Testing Coverage**: Implement comprehensive test coverage\n- **Upgrade Mechanisms**: Plan for secure contract upgrades\n- **Emergency Procedures**: Implement emergency pause mechanisms\n\n## Community Guidelines\n\n### Communication Ethics\n- **Respectful Interaction**: Maintain respectful community discourse\n- **Accurate Information**: Share only verified, accurate information\n- **No Financial Advice**: Avoid providing financial advice to others\n- **Report Suspicious Activity**: Help protect the community by reporting issues\n\n### Educational Responsibility\n- **Stay Informed**: Keep up with official announcements and updates\n- **Verify Information**: Cross-check information with official sources\n- **Share Knowledge**: Help educate other community members safely\n- **Continuous Learning**: Stay updated on security best practices\n\n## Legal Disclaimers\n\n### Limitation of Liability\n- **Use at Own Risk**: Users participate at their own risk\n- **No Warranties**: No guarantees about software performance\n- **Loss Prevention**: Users responsible for their own asset security\n- **Legal Compliance**: Users must comply with applicable laws\n\n### Regulatory Considerations\n- **Local Laws**: Comply with local cryptocurrency regulations\n- **Tax Obligations**: Understand and fulfill tax obligations\n- **AML/KYC**: Comply with anti-money laundering requirements where applicable\n- **Legal Advice**: Consult legal professionals for complex questions\n\n---\n\n**Remember**: When in doubt, always verify through official channels and prioritize security over convenience. The CLayer team will never ask for private keys, passwords, or request payment for testnet access.",
    "url": "/security/risk-warnings"
  }
]