[
  {
    "title": "benefits",
    "body": " # AI Security Benefits  ## Overview  Circle Layer's AI-powered security features provide several key benefits for developers and users:  ## Key Benefits  ### 1. Enhanced Threat Detection - Real-time monitoring of smart contract interactions - Pattern recognition for suspicious activities - Automated threat response system  ### 2. Reduced Risk - Proactive vulnerability scanning - Automated security audits - Risk assessment and scoring  ### 3. Cost Efficiency - Lower security audit costs - Reduced insurance premiums - Minimized downtime due to security incidents  ### 4. Developer Support - Automated security recommendations - Code quality analysis - Best practices enforcement  ## Implementation  Our AI security system is built on advanced machine learning models that continuously learn from: - Network activity patterns - Known attack vectors - Security audit results - Community feedback  ## Getting Started  To enable AI security features in your project:  1. Enable AI security in your p",
    "url": "/docs/ai-security/benefits"
  },
  {
    "title": "how-it-works",
    "body": " # How AI Security Works  ## System Architecture  Circle Layer's AI security system consists of several key components:  ### 1. Data Collection Layer - Transaction monitoring - Contract interaction tracking - Network state analysis - User behavior patterns  ### 2. Analysis Engine - Machine learning models - Pattern recognition - Anomaly detection - Risk assessment algorithms  ### 3. Response System - Automated alerts - Threat mitigation - Security recommendations - Incident response  ## Security Features  ### Real-time Monitoring - Continuous transaction analysis - Smart contract interaction tracking - Network state monitoring - User behavior analysis  ### Threat Detection - Pattern recognition - Anomaly detection - Risk scoring - Vulnerability assessment  ### Automated Response - Immediate threat mitigation - Security alerts - Incident response - Recovery procedures  ## Integration  ### For Developers 1. Enable AI security in your project 2. Configure security parameters 3. Monitor se",
    "url": "/docs/ai-security/how-it-works"
  },
  {
    "title": "rpc-endpoints",
    "body": " # RPC Endpoints  ## Overview  Circle Layer provides multiple RPC endpoints for interacting with the network:  ## Public Endpoints  ### Mainnet ```bash https://rpc.circlelayer.com wss://rpc.circlelayer.com ```  ### Testnet ```bash https://testnet-rpc.circlelayer.com wss://testnet-rpc.circlelayer.com ```  ## Authentication  Some endpoints require authentication:  1. Get API key from Circle Layer dashboard 2. Include in request headers: ```bash Authorization: Bearer YOUR_API_KEY ```  ## Rate Limits  - Free tier: 100 requests/minute - Pro tier: 1000 requests/minute - Enterprise: Custom limits  ## Methods  ### Standard Ethereum Methods - eth_getBalance - eth_sendTransaction - eth_getTransactionReceipt - eth_blockNumber  ### Circle Layer Specific Methods - cl_getValidatorInfo - cl_getStakingRewards - cl_getNetworkStats  ## Examples  ### Get Balance ```javascript const response = await fetch('https://rpc.circlelayer.com'",
    "url": "/docs/apis-sdks/rpc-endpoints"
  },
  {
    "title": "web3-libraries",
    "body": " # Web3 Libraries  ## Overview  Circle Layer supports various Web3 libraries for interacting with the network:  ## Supported Libraries  ### 1. ethers.js ```javascript import { ethers } from 'ethers';  const provider = new ethers.providers.JsonRpcProvider('https://rpc.circlelayer.com'); const wallet = new ethers.Wallet(privateKey, provider); ```  ### 2. web3.js ```javascript import Web3 from 'web3';  const web3 = new Web3('https://rpc.circlelayer.com'); const account = web3.eth.accounts.privateKeyToAccount(privateKey); ```  ### 3. Web3.py ```python from web3 import Web3  w3 = Web3(Web3.HTTPProvider('https://rpc.circlelayer.com')) account = w3.eth.account.from_key(private_key) ```  ## Features  ### Common Functionality - Account management - Transaction signing - Contract interaction - Event listening  ### Circle Layer Specific - Staking operations - Validator management - Network statistics - Custom RPC methods  ## Best Practices",
    "url": "/docs/apis-sdks/web3-libraries"
  },
  {
    "title": "EVM Compatibility",
    "body": " # EVM Compatibility  Understand how Circle Layer maintains compatibility with the Ethereum Virtual Machine (EVM) and what it means for developers.  ## EVM Features  - Full bytecode compatibility - Same opcodes and gas model - Compatible with existing tools - Seamless dApp migration  ## Development Benefits  - Reuse existing smart contracts - Familiar development environment - Compatible with popular frameworks - Access to Ethereum tooling  ## Migration Guide  Steps to migrate existing Ethereum dApps to Circle Layer:  1. Contract Deployment 2. Frontend Integration 3. Testing and Verification 4. Production Deployment",
    "url": "/docs/architecture/evm-compatibility"
  },
  {
    "title": "High TPS",
    "body": " # High TPS  Learn about Circle Layer's high transaction throughput capabilities and how it achieves superior performance.  ## Performance Metrics  - Target TPS: 10,000+ - Block Time: 2 seconds - Transaction Finality: < 10 seconds - Network Capacity: Scalable  ## Technical Implementation  - Optimized consensus mechanism - Efficient block propagation - Advanced networking - Resource optimization  ## Use Cases  - High-frequency trading - Gaming applications - Social platforms - Enterprise solutions - DeFi protocols",
    "url": "/docs/architecture/high-tps"
  },
  {
    "title": "POS Consensus Mechanism",
    "body": " # POS Consensus Mechanism  Learn about Circle Layer's Proof of Stake consensus mechanism and how it ensures network security and efficiency.  ## Overview  Circle Layer implements a modern Proof of Stake consensus mechanism that provides: - Energy efficiency - Enhanced security - Faster finality - Reduced centralization risks  ## How It Works  1. Validator Selection 2. Block Production 3. Consensus Process 4. Reward Distribution  ## Security Features  - Slashing conditions - Validator rotation - Stake delegation - Network participation incentives",
    "url": "/docs/architecture/pos-consensus"
  },
  {
    "title": "contribution-guidelines",
    "body": " # Contribution Guidelines  ## Overview  Welcome to the Circle Layer community! This guide will help you contribute to our project.  ## How to Contribute  ### 1. Code Contributions - Fork the repository - Create a feature branch - Make your changes - Submit a pull request  ### 2. Documentation - Improve existing docs - Add new tutorials - Fix typos and errors - Update outdated information  ### 3. Bug Reports - Use the issue tracker - Provide detailed steps to reproduce - Include error messages - Specify your environment  ## Development Workflow  1. **Setup**    ```bash    git clone https://github.com/your-org/circle-layer.git    cd circle-layer    npm install  2. **Testing**    ```bash    npm run test    npm run lint  3. **Building**    ```bash    npm run build  ## Code Standards  - Follow the style guide - Write unit tests - Document your code - Keep commits atomic  ## Review Process  1. Submit PR 2. Automated checks 3. Code review 4. Merge or request changes  ## Getting Help  - Join ",
    "url": "/docs/community/contribution-guidelines"
  },
  {
    "title": "forums-social-media",
    "body": " # Forums and Social Media  ## Community Channels  ### Official Forums - [Circle Layer Forum](https://forum.circlelayer.com) - [Technical Discussions](https://forum.circlelayer.com/technical) - [General Discussion](https://forum.circlelayer.com/general)  ### Social Media - [Twitter](https://twitter.com/circlelayer) - [Discord](https://discord.gg/circlelayer) - [Telegram](https://t.me/circlelayer) - [Reddit](https://reddit.com/r/circlelayer)  ## Community Guidelines  ### 1. Be Respectful - Treat others with respect - No harassment or discrimination - Keep discussions constructive  ### 2. Stay On Topic - Use appropriate channels - Follow category guidelines - Avoid spam  ### 3. Share Knowledge - Help others learn - Share your experiences - Contribute to discussions  ## Getting Support  ### Technical Support - Use the technical forum - Check documentation first - Provide necessary details  ### General Questions - Use general discussion - Search before asking - Be specific  ## Community Ev",
    "url": "/docs/community/forums-social-media"
  },
  {
    "title": "feature-comparison",
    "body": " # Feature Comparison  ## Overview  Compare Circle Layer's features with other blockchain platforms:  ## Technical Features  ### Performance | Feature | Circle Layer | Ethereum | Solana | |---------|-------------|----------|---------| | TPS | 10,000+ | 15-30 | 65,000 | | Block Time | 2s | 12s | 0.4s | | Finality | 4s | 6m | 0.4s |  ### Scalability | Feature | Circle Layer | Ethereum | Solana | |---------|-------------|----------|---------| | Sharding | Yes | Planned | No | | Layer 2 | Yes | Yes | No | | Cross-chain | Yes | Yes | Limited |  ### Security | Feature | Circle Layer | Ethereum | Solana | |---------|-------------|----------|---------| | AI Security | Yes | No | No | | Formal Verification | Yes | Limited | No | | Bug Bounty | Yes | Yes | Yes |  ## Developer Experience  ### Tools | Feature | Circle Layer | Ethereum | Solana | |---------|-------------|----------|---------| | IDE Support | Yes | Yes | Limited | | Testing Tools | Yes | Yes | Limited | | Debugging | Yes | Yes | Bas",
    "url": "/docs/comparison/feature-comparison"
  },
  {
    "title": "key-advantages",
    "body": " # Key Advantages  ## Overview  Circle Layer offers several key advantages over other blockchain platforms:  ## Technical Advantages  ### 1. High Performance - 10,000+ TPS - 2-second block time - 4-second finality - Efficient consensus mechanism  ### 2. Advanced Security - AI-powered security system - Real-time threat detection - Automated vulnerability scanning - Formal verification support  ### 3. Scalability - Built-in sharding - Layer 2 solutions - Cross-chain compatibility - Optimized resource usage  ## Developer Advantages  ### 1. Developer Experience - EVM compatibility - Comprehensive tooling - Extensive documentation - Active community support  ### 2. Cost Efficiency - Lower gas fees - Optimized resource usage - Efficient contract execution - Cost-effective deployment  ### 3. Innovation - Latest blockchain features - Regular updates - Community-driven development - Open to new ideas  ## User Advantages  ### 1. User Experience - Fast transactions - Low fees - User-friendly inte",
    "url": "/docs/comparison/key-advantages"
  },
  {
    "title": "deploying-contracts",
    "body": " # Deploying Contracts  ## Overview  Learn how to deploy smart contracts to Circle Layer.  ## Deployment Methods  ### 1. Using Hardhat ```javascript // hardhat.config.js module.exports = {   networks: {     circleLayer: {       url: \"https://rpc.circlelayer.com\",       accounts: [privateKey]     }   } };  // deploy.js async function main() {   const Contract = await ethers.getContractFactory(\"MyContract\");   const contract = await Contract.deploy();   await contract.deployed();   console.log(\"Contract deployed to:\", contract.address); } ```  ### 2. Using Truffle ```javascript // truffle-config.js module.exports = {   networks: {     circleLayer: {       provider: () => new HDWalletProvider(privateKey, \"https://rpc.circlelayer.com\"),       network_id: \"*\"     }   } };  // migrations/1_deploy_contracts.js const MyContract = artifacts.require(\"MyContract\"); module.exports = function(deployer) {   deployer.deploy(MyContract); }; ```  ### 3. Using Circle Layer CLI",
    "url": "/docs/development/deploying-contracts"
  },
  {
    "title": "interacting-with-contracts",
    "body": " # Interacting with Contracts  ## Overview  Learn how to interact with smart contracts on Circle Layer.  ## Methods of Interaction  ### 1. Web3 Libraries ```javascript // Using ethers.js const contract = new ethers.Contract(address, abi, signer); const result = await contract.someFunction(); ```  ### 2. Command Line ```bash # Using Circle Layer CLI circle-layer contract call <address> <function> [args] ```  ### 3. Web Interface - Circle Layer Explorer - Custom DApp interfaces - Wallet integrations  ## Common Interactions  ### Reading Data ```javascript // Get contract state const value = await contract.getValue(); const owner = await contract.owner(); ```  ### Writing Data ```javascript // Send transaction const tx = await contract.setValue(42); await tx.wait(); ```  ### Events ```javascript // Listen to events contract.on(\"ValueChanged\", (newValue, oldValue) => {     console.log(`Value changed from ${oldValue} to ${newValue}`); }); ```",
    "url": "/docs/development/interacting-with-contracts"
  },
  {
    "title": "writing-smart-contracts",
    "body": " # Writing Smart Contracts  ## Overview  Learn how to write and deploy smart contracts on Circle Layer.  ## Getting Started  ### Prerequisites - Solidity knowledge - Development environment setup - Circle Layer testnet access  ### Basic Contract Structure ```solidity // SPDX-License-Identifier: MIT pragma solidity ^0.8.0;  contract MyContract {     // State variables     address public owner;     uint256 public value;      // Constructor     constructor() {         owner = msg.sender;     }      // Functions     function setValue(uint256 _value) public {         require(msg.sender == owner, \"Not authorized\");         value = _value;     } } ``` ```  ## Best Practices  ### 1. Security - Use latest Solidity version - Implement access control - Add input validation - Handle errors properly  ### 2. Gas Optimization - Optimize storage usage - Use appropriate data types - Batch operations - Minimize state changes  ### 3. Testing - Write unit tests - Use test coverage tools - Test edge cases ",
    "url": "/docs/development/writing-smart-contracts"
  },
  {
    "title": "common-questions",
    "body": " # Common Questions  ## General Questions  ### What is Circle Layer? Circle Layer is a high-performance blockchain platform that combines AI-powered security with EVM compatibility.  ### How does Circle Layer differ from Ethereum? - Higher TPS (10,000+ vs 15-30) - Faster block time (2s vs 12s) - AI-powered security - Lower gas fees  ### Is Circle Layer EVM compatible? Yes, Circle Layer is fully EVM compatible, allowing Ethereum developers to easily port their applications.  ## Technical Questions  ### How do I connect to Circle Layer? ```javascript // Using ethers.js const provider = new ethers.providers.JsonRpcProvider('https://rpc.circlelayer.com'); ``` ``` ``` ```  ### What wallets are supported? - MetaMask - WalletConnect - Circle Layer Wallet - Hardware wallets  ### How do I get testnet tokens? 1. Visit the faucet 2. Connect your wallet 3. Request testnet tokens  ## Development Questions  ### How do I deploy a smart contract? See our [Deployment Guide](/development/deploying-contr",
    "url": "/docs/faqs/common-questions"
  },
  {
    "title": "Connect to Testnet",
    "body": " # Connect to Testnet  Learn how to connect to Circle Layer's testnet for development and testing purposes.  ## Testnet Details  - Network Name: Circle Layer Testnet - RPC URL: https://testnet-rpc.circlelayer.org - Chain ID: TBD - Currency Symbol: tCIRCLE - Block Explorer: https://testnet-explorer.circlelayer.org  ## Connection Steps  1. Configure your wallet with testnet settings 2. Switch to the testnet network 3. Verify connection 4. Check testnet status 5. Start testing your applications  ## Testnet Faucet  Access the testnet faucet to receive test tokens for development and testing.",
    "url": "/docs/getting-started/connect-testnet"
  },
  {
    "title": "Set Up a Wallet",
    "body": " # Set Up a Wallet  Learn how to set up and configure your wallet to interact with Circle Layer.  ## Supported Wallets  - MetaMask - WalletConnect - Circle Layer Wallet (coming soon)  ## Installation Steps  1. Choose your preferred wallet 2. Install the wallet extension or application 3. Create a new wallet or import existing 4. Configure network settings 5. Add Circle Layer tokens  ## Network Configuration  - Network Name: Circle Layer - RPC URL: https://rpc.circlelayer.org - Chain ID: TBD - Currency Symbol: CIRCLE - Block Explorer: https://explorer.circlelayer.org",
    "url": "/docs/getting-started/set-up-wallet"
  },
  {
    "title": "Use the Faucet",
    "body": " # Use the Faucet  Learn how to use Circle Layer's testnet faucet to obtain test tokens for development and testing.  ## Faucet Access  - URL: https://faucet.circlelayer.org - Supported Networks: Testnet - Token Type: tCIRCLE  ## How to Use  1. Connect your wallet 2. Enter your wallet address 3. Request test tokens 4. Wait for confirmation 5. Verify balance  ## Faucet Limits  - Daily limit: 100 tCIRCLE - Request interval: 24 hours - Maximum balance: 1000 tCIRCLE  ## Troubleshooting  Common issues and solutions for faucet usage.",
    "url": "/docs/getting-started/use-faucet"
  },
  {
    "title": "governance-model",
    "body": " # Governance Model  ## Overview  Circle Layer uses a decentralized governance model that allows token holders to participate in decision-making.  ## Governance Structure  ### 1. Token Holders - Voting power based on token holdings - Minimum stake for voting: 1,000 CL - Delegation options available  ### 2. Validators - Network security providers - Additional voting weight - Technical expertise  ### 3. Development Team - Technical implementation - Proposal evaluation - Community support  ## Governance Process  ### 1. Proposal Creation - Minimum stake: 10,000 CL - Technical specification - Implementation plan - Resource requirements  ### 2. Discussion Phase - Community feedback - Technical review - Economic impact analysis - Security assessment  ### 3. Voting Phase - Duration: 7 days - Quorum: 20% of total supply - Majority: 60% approval - Implementation threshold  ## Proposal Types  ### 1. Protocol Upgrades - Network parameters - Consensus changes - Security updates  ### 2. Treasury Man",
    "url": "/docs/governance/governance-model"
  },
  {
    "title": "tokenomics",
    "body": " # Tokenomics  ## Overview  Circle Layer's tokenomics model is designed to ensure long-term sustainability and growth.  ## Token Distribution  ### 1. Initial Distribution - Community: 40% - Development: 20% - Validators: 15% - Treasury: 15% - Team: 10%  ### 2. Vesting Schedule - Team tokens: 2-year vesting - Development fund: 4-year release - Treasury: Controlled by governance  ### 3. Emission Schedule - Initial supply: 1 billion CL - Annual inflation: 2% - Staking rewards: 5-15% APY  ## Token Utility  ### 1. Network Security - Staking for validators - Delegation to validators - Slashing protection  ### 2. Governance - Proposal creation - Voting rights - Delegation  ### 3. Transaction Fees - Gas payments - Network operations - Smart contract execution  ## Economic Model  ### 1. Staking Rewards - Validator rewards: 70% - Delegator rewards: 30% - Dynamic APY based on:   - Total stake   - Network usage   - Validator performance  ### 2. Fee Distribution - Validators: 50% - Treasury: 30% - ",
    "url": "/docs/governance/tokenomics"
  },
  {
    "title": "intro",
    "body": "<div class=\"hero-gradient\">   <div class=\"hero-logo-glow\">     <picture>       <source srcSet=\"/img/dark-theme-logo.png\" media=\"(prefers-color-scheme: dark)\" />       <img src=\"/img/light-theme-logo.png\" alt=\"Circle Layer Logo\" class=\"main-logo\" />     </picture>   </div> </div>",
    "url": "/docs/intro"
  },
  {
    "title": "Key Features",
    "body": " # Key Features  Circle Layer offers a comprehensive suite of features designed to meet the needs of modern blockchain applications and users. Our platform combines cutting-edge technology with user-friendly design to create a powerful and accessible blockchain ecosystem.  ## Performance Features  ### High Throughput - Initial capacity: 2,000 TPS - Target capacity: 50,000 TPS - Optimized for DeFi and high-frequency applications - Scalable architecture for future growth  ### Low Latency - 2-second block time - Sub-10-second transaction finality - Efficient block propagation - Optimized network topology  ### Cost Efficiency - Low transaction fees - Predictable gas costs - Efficient resource utilization - Cost-effective smart contract execution  ## Technical Features  ### EVM Compatibility - Full bytecode compatibility - Same opcodes and gas model - Compatible with existing tools - Seamless dApp migration  ### AI Security Layer - Real-time smart contract auditing - Automated vulnerability",
    "url": "/docs/introduction/key-features"
  },
  {
    "title": "Use Cases",
    "body": " # Use Cases  Circle Layer's architecture and features make it ideal for various blockchain applications and use cases. Our high throughput, low latency, and AI security features enable innovative solutions across multiple industries.  ## DeFi Applications  ### Decentralized Exchanges (DEXs) - High-frequency trading support - Low-latency order matching - Cost-effective transactions - Secure smart contracts  ### Lending Platforms - Real-time interest calculations - Automated liquidations - Collateral management - Risk assessment  ### Yield Farming - Efficient reward distribution - Automated compounding - Multi-pool strategies - Risk management  ### Stablecoins - Fast minting and burning - Efficient price stability - Collateral management - Cross-chain compatibility  ## NFT Marketplaces  ### Digital Art - High-resolution asset storage - Royalty management - Marketplace integration - Creator tools  ### Gaming Assets - In-game item trading - Asset interoperability - Play-to-earn mechanics ",
    "url": "/docs/introduction/use-cases"
  },
  {
    "title": "What is Circle Layer?",
    "body": " # What is Circle Layer?  Circle Layer is a high-performance, EVM-compatible, Proof of Stake (POS) Layer 1 blockchain designed to power decentralized finance (DeFi) applications with low fees, fast transactions, and exceptional scalability. It stands out with its innovative AI security layer, which performs on-chain smart contract audits, ensuring a secure and robust ecosystem.  ## Core Technology  Circle Layer combines several cutting-edge technologies to deliver a superior blockchain experience:  - **EVM Compatibility**: Full compatibility with Ethereum's virtual machine, allowing seamless migration of existing dApps - **Proof of Stake**: Energy-efficient consensus mechanism with enhanced security - **AI Security Layer**: Real-time smart contract auditing and threat detection - **High Throughput**: 2,000 TPS at launch, scaling to 50,000 TPS - **Low Latency**: 2-second block time with sub-10-second finality  ## Key Differentiators  ### Performance - Initial TPS: 2,000 transactions per",
    "url": "/docs/introduction/what-is-circle-layer"
  },
  {
    "title": "becoming-validator",
    "body": " # Becoming a Validator  ## Overview  Learn how to become a validator on Circle Layer and help secure the network.  ## Requirements  ### 1. Hardware Requirements - CPU: 8+ cores - RAM: 32GB+ - Storage: 1TB+ SSD - Network: 100Mbps+  ### 2. Software Requirements - Linux OS (Ubuntu 20.04+) - Docker - Circle Layer Node Software - Monitoring Tools  ### 3. Token Requirements - Minimum stake: 100,000 CL - Additional for operations - Emergency fund  ## Setup Process  ### 1. Initial Setup ```bash # Install dependencies sudo apt update sudo apt install -y docker.io  # Pull node image docker pull circlelayer/node:latest  # Create config mkdir -p ~/.circlelayer ```  ### 2. Node Configuration ```yaml # config.yaml network: mainnet port: 26656 rpc_port: 26657 validator_key: \"your-key\" stake_amount: 100000 ```  ### 3. Start Node ```bash docker run -d \\   --name circlelayer-node \\   -v ~/.circlelayer:/root/.circlelayer \\   circlelayer/node:latest ```",
    "url": "/docs/nodes-validation/becoming-validator"
  },
  {
    "title": "node-monitoring",
    "body": " # Node Monitoring  ## Overview  Learn how to monitor your Circle Layer node effectively.  ## Monitoring Setup  ### 1. Basic Monitoring ```bash # Check node status circlelayer status  # View logs tail -f ~/.circlelayer/logs/node.log  # Check resource usage htop ```  ### 2. Prometheus Setup ```yaml # prometheus.yml global:   scrape_interval: 15s  scrape_configs:   - job_name: 'circlelayer'     static_configs:       - targets: ['localhost:26660'] ```  ### 3. Grafana Dashboard ```json {   \"dashboard\": {     \"panels\": [       {         \"title\": \"Node Status\",         \"type\": \"stat\",         \"targets\": [           {             \"expr\": \"circlelayer_node_status\"           }         ]       },       {         \"title\": \"Resource Usage\",         \"type\": \"graph\",         \"targets\": [           {             \"expr\": \"node_cpu_seconds_total\"           }         ]       }     ]   } } ```  ## Key Metrics  ### 1. Node Health - Sync status - Block height - Peer count - Resource usage",
    "url": "/docs/nodes-validation/node-monitoring"
  },
  {
    "title": "node-security",
    "body": " # Node Security  ## Overview  Learn about security best practices for running Circle Layer nodes.  ## Security Fundamentals  ### 1. System Security - Regular updates - Firewall configuration - Access control - Resource limits  ### 2. Network Security - DDoS protection - Rate limiting - Port security - VPN usage  ### 3. Application Security - Secure configuration - Access management - Key security - Monitoring  ## Implementation  ### 1. System Hardening ```bash # Update system sudo apt update sudo apt upgrade -y  # Configure firewall sudo ufw default deny incoming sudo ufw default allow outgoing sudo ufw allow ssh sudo ufw allow 26656/tcp sudo ufw enable ```  ### 2. Access Control ```bash # Create service user sudo useradd -m -s /bin/bash circlelayer sudo usermod -aG docker circlelayer  # Set permissions sudo chown -R circlelayer:circlelayer ~/.circlelayer ```  ### 3. Monitoring Setup ```yaml # security-monitor.yml alerts:   - name: unauthorized_access     condition: auth_failures > 5     action: block_ip",
    "url": "/docs/nodes-validation/node-security"
  },
  {
    "title": "running-full-node",
    "body": " # Running a Full Node  ## Overview  Learn how to run a full node on Circle Layer to participate in the network.  ## Prerequisites  ### 1. System Requirements - CPU: 4+ cores - RAM: 16GB+ - Storage: 500GB+ SSD - Network: 50Mbps+  ### 2. Software Requirements - Linux OS (Ubuntu 20.04+) - Docker - Circle Layer Node Software - Basic monitoring tools  ### 3. Network Requirements - Static IP - Open ports:   - 26656 (P2P)   - 26657 (RPC)   - 26658 (API)  ## Installation  ### 1. System Setup ```bash # Update system sudo apt update sudo apt upgrade -y  # Install dependencies sudo apt install -y docker.io sudo systemctl enable docker ```  ### 2. Node Installation ```bash # Create directory mkdir -p ~/.circlelayer  # Download node software curl -sSL https://get.circlelayer.com | bash  # Initialize node circlelayer init --chain-id circlelayer-1 ```  ### 3. Configuration ```yaml # config.toml moniker = \"your-node-name\" seeds = \"seed1.circlelayer.com,seed2.circlelayer.com\"",
    "url": "/docs/nodes-validation/running-full-node"
  }
]